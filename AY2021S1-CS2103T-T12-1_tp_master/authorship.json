[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-1/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "# What is OneShelf?"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf** is a desktop application for you to manage your restaurant inventories and pending deliveries."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "It is easy to build and customise your inventory items and pending deliveries"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "by using only Command Line Interface. If you are a busy restaurant manager who prefers"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "to use the Command Line Interface and needs to keep track of inventories and deliveries,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " **OneShelf** is definitely for you."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " ![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "# Site Map"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* For detailed documentation of this project, please refer to [OneShelf Product Website](https://ay2021s1-cs2103t-t12-1.github.io/tp/)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* [User Guide](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* [Developer Guide](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* [About Us](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/docs/AboutUs.md)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "# Acknowledgement"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 18,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf** was developed by the team **CS2103T-T12-1**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "You can reach us at the email `e0417539@u.nus.edu`"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### Wincent Tjoi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cimg src\u003d\"images/wincenttjoi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[[github](https://github.com/wincenttjoi)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[[portfolio](team/wincenttjoi.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Responsibilities: Scheduling and tracking, Deliverables and Deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "### Xing Yu"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cimg src\u003d\"images/xnoobftw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "[[github](https://github.com/xnoobftw)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "[[portfolio](team/xnoobftw.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* Responsibilities: Coding Quality"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "### Bobby Law"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003cimg src\u003d\"images/zeranium97.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "[[github](https://github.com/zeranium97)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "[[portfolio](team/zeranium97.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* Responsibilities: Tests, Coding Quality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "### Saad Haider"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003cimg src\u003d\"images/halcon-blanco.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "[[github](https://github.com/halcon-blanco)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "[[portfolio](team/halcon-blanco.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### Weng Fai"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cimg src\u003d\"images/wengfaing.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[[github](https://github.com/wengfaing)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[[portfolio](team/wengfaing.md)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wengfaing": 1,
      "xnoobftw": 4,
      "Wincenttjoi": 14,
      "-": 29,
      "halcon-blanco": 6,
      "zeranium97": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **1. Introduction**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Welcome to OneShelf. This developer guide aims to introduce potential developers to the structure and implementation of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf**. \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "This guide uses a top-down approach design which covers from higher-level design to lower-level design, and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "discusses the implementation of key features as well as the rationale behind certain design decisions with"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "possible alternatives in code design. Next, there are also links to guides for the tools used in Documentation, Logging,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Testing, Configuration and DevOps. Lastly, appendices are provided to specify the product scope, requirements, glossary and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "instructions for manual testing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **2. Setting up, getting started**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **3. Design**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "This section shows the architecture design of **OneShelf**."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 1. Architecture Diagram"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T12-1/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk in a `json` file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* [**`History`**](#command-history-traversal): Records user\u0027s command history and allows for traversal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 2. Class Diagram of Logic Component"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete-i 1`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 3. Sequence Diagram of delete-i 1 command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.2 UI component"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ItemListPanel`, `DeliveryListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The following diagram illustrates the structure of the `UI` component:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 4: Structure of the `UI` Component"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.3 Logic component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The logic component is responsible for all the necessary parsing logic of command, displaying command result "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "by instructing `Ui`, and modifies `Model` and/or `Storage` component depending on the command by user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The following class diagram illustrated the structure of `Logic` component:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e ![Structure of the Logic Component](images/LogicClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 5: Structure of the `Logic` Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The `Logic` component does the following:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "1. `Logic` uses the `Parser` API to parse the user command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. The command execution can affect the `Model` (e.g. adding an item)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "4. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "5. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete-i 1\")` API call."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "![Interactions Inside the Logic Component for the `delete-i 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 6: Sequence Diagram of `delete-i 1`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `ItemDeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.4 Model component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The Model component corresponds to all the data-related logic that the user works with."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The following class diagram illustrates the structure of the `Model` component:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 7: Structure of the `Model` Component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "`Models`,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* stores a map of Models(eg. InventoryModel and DeliveryModel)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* Each model stores the current state of the Book(eg. InventoryModel stores the current state of the InventoryBook)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* used for undo/redo feature"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "`Model`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* stores a `UserPref` object that represents the users preference"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "`InventoryModelManager`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* stores a comparator used to sort the filtered list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* stores the inventory book data"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* stores a list of InventoryBook for redo/undo command"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cItem\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "`DeliveryModelManager`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* stores the delivery book data"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* stores a list of DeliveryBook for redo/undo command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cDelivery\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "We organised the different data classes into packages (eg.Items) which we will list out the collection of class of that data object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "An `Item` consists of `Name`, `Quantity`, `Supplier`, `MaxQuantity`, `Metric` and `Tag`. Once an `item` is deleted,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "its corresponding objects within its composition will also get deleted. An `Item` must have 1 `Name` and `Quantity`,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "0 or 1 `Supplier`, `MaxQuantity`, `Metric` and 0 or more `Tag` objects."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "You may also refer to Figure 8 as shown below:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e ![Structure of the Item Component](images/ItemClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 8: Structure of the `Item`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "A `Delivery` consists of one `DeliveryName`, `Phone`, `Address`, `Order`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "You may also refer to Figure 9 as shown below:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e ![Structure of the Delivery Component](images/DeliveryClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 9: Structure of the `Delivery`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.5 Storage component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Storage component is responsible to save the data of inventory and delivery book into the hard disk."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The following diagram illustrated the structure of `Storage` component:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e ![Structure of the Storage Component](images/StorageClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 10: Class Diagram of `Storage` Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* can save the inventoryBook/deliveryBook data in json format and read it back."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.6 Common classes"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **4. Implementation**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.1 Adding Items and Delivery"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "OneShelf is capable of adding items and deliveries."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Implementation of add Items and Delivery both are done similarly, hence we will only illustrate with an AddItemActivityDiagram below."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "![AddItemActivityDiagram](images/AddItemActivityDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Figure 11: AddItemActivityDiagram"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Apart from adding a new Item, should there be an existing item in the Inventory Book, `Add` will be able to increase the quantity of that particular Item."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "In this case 2 items are considered the same if they have the same `Name` and `Supplier`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "The other variables such as:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "a) `Metric` `MaxQuantity`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "- Are not allowed to be defined if there exists the same item inside InventoryBook."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "b) `Tags`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "- Will be combined together if there exist the same item inside InventoryBook."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Note: Deliveries are all considered unique. Reason being the same person can make multiple delivery orders."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **For example:**`John` with the address `Choa Chu Kang Block 259` is able to make multiple orders before his previous deliveries are fulfilled."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.2 Editing Items and Delivery"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "OneShelf is capable of editing the current items and deliveries in the list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Editing Items and Deliveries both are done similarly which will be illustrated below."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **For this purpose:**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "`ItemEditCommand` and `DeliveryEditCommand` will be referred as `EditCommand`, similarly to `EditDescriptor` and `EditCommandParser`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "The following is a class diagram for the `EditCommand`. It takes in an `Index` and a `EditDescriptor` class respectively, which contains of the changes to be made."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "![EditClassDiagram](images/EditClassDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Figure 12: Class Diagram of EditCommand"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "The following is an activity diagram for the `EditCommand`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Once the user enters a valid `EditCommand`, `EditCommandParser` will utilise `ArguementMultiMap` to capture the data of the field to be edited."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "It will then create an `EditDescriptor`, which stores the new data to its respective field, and passed it back to `EditCommand` together with the `Index` that the user has specified."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "`EditCommand` will retrieve the Item/Delivery using the `Index` based on the current list and updates the relevant field."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "![EditActivityDiagram](images/EditActivityDiagram.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Figure 13: EditCommand Activity Diagram"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Below is a usage example of editing an Item:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Step 1: User executes `edit-i 1 s/Cold Storage`  to edit the supplier from `Index` 1 of the current list. \u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Step 2: `ItemEditCommandParser` is called and `ArguementMultiMap` maps \"Cold Storage\" to `Prefix` \"/s\". `EditItemDescriptor` will also be created, storing the \"Cold Storage\" under `Supplier` field. `EditItemDescriptor` and `Index` will then be passed to `ItemEditCommand`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Step 3: `ItemEditCommand` retrieve the `Item` to be edited from current list. `ItemEditCommand#createEditedItem` will be called to create the new `Item` with the replaced field. \u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Step 4: `ItemEditCommand` replaces the existing `Item` to the new `Item` created. \u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Below is a sequence diagram of the above usage."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "![ItemEditCommandSequenceDiagram](images/ItemEditCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Figure 14: ItemEditCommand Sequence Diagram"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.3 Command History Traversal"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Much like Window\u0027s Command Prompt, OneShelf supports traversal of command history with the arrow up and down key."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "There is a `History` interface that is implemented by `HistoryManager` class which stores `commandHistory` up to its `lengthLimit`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "In order to replicate Window\u0027s Command Prompt\u0027s History traversal behaviour, a `hasReturnedCurrentCommandBefore` boolean is required to prevent the first `previousCommand()`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "method call to return `commandHistory`\u0027s 2nd last command instead of the last command."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "`hasReturnedCurrentCommandBefore` will be set to true after the initial call of `previousCommand()` and will be reset to false if new commands are added or `nextCommand()` results in a `Optional.empty()`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "With `addToHistory(String command)`, `previousCommand()`, `nextCommand()` and `currentCommand()` implemented, a simple `setOnKeyPressed` under `CommandBox` class which checks"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "for user\u0027s input of arrow up (which calls previousCommand()) and arrow down (which calls nextCommand()) would suffice for GUI implementation."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Below is the sequence diagram when user pressing the arrow up button with `CommandBox` selected on GUI."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "![CommandHistoryTraversalSequenceDiagram](images/CommandHistoryTraversalSequenceDiagram.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "When the user, while having the `CommandBox` selected, pressing the arrow up key, it\u0027ll prompt the GUI to call `CommandBox`\u0027s `handleHistoryNavigation(Event)` which will call `HistoryManager`\u0027s `previousCommand()` method."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "`previousCommand()` will attempt to return the previous command entered by user, if any. Then `CommandBox` will call `TextField`\u0027s `setText(String)` on the return value of `previousCommand()` which will set the text for the User"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "in the GUI."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.4 Finding Items and Delivery"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "OneShelf is capable of storing many items and pending deliveries."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Therefore, it is of utmost importance to have the ability to find items"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "and deliveries based on different fields. There could also be many similar items and"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "this will definitely aid the user in finding them quickly. \u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "We have modified the `find` command to be able to search for `NAME`, `SUPPLIER`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "and `TAGS` for items using `find-i`. Similarly, for deliveries, it is also possible"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "to search using the `DELIVERYNAME`, `PHONE`, `ADDRESS` or `ORDER` using `find-d`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Note that the implementation of `find-i` and `find-d` are relatively similar and in this example, we will only show"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "`find-i`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a `find` command:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "![FindCommandActivityDiagram](images/FindActivityDiagram.png)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "By using `ArgumentMultimap`, we are able to record the searching criteria together with the prefixes. We will then pass this criteria along with the prefix to create a Predicate that matches the specified field object which implements `Predicate\u003cItem\u003e`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "The predicate is then combined and passed to the `InventoryModel#UpdateItemListFilter` which will then be used to set the predicate on the existing filteredlist."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Below is a usage example:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Step 1: User executes `find-i s/NTUC` command to search the list of items by Supplier \u003cbr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Step 2: `ItemFindCommandParser` is called and `ArguementMultiMap` maps each prefix to their values and checks which prefix has a"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "value \u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Step 3: The value and prefix is then used to create the predicate and passed to `ItemFindCommand` \u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Step 4: `ItemFindCommand` executes the command and update the filteredList \u003cbr\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "There is a slight difference in `ADDRESS`, `PHONE`, `ORDER` predicate. The original implementation of predicates will only return true if there is an exact match."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "The issue comes with that these field might be too long and logically do not make sense to search the whole content of the field."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Hence, we have modified it to allow the predicate to match the substrings of the whole content."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "You can refer to the sequence diagram as shown below:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "![ItemFindCommandSequenceDiagram](images/ItemFindCommandSequenceDiagram2.png)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.5 Undo/Redo Command"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Each `Model` internally stores its undo and redo history as a (for `DeliveryModel`) `deliveryBookStateList` and `deliveryBookStatePointer`. There are corresponding analogs for `InventoryModel`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Additionally, the following commands are implemented by `ModelsManager`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* `ModelsManager#commit()` — Saves the current book states of all the `Model`s it contains in their history."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* `ModelsManager#undo()` — Restores the previous book states from each `Model` from their history."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* `ModelsManager#redo()` — Restores all previously undone book states from every `Model`\u0027s history."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "These operations are exposed in the `Models` interface as `Models#commit()`, `Models#undo()` and `Models#redo()` respectively."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "The `ModelsManager` class calls `Model#commit()`, `Model#undo()`, and `Model#redo` on each of the models it contains, which then handle the respective tasks."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Step 1. The user launches the application for the first time. Each `Model` will be initialized with its initial state, and the pointer pointing to their respective book\u0027s state."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Step 2. The user executes `delete-i 5` command to delete the 5th item in the inventory book. The `delete-i` command calls `Models#commit()`, causing the modified state of the inventory and delivery books after the `delete-i 5` command executes to be saved in the `inventoryBookStateList`, `deliveryBookStateList`,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "and the `inventoryBookStatePointer`, `deliveryBookStatePointer` are shifted to the newly inserted books state."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Step 3. The user executes `add-d n/David p/12345678 …​` to add a new Delivery. The `add-d` command also calls `Models#commit()`, causing another set of modified book states to be saved into the `inventoryBookStateList` and `deliveryBookStateList`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Models#commit()`, so the states will not be saved into the `inventoryBookStateList` and `deliveryBookStateList`."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Step 4. The user now decides that adding the delivery was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Models#undo()`, which will shift the `deliveryBookStatePointer` and `inventoryBookStatePointer` once to the left, pointing it to the previous states, and restores the inventoryBook/deliveryBook to those states."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the current state pointers are at index 0, pointing to the initial state, then there are no previous books states to restore. The `undo` command uses `InventoryModel#canUndo()` and `DeliveryModel#canUndo()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "The `redo` command does the opposite — it calls `Models#redo()`, which shifts the `inventoryBookStatePointer` and `deliveryBookStatePointer` once to the right, pointing to the previously undone state, and restores the inventoryBook and deliveryBook to that state."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the current pointers are pointing to the latest state, then there are no undone InventoryBook/DeliveryBook states to restore. The `redo` command uses `InventoryModel#canRedo()` and `DeliveryModel#canRedo()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Step 5. The user then decides to execute the command `list-i`. Commands that do not modify the inventoryBook and deliveryBook, such as `list-d` and `find-i`, will usually not call `Models#commit()`, `Models#undo()` or `Models#redo()`. Thus, the `inventoryBookStateList` and `deliveryBookStateList` remain unchanged."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Step 6. The user executes `clear-d`, which calls `Models#commit()`. Since the state pointers are not pointing at the end of the respective state lists, all states after the current state will be purged. Reason: It no longer makes sense to redo the `add-d n/David p/12345678 …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire state."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the item being deleted)."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.6 Help Window"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "There are 2 types of help window: `help summary` and `help start`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The `logic` behind help command is similar to other commands in terms of `parsing`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "In this section, we will only discuss the main difference of `Help Window` as compared to"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "other features\u0027 implementation."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Refer to the code snippet shown below which is related to `help summary` command:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "```"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    // HelpSummaryCommand class"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new HelpCommandResult(SHOWING_HELP_MESSAGE, false, true, false, \"\", HELP_SUMMARY);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    // Constructor of HelpCommandResult"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public HelpCommandResult(String feedbackToUser, boolean showHelp,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                             boolean showPreview, boolean exit, String dataToUser,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                             String popUpContent) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        super(feedbackToUser, showHelp, showPreview, exit);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.dataToUser \u003d requireNonNull(dataToUser);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.popUpContent \u003d requireNonNull(popUpContent);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "```"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "After parsing of help command has been done *(Refer to Figure 6 for similar sequence diagram)*,"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "`HelpSummaryCommand#execute(Model)` will override `isShowPreview`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "field from `CommandResult` to be true."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "This method returns `HelpCommandResult` which will interact with `Ui` component to display"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "the result in the user interface. Similar to this, the only difference for `help start` is that isShowHelp is"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "the field to be overridden as true. \u003cbr\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Also notice that `HelpSummaryCommand#execute(Models)` takes in `HELP_SUMMARY` as the `popUpContent`,"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "which is the message that will be shown to users in the new window."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "If there is a need for any changes in the help message, `HELP_SUMMARY` can be found in `Message` class inside"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "`commons/core` package."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "You may refer to the Help Activity Diagram shown below:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "![HelpActivityDiagram](images/HelpActivityDiagram.png)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.7 Logging"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* We are using `java.util.logging` package for logging."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "*  The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "*  Log messages are output through the console and to a `.log` file."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "*  The output logging level can be controlled using the `logLevel` setting in the configuration file (See the [Configuration guide](#configuration) section)."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **When choosing a level for a log message**, follow these conventions:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * `SEVERE`: A critical problem detected which may cause the termination of the application."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * `WARNING`: Can continue, but with caution."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * `INFO`: Information showing the noteworthy actions by the App."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * `FINE`: Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"configuration\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 4.8 Configuration"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Certain properties of the application can be controlled (e.g user preferences file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **5. Documentation**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Refer to the guide [here](Documentation.md)"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **6. Testing**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Refer to the guide [here](Testing.md)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **7. DevOps**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Refer to the guide [here](DevOps.md)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **Appendix A: Product scope**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Target user profile**: Restaurant owners"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* needs to keep track of pending deliveries"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* needs to manage purchasing appropriate amounts of raw materials based on usage"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* wants to be updated on raw materials stock level on a daily basis"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* is reasonably comfortable using CLI commands"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Value proposition**: manage inventory and pending delivery faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **Appendix B: User stories**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                                                                   | So that I can…​                                                     |"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| -------- | ------------------------------------------ | --------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* * *`  | Restaurant owner                           | be able to list all the items out                                                 | save in terms of man-hours                                             |"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* * *`  | Restaurant owner                           | have an accurate stock level reflected in a system                                | know when to restock and know how much is left to sell                 |"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* * *`  | Inventory Manager                          | remove stock                                                                      | update them in the event of usage/stock going bad                      |"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* * *`  | Supplier                                   | be able to be up to date with the restaurant\u0027s stock level                        | have a heads up on how much to restock                                 |"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Restaurant owner                           | be able to order appropriate amount of raw materials for work cycle ahead         | minimize waste                                                         |"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Restaurant owner                           | store all the supplier\u0027s information                                              | contact them easily                                                    |"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Restaurant owner                           | be able to view schedules                                                         | plan deliveries from wholesalers                                       |"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Restaurant owner                           | be able to add notes                                                              | input more details                                                     |"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Restaurant owner                           | use the app in an easier way                                                      | teach new users quicker                                                |"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Inventory Manager                          | be able to categorise the items                                                   | better manage them                                                     |"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Inventory Manager                          | sort my items                                                                     | visualize the inventory better                                         |"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Inventory Manager                          | be able to print monthly report                                                   | keep track of the restaurant\u0027s status                                  |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Inventory Manager                          | receive a notification if stock goes below a threshold                            | restock promptly                                                       |"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Inventory Manager                          | see the prices of my items                                                        | better manage budget                                                   |"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Inventory Manager                          | see statistics of stocks                                                          | optimize future restocking                                             |"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Inventory Manager                          | be able to upload images of stock                                                 | identify them easily                                                   |"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | First time user                            | be able to pick up commands easily                                                | start using the application asap                                       |"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `* *`    | Fast typist                                | be able to undo my command                                                        | correct myself in case of a typo                                       |"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "| `*`      | Inventory Manager                          | be able to convert data into csv/excel                                            | view it in a more readable format                                      |"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **Appendix C: Use Cases**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "(For all use cases below, the **System** is the `OneShelf` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Use case: UC01 - Delete an item**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "1.  User requests to list items"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "2.  InventoryBook shows a list of items"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "3.  User requests to delete a specific item in the list"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "4.  InventoryBook deletes the item"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "5.  User requests to list items"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "6.  InventoryBook shows a list of items without the deleted item"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * 2a1. OneShelf shows an empty list."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * 3a1. OneShelf shows an error message."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Use case: UC02 - Adding a new inventory item**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. User request to add a new inventory item."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "2. OneShelf adds the item accordingly."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* 1a. OneShelf detect invalid data input."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * 1a1. OneShelf shows an error message."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* 1b. OneShelf unable to detect existing item name and supplier."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* 1c. InventoryBook detects existing item name and supplier."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * 1c1. InventoryBook adds on existing item name and supplier\u0027s with input quantity or new tags."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Use case: UC03 - Editing an item**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. User requests to list all items or a specific item using the find-command"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "2. InventoryBook shows the list of corresponding items."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "3. User requests to edit a specific item in the list."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "4. InventoryBook edits the item."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * 2a1. OneShelf shows an empty list. "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * 3a1. OneShelf shows an error message."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* 3b. The given data to edit is invalid."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * 3b1. OneShelf shows an error message."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* 3c. OneShelf detects a duplicate after editing."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * 3c1. OneShelf shows an error message."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Use case: UC04 - User opens help window**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. User requests to open up help start window."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. OneShelf opens up new Help Start window."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. User requests to open up help Summary window."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "4. OneShelf opens up new Help Summary window."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* 3a. User requests to open up Help Start window."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * 3a1. OneShelf does **not** open a new Help Start Window."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "   "
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Use case: UC05 - Undoing a command**"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. User executes a command (e.g. \u003cu\u003edeletes an item (UC01)\u003c/u\u003e)."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "2. User realises executing the command was a mistake and requests to undo it."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "3. OneShelf reverts the data and UI to the state it was in before the command executed (e.g. puts the deleted item back into the inventory)."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* 3a. There are no more commands to undo"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * 3a1. OneShelf gives an appropriate message informing the user that there are no more previous states to revert to."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Use case: UC06 - Redoing an undone command**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. User \u003cu\u003eundoes a command (UC05)\u003c/u\u003e."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "2. User requests OneShelf to redo the command"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "3. OneShelf brings the data and UI to the state it was in after the undone command was executed."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* 4a. There are no more commands to redo"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * 4a1. OneShelf gives an appropriate message informing the user that there are no more redoable states to go to."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Use case: UC07 - Finding a delivery**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. User finds a particular pending delivery."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. OneShelf returns the matching delivery."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* 1a. There are no matching delivery found in the list"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * 1a1. OneShelf does not return any delivery."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Use Case ends."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* 1b. Find contains an invalid prefix"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * 1b1. OneShelf shows an error."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Use Case ends."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  "
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Use case: UC08 - Exits application**"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. User exits the application."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. OneShelf application closes."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Use Case ends."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **Appendix D: Non-Functional Requirements**"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "2.  Should be able to hold up to 1000 items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "4.  Should work on 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "5.  Should not take up more than 50 MB of disk space."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "6.  Should not take up more than 250 MB of RAM."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "7.  Add, Delete, List, Undo, Redo, Edit, and Remove Commands should receive a response within 1 second regardless of data size."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "8.  All other commands should receive a response withing 5 seconds regardless of data size."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "9.  The data should be secured using a password."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "10. Users should be able to get fluent with the syntax by their 10th usage."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "11. The system should still be able to function without connection to a network."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "12. The system should only be used by one user."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "13. Storing 100 states of the models for the Undo and Redo Commands should not take more than 100 KB."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "14. Storing 100 states of history of commands the user has entered should not take more than 10 KB."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **Appendix E: Glossary**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Item**: Restaurant\u0027s inventory item which can be restaurant materials *(i.e fork, spoon, chair)* or ingredients"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "*(i.e milk, cheese)*"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Delivery**: Delivery order that has yet to be delivered out from the restaurant"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Book**: There are 2 types of book, namely: Inventory Book and Delivery Book which stores the data of your"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "inventory items and pending deliveries respectively"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## **Appendix F: Instructions for manual testing**"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### F1. Adding a new item"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "1. Adding an item"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    1. Test Case: `add-i n/Chicken q/123 s/NTUC`"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       Expected: Item with `Name` of Chicken, `Quantity` of 123 and `Supplier` of NTUC added"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    1. Test Case: `add-i n/Chicken q/123 s/giant max/500 metric/kg`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: Item with `Name` of Chicken, `Quantity` of 123, `Supplier` of NTUC, `MaxQuantity` of 500 and `Metric` of kg added."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       "
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `add-i n/Chicken q/-10`"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: User will receive an error message as `Quantity` cannot be a negative number."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `add-i n/Chicken q/0 s/Sheng Shiong t/meat t/perishable`"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: Item with `Name` of Chicken, `Quantity` of 0 and 2 `Tag`s of meat and perishable added."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       "
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `add-i n/Chicken s/NTUC t/meat`"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: User will receive an error message as `Quantity` is a compulsory field for `add-i`."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### F2. Adding to an existing item"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "1. Adding to an existing item"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Prerequisites: Item with `Name` of Chicken and `Supplier` of NTUC exists in the inventory book."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       This item has `Quantity` of 50."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    1. Test Case: `add-i n/Chicken q/123 s/NTUC`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: Item with `Name` of Chicken and `Supplier` of NTUC will have it\u0027s `Quantity` increased to 173. "
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       `MaxQuantity` `Tags` `Metric` will be adopted from the existing item."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    1. Test Case: `add-i n/Chicken q/123 s/giant max/500 metric/kg`"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       Expected: User will receive an error message as `MaxQuantity` or `Metric` should not be defined when adding to existing item."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `add-i n/Chicken s/NTUC q/10 t/meat`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: Meat tag should be added into the chicken supplied from NTUC, and quantity increased by 10."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       "
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### F3. Adding a pending delivery"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Adding a pending delivery"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   1. Test Case: `add-d n/DAMITH p/91829722 a/Jln Bukit Batok o/Nasi lemak x2`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: A pending delivery with `Name` of Damith, `Phone` of 91829722, `Address` of Jln Bukit Batok, "
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       `Order` of Nasi Lemak x2 and `deliver by` 30 minutes added to the delivery book."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       "
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   1. Test Case: `add-d n/DAMITH p/91829722 a/Jln Bukit Batok o/Nasi lemak x2 by/15`"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "       Expected: Same delivery as the above test case is added with the exception of `deliver by` to be 15 minutes."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### F4. Editing Command"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "1. Editing an item or delivery"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    1. Prerequisites: List all item or delivery using `list-i` and `list-d` respectively."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    1. Test Case: `edit-i 1 metric/KG` \u003cbr\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "       Expected: Metric of the `Item` located at Index 1 of the current list will be changed to \"KG\"."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    1. Test Case: `edit-i 2 t/` \u003cbr\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "       Expected: Tag of the `Item` located at Index 2 of the current list will be empty."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    1. Test Case: `edit-d 3 p/85734829` \u003cbr\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "       Expected: Phone number of the `Delivery` located at Index 3 of the current list will be changed to 85734829."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    1. Test Case: `edit-i 1` or `edit-d 3` \u003cbr\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "       Expected: No item or delivery is edited. Error details shown in status message."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    1. other incorrect edit commands to try: `edit`, edit x n/TUNA`, ... (where x is larger than the list size, x is a negative number or x is not an integer) \u003cbr\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "       Expected: Similar to previous."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  "
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       "
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### F5. Deleting an item"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Deleting an item while all items are being shown"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "   1. Prerequisites: List all items using the `list-i` command. Multiple items in the list."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   1. Test Case: `delete-i 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   1. Test Case: `delete-i 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      Expected: No item is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   1. Other incorrect delete commands to try: `delete-i`, `delete-i x`, `...` (where x is larger than the list size, "
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   x is a negative number, or x is not an integer)\u003cbr\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "      "
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### F6. Undoing a command"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Undoing a command before any commands have been entered."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    "
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    1. Prerequisites: No commands have been entered yet."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    "
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `undo` \u003cbr\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Expected: Error message is shown, stating that undo cannot be performed."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        "
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Undoing after a command has executed"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    1. Prerequisites: The last command entered was `clear-i`, which cleared all of 5 items in the inventory book."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    "
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `undo` \u003cbr\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Expected: The inventory book is restored to the state where it had 5 items. Success message is displayed."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      "
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always; visibility: hidden\"\u003e "
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\\pagebreak"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      "
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### F7. Redoing an undone command"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Redoing a command before any commands have been undone."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    "
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    1. Prerequisites: No commands have been undone yet."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    "
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `redo` \u003cbr\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Expected: Error message is shown, stating that redo cannot be performed."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        "
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Note:** you can restart the application if you have entered commands previously"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Redoing after a command that changes the `InventoryBook` or `DeliveryBook` has executed"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    1. Prerequisites: The last command entered changed the Inventory/Delivery book."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    "
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `redo` \u003cbr\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Expected: Error message is shown, stating that redo cannot be performed."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        "
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Undoing after a command has been undone"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    1. Prerequisites: A `clear-i` command was entered, which cleared all of 5 items in the inventory book. It was followed by an `undo` command."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    "
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    1. Test Case: `redo` \u003cbr\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Expected: The inventory book is restored to the state where all its items were cleared. Success message is displayed. "
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "xnoobftw": 224,
      "Wincenttjoi": 289,
      "-": 273,
      "halcon-blanco": 112,
      "zeranium97": 144
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [OneShelf’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 1,
      "-": 48
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf** is a desktop application for you to manage your restaurant inventories. Additionally, you can also"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "keep track of deliveries that has yet to be delivered to customers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "It is easy to build and customise your inventories and deliveries by using"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "only Command Line Interface. If you are a restaurant manager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "who prefers to use the Command Line Interface and needs to keep"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "track of inventory items and pending deliveries, **OneShelf** is for you."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "This User Guide will provide a general overview of installation, current features, and a sneak peek for upcoming features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 2.1 Installation Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"installationvideo\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Refer to this video for a quick tutorial on **OneShelf Installation Guide**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[![](http://img.youtube.com/vi/W460SJkRMMM/0.jpg)](http://www.youtube.com/watch?v\u003dW460SJkRMMM \"One Shelf Installation Guide\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Installation Steps:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Download the latest `oneshelf.jar` from [here](https://github.com/AY2021S1-CS2103T-T12-1/tp/releases)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for this application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Double-click the file to start the app. If you are unable to open the file by double-clicking, "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "you may want to install "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[Java SE Platform](https://www.oracle.com/sg/java/technologies/javase-downloads.html) or you can also open **OneShelf**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "using the terminal, refer to the installation guide video above."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Refer to the [Features](#3-features) below for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 2.2 How to use OneShelf"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf** has 2 main components, namely are:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Inventory items"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. Pending deliveries"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "From here onwards, the term `item` and `delivery` are used specifically for inventory items and pending deliveries respectively."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### Inventory items"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Inventory items are the items that you want to keep track in your restaurant. The input for inventory items are flexible,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "so that you can define the items according to your needs. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "`Name` and `Supplier` are used to uniquely identify an inventory item."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "You can keep track of restaurant items such as chair, frying pan, spoon or even ingredients such as milk, chicken, etc. \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "All items related commands have a suffix `-i`. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### Pending deliveries"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pending deliveries are deliveries that has yet to be delivered out to customers. Imagine you have received a call from"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "a customer requesting for a delivery, you can also keep track for all the deliveries\u0027 request. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "All delivery orders are unique."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "You are able to add multiple delivery orders from the same `Name`, `Phone` and `Address`. There is no duplication in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "pending deliveries, unlike inventory items. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "*Reason: A person have ordered from the restaurant. 10 minutes later, the same person called again to add "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "a new order. Therefore, we allow you to add different orders even if `Name`, `Phone` and `Address` are already in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "the list.*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "All pending deliveries related command have a suffix `-d`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 2.3 User Interface Sections"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"uiwithannotationpng\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Once you have opened OneShelf application, similar GUI shown below (Figure 1) should appear. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *Note how the app contains some sample data but the installed version on your desktop might have a different data set.*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "      "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   ![Ui](images/UiWithAnnotation.png) "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "      "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   Figure 1: Introduction to OneShelf User Interface"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Component | Description |"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|-----------|-------------|"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Toolbar | Displays the toolbar options for this application. You can access the different `help` windows and `exit` the application.|"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Inventory book | Shows the list of inventory items that you have |"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Delivery book | Shows the list of pending deliveries that you have |"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Result Display | Displays the result of your command |"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Command box | For users to type their commands |"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Date time | Displays the date time at the current moment of viewing |"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "*You may want to refer to the [glossary](#6-glossary)*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   \u003ca name\u003d\"uihelpstart\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Type the command `help start` in the command box and press Enter to execute it. \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   A new help window shown below (Figure 2) should appear on your desktop. You are strongly encouraged to follow"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   the steps in the help window if you are a new user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![Help Window](images/UiHelpStart.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 2: Help Start Window"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"3-features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "In this section, you can find the different available command features, general features "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "and upcoming features."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.1 Command Features"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Things to note for the commands:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* Commands with suffix of `-i` refer to `item` related commands, while those with suffix of `-d` refer to `delivery` related commands. \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  e.g. `add-i` is used to add an `item` and `add-d` is used to add a `delivery`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  \u003ca name\u003d\"index\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* In the format of commands, `INDEX` refers to the numbering that is displayed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  \u003cbr\u003e "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  ![Index](images/Index.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Figure 3: Index Annotation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* In the format of commands, words in `UPPER_CASE` are what you would input.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  e.g. for a command with format `add-i n/NAME q/QUANTITY`, \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  replace `NAME` and `QUANTITY` with your input: `add-i n/Chicken q/10`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* In the format of commands, square brackets are to indicate optional fields. The fields in the square brackets are not mandatory to input.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  e.g a command with format `n/NAME [t/TAG]` can be used as "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  1. either `n/Chicken t/Poultry` "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  1. or just `n/Chicken`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* Items with `…`​ after them can be used multiple times in the same command or not at all.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  e.g. `[t/TAG]…​` can be used "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  1. once: `t/brother`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  1. or multiple times: `t/sibling t/brother t/family`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* Fields in the commands can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  e.g. a command with format `add-i n/NAME q/QUANTITY` can be used as"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  1. either `add-i n/Chicken q/10`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  1. or `add-i q/10 n/Chicken`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* If you add multiple inputs of the same parameter in a single command, OneShelf will take in the last parameter"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "as the actual input. \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  e.g. `add-i n/Chicken q/10 n/Fish` \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  Notice that in this example, `NAME` appears twice in one single command, OneShelf will take Fish as the actual"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  name and ignore Chicken."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* The `|` symbol means the user must provide at least one of the fields separated by the `|`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.1.1 Viewing help : `help`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.1a `help start`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "If you are a first time user, we strongly encourage you to follow the guide to kick-start your journey in **OneShelf**."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Format: `help start`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "To open up `help start` window, you can also do the following:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* Press `F1` at any point in the usage of the app"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Click on `Help` located at the top toolbar and then click `Start F1`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "A new help window similar to [Figure 2](#uihelpstart) should appear on your desktop."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.1b `help summary`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "We understand that even if you are not a first time user, it is not easy to remember all the commands."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Should you require any quick reference of commands, you can enter `help summary`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Format: `help summary`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "To open up `help summary` window, you can also do the following:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Press `F2`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Click on `Help` located at the top toolbar and then click `Summary F2`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "A new help window similar below (Figure 4) should appear on your desktop."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"helpsummary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "![Help Summary Screenshot](images/HelpSummaryWindow.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 4: Help Summary Window"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "#### 3.1.2 Adding an item or delivery: `add-i` or `add-d`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Adds inventory item or pending delivery to **OneShelf**."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.2a `add-i`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Format: `add-i n/NAME q/QUANTITY [s/SUPPLIER] [max/MAX_QUANTITY] [metric/METRIC] [t/TAG]...​`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note when adding an item:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* If item does not exist in the inventory book, then a new item will be added."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* If similar inventory item already exist, then the `QUANTITY` of that particular item will be increased."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* An item which has the same `NAME` and `SUPPLIER` is considered similar."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* `MAX_QUANTITY` denotes the ideal stock level of that particular item."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* `TAG` could be used to categorise items. EG: Duck can be tagged as meat."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "*Note: `MAX_QUANTITY` is not a hard cap on the amount of an item you can store in the inventory.* "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"addexample1\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Example 1: Add an item using [Figure 1](#uiwithannotationpng) data set as the starting point."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Type `add-i n/DUCK q/10 s/NTUC max/50 metric/KG t/meat t/food` in the [Command Box](#uiwithannotationpng)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "2. Either press Enter on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. The new item will show up in Inventory Book, refer to Figure 5:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![add-i_step_1](images/add-i_eg1.1.PNG)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 5: Add new item of duck"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "4. Press key arrow up on your keyboard to toggle to previous command and press Enter. "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   You should receive an error message, refer to Figure 6:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![add-i_step_2](images/add-i_eg1.2.PNG)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 6: Error for invalid input"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Your command should not pass through as you are not allowed to add an existing item with max quantity and metric."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   *Note: If you want to edit the maximum quantity or metric of an existing item, refer to [edit](#edit) feature*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "5. Repeat step 1 and 2 above but with the command: `add-i n/DUCK q/10 s/NTUC t/perishable`. "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "   You can refer to Figure 7 for the expected result:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![add-i_step3](images/add-i_eg1.3.PNG)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 7: Successfully added quantity with new tag"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Notice that you "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    are adding to an existing `item` DUCK which was just added. A new tag of perishable should also appear."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:**Tip:** \u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "An item can have any number of tags (including 0) and adding exactly the same tag to an existing item will not result in duplicated tags"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.2b `add-d`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Format: `add-d n/NAME p/PHONE a/ADDRESS o/ORDER [by/TIME]`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note when adding a delivery:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* You can add a delivery even if the same `Name`, `Phone` and `Address` already exists in the delivery book."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Unit of `Time` is minutes ie. `add-d n/JASON p/91111111 a/Blk 251 Orchard Road o/Nasi goreng x1 by/15` indicates"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "that this order needs to be delivered out in 15 minutes."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Example 1: "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Type `add-d n/JASON p/91111111 a/Blk 251 Orchard Road o/Nasi goreng x1`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. Either press Enter on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. You should now see a new pending delivery with a default `deliver by` of 30 minutes,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " you may want to refer to Figure 8:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![add-d_step1](images/add-d_eg1.1.PNG)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 8: Added Jason\u0027s delivery"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Example 2: "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Repeat step 1 and 2 as above but with the command:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " `add-d n/HUGO p/91123421 a/Blk 253 BUKIT TIMAH o/Fish fillet x1 by/10`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. You should now see a Hugo\u0027s delivery with `deliver by` of 10 minutes,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " you may want to refer to Figure 9 below:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![add-d_step2](images/add-d_eg1.2.PNG)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 9: Added Hugo\u0027s delivery"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:**Tip:** \u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pending deliveries are automatically sorted based on their `deliver by` time and unlike inventory item, pending delivery does not have a quantity"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.1.3 Removing quantity from an item: `remove-i`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Removes a specified quantity of an existing item from **OneShelf**."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Format: `remove-i INDEX q/QUANTITY`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note when removing an item\u0027s quantity:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Subtracts `QUANTITY` from the current quantity of an item at the specified `INDEX`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "The [index](#index) refers to the index number shown in the displayed item list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* `remove-i 1 q/10`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** \u003cbr\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "There is no remove-d since a pending delivery does not have a quantity"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"edit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "#### 3.1.4 Editing an item or delivery: `edit-i` or `edit-d`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Edits an existing item in the Inventory book or an existing pending delivery in the Delivery book."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.4a `edit-i`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Format: `edit-i INDEX [n/NAME | q/QUANTITY | s/SUPPLIER | max/MAX_QUANTITY | t/TAG…​]`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note when editing an item:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* Edits the item at the specified `INDEX`. The index refers to the index number shown in the displayed item list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* Updates the components of an item."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* When editing tags, the existing tags of the item will be removed"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* You can remove all the item’s tags by typing `t/` without"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Example 1: `edit-i 3 n/CARROTS q/50` using [Figure 1](#uiwithannotationpng) as the starting point."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Select the Command Box and type in `edit-i 3 n/CARROTS q/50`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "2. Either press Enter on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. Success Message will be shown in the Result Display and the 3rd item will show up with its updated fields,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "refer to Figure 10."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    ![edit-iexampleonestepthree](images/edit-i_example_one_step_three.png)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 10: Edit Carrot Result"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Example 2: `edit-i 2 n/Spinach t/` using [Figure 1](#uiwithannotationpng) as the starting point."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Select the Command box and type in `edit-i 2 n/Spinach t/`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "2. Either press Enter on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. Success Message will be shown in the Result Display and the 2nd item will show up with its updated "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "fields as shown in Figure 11."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    ![add-i example two step three](images/edit-i_example_two_step_three.png)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 11: Edit Spinach Result"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.4b `edit-d`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Format: `edit-d INDEX [n/NAME | p/PHONE | a/ADDRESS | o/ORDER | by/TIME]`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* `edit-d 1 n/AARON p/91111233` \u003cbr\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Edits the name and phone number of the 1st item to be `AARON` and `91111233` respectively."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "#### 3.1.5 Locating items or delivery by keywords: `find-i` or `find-d`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Finds items or deliveries whose attributes contain any of the given keywords."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.5a `find-i`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Format: `find-i [n/NAME | s/SUPPLIER | t/TAG…​]`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note when finding an item:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* The search is case-insensitive. e.g `chicken` will match `CHICKEN`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* The order of the keywords does not matter. e.g. `Chicken steak` will match `steak Chicken`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* `Name`, `Supplier` and `Tag` can be searched"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* Only full words will be matched e.g. `chicke` will not match `chicken`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* Items matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  e.g. `chicken steak` will return `chicken steak`, `steak beef`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* More than one Prefix can be specified (i.e. `AND` search)."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  e.g. `find-i n/Chicken s/NTUC` will return items matching name and supplier."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* Finding multiple `Tag` needs to be seperated e.g. `find-i t/meat t/perishable`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* `find-i s/ntuc t/meat` using [Figure 1](#uiwithannotationpng) as the starting point."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "1. Select the Command Box and type in `find-i s/ntuc t/meat`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "2. Either press \u0027Enter\u0027 on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. Success Message will be shown in the Result Display, and the number of matches will be shown. Refer to "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Figure 12:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    ![find-command-4](images/find-command-1.PNG)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 12: Find item supplied by NTUC in meat category"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.1.5b `find-d`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Format: `find-d [n/NAME | p/PHONE | a/ADDRESS | o/ORDER]`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note when finding a delivery:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* The search is case-insensitive. e.g `john` will match `JOHN`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* The order of the keywords does not matter. e.g. `John Lim` will match `Lim John`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* `Name`, `Phone`, `Address`, `Order` can be searched"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* Only full words for name will be matched e.g. `Bob` will not match `Bobby`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* Any phone/address/order containing the search string within them will be matched. "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * searching for \"a/Holland V\" will match \"Holland Village\""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * searching for \"p/123\" will match \"12345678\""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* Items matching at least one word in the search query will be returned."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  e.g. `find-d n/Bernice Adam` will return deliveries with names `Bernice Yeo`, `Adam Tan`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* More than one Prefix can be specified (i.e. `AND` search)."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  e.g. `find-d n/Bernice p/85783742` will return delivery matching *both* name and phone."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* `find-d n/alex aileen` using [Figure 1](#uiwithannotationpng) as the starting point."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "1. Select the Command Box and type in `find-d n/alex aileen`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "2. Either press \u0027Enter\u0027 on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. Success Message will be shown in the Result Display, and the number of matches will be shown. Refer to Figure 13:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003ca name\u003d\"findexample1\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![find-command-2](images/find-command-2.PNG)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 13: Find delivery by alex and aileen"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "#### 3.1.6 Listing all items or delivery: `list-i` or `list-d`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "After entering `find-i` or `find-d`, the placeholder in your application will only show the items or deliveries"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "that match your find KEYWORD. If you would like to show **all** the items and deliveries again,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "`list-i` or `list-d` command would be useful."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Format: `list-i` or `list-d`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* `list-i` using the result of [find example](#findexample1) as a starting point."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "1. Select the Command Box and type in `list-i`."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "2. Either press \u0027Enter\u0027 on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "3. Success Message will be shown in the Result Display, refer to Figure 14:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    ![list-command-1](images/list-command-1.PNG)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 14: List inventory items"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "#### 3.1.7 Deleting an item or delivery: `delete-i` or `delete-d`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Deletes an item or delivery from inventory book or delivery book respectively. Delete command is especially useful"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "for delivery as you would often need to delete a pending delivery once it has been delivered."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Format: `delete-i INDEX` or `delete-d INDEX`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note when deleting an item or delivery:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Deletes an item or delivery at the specified `INDEX`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* The index refers to the index number shown in the displayed item/ delivery list."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Example 1:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "1. Assume by entering `list-i`, we have the following inventory items as shown in Figure 15:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![delete-i_step1](images/UG_delete_eg1_step1.PNG)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 15: Before deleting index 2"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "2. Enter `delete-i 2` which will delete the 2nd INDEX in the inventory book. The expected result should be as shown in Figure 16:"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    ![delete-i_step2](images/UG_delete_eg1_step2.PNG)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 16: After deleting index 2"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** \u003cbr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "`delete-d` behaves similarly to `delete-i`, but deletes a delivery instead of an inventory item"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.1.8 Clearing all entries: `clear-i` or `clear-d`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Clears all entries from the Inventory/ Delivery book."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Format: `clear-i` or `clear-d`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.1.9 Undo last command: `undo`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Undoes the previous command by reverting the current data displayed to the state it was in before the last command was executed."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note about `undo`:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* If there is a previous state available, the current state is reverted to that state"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* If the current state is the earliest possible one, it shows a message informing the user that there is nothing more to undo"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* The maximum number of previous commands you can undo is 20"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003ca name\u003d\"undoExample1\"\u003e\u003c/a\u003eExample 1: `undo` using [Figure 1](#uiwithannotationpng) as the starting point."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Select the Command box and type in `clear-i`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "2. Either press Enter on your keyboard or click Send to execute the command."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    ![edit-i example one step three](images/undo-example-one-step-two.PNG)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Figure 17: Clear all items"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003ca name\u003d\"undoExample1Step2\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "3. Select the Command box and type in `undo`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "4. Repeat step 2"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* You should now see the same items as appearing in [Figure 1](#uiwithannotationpng)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.1.10 Redo last command: `redo`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Redoes the last undone command by reverting the current data displayed to the state it was in before the last undo command was executed."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Pointers to take note about `redo`:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* If there is an undone state available, the current state is reverted to that state"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* If the current state is the latest possible one, it shows a message informing the user that there is nothing more to redo"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* After any command that changes the state of data (such as add, clear, delete, edit), the new state becomes the latest state"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "(i.e. the previous undo commands are \"forgotten\" and `redo` will have no effect)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Example 1: `redo` using [Figure 1](#uiwithannotationpng) as the starting point."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. Follow steps 1 - 4 of [Example 1](#undoExample1) for the `undo` command"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "2. Select the Command box and type in `redo`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "3. Either press Enter on your keyboard or click Send to execute the command"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "4. You should now see the items cleared again, as shown in [Step 2 of Example 1](#undoExample1Step2) of the `undo` command."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.1.11 Exiting the program: `exit`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.2 General Features"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.2.1 Saving the data"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf** data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "#### 3.2.2 Scrolling through command history"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf** commands are traversable (up to 20 commands) much like Window\u0027s command prompt. "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "By pressing the arrow up key traversing you\u0027re able to traverse previous commands and "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "by pressing the arrow down key you\u0027re able to traverse into next commands."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.2.3 Sorting"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.2.3a Sorting Inventory Items"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Inventory items are sorted based on percentage of quantity in ascending order."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* If the maximum quantity does not exist for that particular item then the item will be located at the end of the list."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* If 2 items have the same quantity, they are then sorted lexicographically."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "##### 3.2.3b Sorting Pending Deliveries"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* Pending deliveries are sorted based on deliver by timing ie. delivery by."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "### 3.3 Coming Soon"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.3.1 Statistics `[Coming Soon]`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Prints the total amount of delivery and reservation for the day"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.3.2 Scheduling `[Coming Soon]`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Allows user to know when to do restocking"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.3.3 Prices of items `[Coming Soon]`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Look up prices on a \u0027supplier\u0027 database"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 3.3.4 Notification `[Coming Soon]`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Notify the user if a certain stock is below threshold"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer? \u003cbr\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Inventory/ DeliveryBook home folder."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**Q**: I am unable to open up the application by double clicking on oneshelf.jar file, what should I do? \u003cbr\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**A**: If double clicking does not work, you may use the command prompt to open **OneShelf**."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "You may refer to the [video](#installationvideo) of installation guide."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "**Q**: Help! I\u0027ve accidentally typed `clear-i` or `clear-d` and wiped all my data! \u003cbr\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "**A**: Use the [Undo Command](#3110-undo-last-command-undo) to reset your data back."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 5.1 General Commands Summary"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "| Action    | Format, Examples                                                                                    |"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|-----------|-----------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Get help to start off**    | `help start` or press `F1` or use GUI help menu at the top left |"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**Get help summary**    | `help summary` or press `F2` or use GUI help menu at the top left |   "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Undo last command**   | `undo`  |"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Redo last undone command**   | `redo`  |"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**Exit command** | `exit` |"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 5.2 Inventory Summary"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Action    | Format, Examples                                                                                    |"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|-----------|-----------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**Add to Inventory**    | `add-i n/NAME q/QUANTITY [s/SUPPLIER] [max/MAX_QUANTITY] [metric/METRIC] [t/TAG]...​` \u003cbr\u003e e.g., `add n/Chicken q/3 s/ShengSiong t/Poultry` |"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Clear from Inventory**  | `clear-i`            |"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Delete from Inventory** | `delete-i INDEX`\u003cbr\u003e e.g., `delete 3`         |"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Edit Inventory**   | `edit-i INDEX [n/NAME | q/QUANTITY | s/SUPPLIER | max/MAX_QUANTITY | t/TAG…​]` \u003cbr\u003e e.g.,`edit 1 n/Chicken q/50`    |"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Find in Inventory**   | `find-i [n/NAME | s/SUPPLIER | t/TAG…​]` \u003cbr\u003e e.g., `find-i s/ntuc t/meat`     |"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**List Inventory**   | `list-i` |"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**Remove from Inventory** | `remove-i INDEX q/QUANTITY`    |"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "#### 5.3 Delivery Summary"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "| Action    | Format, Examples                                                                                    |"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|-----------|-----------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**Add to Delivery**    | `add-d n/NAME p/PHONE a/ADDRESS o/ORDER [by/TIME]` \u003cbr\u003e e.g `add-d n/Alex Yeoh p/87438807 a/Blk 30 Geylang Street 29, #06-40 o/2x Chicken Rice, 1x Ice Milo by/15` |"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**Clear from Delivery**  | `clear-d`               |"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**Delete from Delivery** | `delete-d INDEX`\u003cbr\u003e e.g., `delete 3`     |"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Edit Delivery**   | `edit-d INDEX [n/NAME | p/PHONE | a/ADDRESS | o/ORDER | by/TIME]` \u003cbr\u003e e.g.,`edit 3 n/AARON p/91111233`   |"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "|**List Delivery**   | `list-d` |"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "|**Find in Delivery**  | `find-d [n/NAME | p/PHONE | a/ADDRESS | o/ORDER]` \u003cbr\u003e e.g., `find-d n/alex aileen`   |"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003ca name\u003d\"6-glossary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## 6. Glossary"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Item**: Restaurant\u0027s inventory item which can be restaurant materials *(i.e fork, spoon, chair)* or ingredients"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "*(i.e milk, cheese)*"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Delivery**: Delivery order that has yet to be delivered out from the restaurant"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Book**: There are 2 types of book, namely: Inventory Book and Delivery Book which stores the data of your "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "inventory items and pending deliveries respectively"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Index**: The number indicated for each particular inventory item or pending delivery in the list."
      }
    ],
    "authorContributionMap": {
      "wengfaing": 19,
      "xnoobftw": 44,
      "Wincenttjoi": 405,
      "-": 115,
      "halcon-blanco": 84,
      "zeranium97": 97
    }
  },
  {
    "path": "docs/diagrams/AddItemActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ":User executes AddItemCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "if () then ([Item exists in InventoryBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    :Adds on quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    : Create new item and stores into InventoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 14
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Participant \":Model\" as inventoryModel MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "logic -[LOGIC_COLOR]\u003e inventoryModel : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "activate inventoryModel MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "inventoryModel -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "deactivate inventoryModel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 5,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/CommandHistoryTraversalSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "box UI UI_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "participant \":TextField\" as TextField UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "box History HISTORY_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "participant \":HistoryManager\" as HistoryManager HISTORY_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "[-\u003e CommandBox : handleHistoryNavigation(event)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "CommandBox -\u003e HistoryManager : previousCommand()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "activate HistoryManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "HistoryManager --\u003e CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "deactivate HistoryManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "CommandBox -\u003e TextField : setText(previousCommand)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "TextField --\u003e CommandBox"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "[\u003c-- CommandBox"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 31
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "if () then ([command commits Models])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    :Purge redundant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    :Save inventoryBook to inventoryBookStateList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     and deliveryBook to DeliveryBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "halcon-blanco": 4
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "participant \":OneShelfBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "participant \":ItemDeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "participant \"command:ItemDeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "box Models MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "participant \":InventoryModel\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "participant \":DeliveryModel\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "[-\u003e LogicManager : execute(\"delete-i 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete-i 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "AddressBookParser --\u003e LogicManager : command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "DeleteCommand -\u003e Model : deleteItem(1)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "DeleteCommand -\u003e ModelManager : commit()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "ModelManager --\u003e DeleteCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 15,
      "xnoobftw": 5,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/DeliveryClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Package Delivery {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Delivery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class DeliveryName"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Order"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class UniqueDeliveryList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "UniqueDeliveryList o--\u003e \"*\" Delivery"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Delivery *--\u003e \"1\" DeliveryName"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Delivery *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Delivery *--\u003e \"1\" Address"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Delivery *--\u003e \"1\" Order"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 21
    }
  },
  {
    "path": "docs/diagrams/EditActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ":User execute Item/Delivery EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Record changes to be made inside EditDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Instantiate new EditCommand with EditDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:execute EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\tif () then ([duplicates found])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "\t:Notify the user with corresponding error message through UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\telse ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Update UI with updated Item/Delivery list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\tendif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Notify the user with corresponding error message through UI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 2,
      "zeranium97": 19
    }
  },
  {
    "path": "docs/diagrams/EditClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class \"{abstract}\\nItemCommand\" as ItemCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class \"{abstract}\\nDeliveryCommand\" as DeliveryCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class DeliveryEditCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class ItemEditCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class EditDeliveryDescriptor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class EditItemDescriptor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemCommand .up.|\u003e Command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryCommand .up|\u003e Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand .up|\u003e ItemCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryEditCommand .up|\u003e DeliveryCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryEditCommand o--\u003e \"1\" EditDeliveryDescriptor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand o--\u003e \"1\" EditItemDescriptor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryEditCommand o--\u003e \"1\" Index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand o--\u003e \"1\" Index"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 26
    }
  },
  {
    "path": "docs/diagrams/FindActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ":User executes a Item/Delivery FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Instantiate a FindCommand with a corresponding predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Execute FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Update UI with filtered Item/Delivery list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\t:Notify the user with corresponding error messages through UI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 18
    }
  },
  {
    "path": "docs/diagrams/HelpActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ":User executes help command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ":The parser parse the help command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "if () then ([else])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    :Show error message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "else ([Start or summary command])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    if () then ([Start command])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        :isShowHelp overridden as true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        :UI MainWindow opens Help Start window;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    else ([Summary command])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        :isShowPreview overridden as true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        :UI MainWindow opens Help Summary window;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 20
    }
  },
  {
    "path": "docs/diagrams/ItemClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Package Item {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Item"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Supplier"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class MaxQuantity"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Metric"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Quantity"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class UniqueItemList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "UniqueItemList o--\u003e \"*\" Item"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Item *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Item *--\u003e \"1\" Quantity"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Item *--\u003e \"0..1\" Supplier"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Item *--\u003e \"0..1\"MaxQuantity"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Item *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Item *--\u003e \"0..1\" Metric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Name -[hidden]right-\u003e Quantity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Quantity -[hidden]right-\u003e Supplier"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Supplier -[hidden]right-\u003e MaxQuantity"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "MaxQuantity -[hidden]right-\u003e Metric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 31
    }
  },
  {
    "path": "docs/diagrams/ItemEditCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":OneShelfBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":ItemEditCommandParser\" as ItemEditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \"editItemDescriptor:EditItemDescriptor\" as EditItemDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \"result:ItemEditCommand\" as ItemEditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "[-\u003e LogicManager : execute(\"edit-i 1 s/NTUC\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"edit-i 1 s/NTUC\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create ItemEditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "AddressBookParser -\u003e ItemEditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemEditCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemEditCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "AddressBookParser -\u003e ItemEditCommandParser : parse(\"s/NTUC\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemEditCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ref over ItemEditCommandParser : tokenize arguements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create EditItemDescriptor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommandParser -\u003e EditItemDescriptor : EditItemDescriptor()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate EditItemDescriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "EditItemDescriptor --\u003e ItemEditCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate EditItemDescriptor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ref over ItemEditCommandParser : retrieve values and store inside editItemDescriptor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create ItemEditCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommandParser -\u003e ItemEditCommand : ItemEditCommand(index, editItemDescriptor)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemEditCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand --\u003e ItemEditCommandParser : result"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemEditCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommandParser --\u003e AddressBookParser : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemEditCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "destroy ItemEditCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "AddressBookParser --\u003e LogicManager : result"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "LogicManager -\u003e ItemEditCommand : execute()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemEditCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand -\u003e Model : retrieve itemToEdit based on index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Model --\u003e ItemEditCommand : itemToEdit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand -\u003e ItemEditCommand : createdEditedItem(itemToEdit, editItemDescriptor)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemEditCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand -\u003e ItemEditCommand : editedItem"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemEditCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand -\u003e Model : setItem(editedItem)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Model --\u003e ItemEditCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "CommandResult --\u003e ItemEditCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemEditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemEditCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 95
    }
  },
  {
    "path": "docs/diagrams/ItemFindCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":OneShelfBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":ItemFindCommandParser\" as ItemFindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \"predicate:SupplierContainsKeywordsPredicate\" as SupplierContainsKeywordsPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \"result:ItemFindCommand\" as ItemFindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "[-\u003e LogicManager : execute(\"find-i s/NTUC\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"find-i s/NTUC\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create ItemFindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "AddressBookParser -\u003e ItemFindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemFindCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemFindCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "AddressBookParser -\u003e ItemFindCommandParser : parse(\"s/NTUC\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemFindCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ref over ItemFindCommandParser : tokenize arguements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create SupplierContainsKeywordsPredicate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommandParser -\u003e SupplierContainsKeywordsPredicate : SupplierContainsKeywordsPredicate(\"NTUC\",s/)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate SupplierContainsKeywordsPredicate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "SupplierContainsKeywordsPredicate --\u003e ItemFindCommandParser : predicate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate SupplierContainsKeywordsPredicate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "SupplierContainsKeywordsPredicate -[hidden]-\u003e ItemFindCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "destroy SupplierContainsKeywordsPredicate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create ItemFindCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommandParser -\u003e ItemFindCommand : ItemFindCommand(predicate)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemFindCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommand --\u003e ItemFindCommandParser : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemFindCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommandParser --\u003e AddressBookParser : result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemFindCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "destroy ItemFindCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "AddressBookParser --\u003e LogicManager : result"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "LogicManager -\u003e ItemFindCommand : execute()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate ItemFindCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommand -\u003e Model : updateItemListFilter(predicate)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Model --\u003e ItemFindCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "CommandResult --\u003e ItemFindCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ItemFindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate ItemFindCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 84
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "skinparam DefaultFontSize 30"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class OneShelfBookParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class ItemXYZCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class DeliveryXYZCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class HelpXYZCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class HelpCommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class \"{abstract}\\nItemCommand\" as ItemCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class \"{abstract}\\nDeliveryCommand\" as DeliveryCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Class \"{abstract}\\nHelpCommand\" as HelpCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "note bottom of XYZCommand: XYZCommand \u003d UndoCommand, \\nRedoCommand etc"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "note bottom of DeliveryXYZCommand: DeliveryXYZCommand \u003d DeliveryAddCommand, \\nDeliveryListCommand etc"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "note bottom of ItemXYZCommand:  ItemXYZCommand \u003d ItemAddCommand, \\nItemListCommand etc"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "note bottom of HelpXYZCommand: HelpXYZCommand \u003d HelpStartCommand, \\nHelpSummaryCommand etc"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "package Model {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "LogicManager --\u003e\"1\" OneShelfBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "OneShelfBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "XYZCommandParser ..\u003e ItemXYZCommand : creates \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "ItemXYZCommand -up-|\u003e ItemCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "ItemCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "XYZCommandParser ..\u003e DeliveryXYZCommand : creates \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "DeliveryXYZCommand -up-|\u003e DeliveryCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "DeliveryCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "XYZCommandParser ..\u003e HelpXYZCommand : creates \u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "HelpXYZCommand -up-|\u003e HelpCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "HelpCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "HelpCommandResult -up-|\u003e CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "LogicManager .....\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Command .right.\u003e CommandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "XYZCommand -[hidden]-\u003e ItemXYZCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 37,
      "-": 55
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface ReadOnlyInventoryBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface ReadOnlyDeliveryBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface Models \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface DeliveryModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface InventoryModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class InventoryBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class DeliveryBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class ReadOnlyInventoryBook"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class ReadOnlyDeliveryBook"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Models"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class ModelManagers"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class DeliveryModelManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class InventoryModelManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class ItemComparator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class UniqueItemList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class UniqueDeliveryList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Item"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class Delivery"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "HiddenOutside ..\u003e Models"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryBook .up.|\u003e ReadOnlyDeliveryBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryBook .up.|\u003e ReadOnlyInventoryBook"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ModelManagers .up.|\u003e Models"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ModelManagers o-down--\u003e \"1\" InventoryModel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "ModelManagers o-down--\u003e \"1\" DeliveryModel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryModelManager .up.|\u003eInventoryModel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryModelManager .up.|\u003eDeliveryModel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryModel .up.|\u003eModel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryModel .up.|\u003eModel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryModel .up.|\u003eObservableList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryModel .up.|\u003eObservableList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryModelManager o-right-\u003e \"1..20\" InventoryBook"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryModelManager o-left-\u003e \"1..20\" DeliveryBook"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryModelManager o-right-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryModel o-right-\u003e \"1\" ItemComparator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryModelManager o--\u003e\"1\" Item : filtered and sorted list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryModelManager o--\u003e\"1\" Delivery : filtered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "InventoryBook o--\u003e \"1\" UniqueItemList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "DeliveryBook o--\u003e \"1\" UniqueDeliveryList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "UniqueDeliveryList o--\u003e \"*\" Delivery"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "UniqueItemList o--\u003e \"*\" Item"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "zeranium97": 44
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface InventoryBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Interface DeliverBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class JsonInventoryBookStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Class JsonDeliveryBookStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "StorageManager o-right-\u003e \"1\" UserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "StorageManager o--\u003e \"1\" DeliverBookStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "StorageManager o--\u003e \"1\" InventoryBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "JsonInventoryBookStorage .left.|\u003e InventoryBookStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "JsonInventoryBookStorage .down.\u003e JsonSerializableInventoryBookStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "JsonSerializableInventoryBookStorage .right.\u003e JsonAdaptedItem"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "JsonAdaptedItem .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "JsonDeliveryBookStorage .up.|\u003e DeliverBookStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "JsonDeliveryBookStorage .down.\u003e JsonSerializableDeliveryBookStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "JsonSerializableDeliveryBookStorage .right.\u003e JsonAdaptedDelivery"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "zeranium97": 15
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Class ItemListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Class ItemCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Class DeliveryListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Class DeliveryCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "MainWindow *-down-\u003e ItemListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "MainWindow *-down-\u003e DeliveryListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "ItemListPanel -down-\u003e ItemCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "DeliveryListPanel -down-\u003e DeliveryCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "ItemListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "ItemCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "DeliveryListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "DeliveryCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "ItemCard ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "DeliveryCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "ItemListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "DeliveryListPanel -[hidden]left- ItemListPanel"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 16,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState1 as \"__ib0:InventoryBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState1 as \"__db0:DeliveryBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState2 as \"__ib1:InventoryBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState2 as \"__db1:DeliveryBook__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState3 as \"__ib2:InventoryBook__\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState3 as \"__db2:DeliveryBook__\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState1 -[hidden]right-\u003e InventoryState2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState2 -[hidden]right-\u003e InventoryState3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "hide InventoryState2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "hide InventoryState3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState1 -[hidden]right-\u003e DeliveryState2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState2 -[hidden]right-\u003e DeliveryState3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "hide DeliveryState2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "hide DeliveryState3"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -up-\u003e InventoryState1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -down-\u003e DeliveryState1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "halcon-blanco": 18
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "title After command \"delete-i 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState1 as \"__ib0:InventoryBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState1 as \"__db0:DeliveryBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState2 as \"__ib1:InventoryBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState2 as \"__db1:DeliveryBook__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState3 as \"__ib2:InventoryBook__\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState3 as \"__db2:DeliveryBook__\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState1 -[hidden]right-\u003e InventoryState2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState2 -[hidden]right-\u003e InventoryState3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "hide InventoryState3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState1 -[hidden]right-\u003e DeliveryState2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState2 -[hidden]right-\u003e DeliveryState3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "hide DeliveryState3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -up-\u003e InventoryState2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -down-\u003e DeliveryState2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "halcon-blanco": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "title After command \"add-d n/David p/12345678 …​\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState1 as \"__ib0:InventoryBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState1 as \"__db0:DeliveryBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState2 as \"__ib1:InventoryBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState2 as \"__db1:DeliveryBook__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState3 as \"__ib2:InventoryBook__\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState3 as \"__db2:DeliveryBook__\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState1 -[hidden]right-\u003e InventoryState2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState2 -[hidden]right-\u003e InventoryState3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState1 -[hidden]right-\u003e DeliveryState2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState2 -[hidden]right-\u003e DeliveryState3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -up-\u003e InventoryState3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -down-\u003e DeliveryState3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "halcon-blanco": 15
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState1 as \"__ib0:InventoryBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState1 as \"__db0:DeliveryBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState2 as \"__ib1:InventoryBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState2 as \"__db1:DeliveryBook__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState3 as \"__ib2:InventoryBook__\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState3 as \"__db2:DeliveryBook__\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState1 -[hidden]right-\u003e InventoryState2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState2 -[hidden]right-\u003e InventoryState3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState1 -[hidden]right-\u003e DeliveryState2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState2 -[hidden]right-\u003e DeliveryState3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -up-\u003e InventoryState2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -down-\u003e DeliveryState2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "halcon-blanco": 14
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "title After command \"list-i\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState1 as \"__ib0:InventoryBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState1 as \"__db0:DeliveryBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState2 as \"__ib1:InventoryBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState2 as \"__db1:DeliveryBook__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState3 as \"__ib2:InventoryBook__\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState3 as \"__db2:DeliveryBook__\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState1 -[hidden]right-\u003e InventoryState2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState2 -[hidden]right-\u003e InventoryState3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState1 -[hidden]right-\u003e DeliveryState2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState2 -[hidden]right-\u003e DeliveryState3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -up-\u003e InventoryState2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -down-\u003e DeliveryState2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "halcon-blanco": 14
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "title After command \"clear-d\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState1 as \"__ib0:InventoryBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState1 as \"__db0:DeliveryBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState2 as \"__ib1:InventoryBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState2 as \"__db1:DeliveryBook__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class InventoryState3 as \"__ib3:InventoryBook__\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryState3 as \"__db3:DeliveryBook__\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState1 -[hidden]right-\u003e InventoryState2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryState2 -[hidden]right-\u003e InventoryState3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState1 -[hidden]right-\u003e DeliveryState2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryState2 -[hidden]right-\u003e DeliveryState3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -up-\u003e InventoryState3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Pointer -down-\u003e DeliveryState3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "halcon-blanco": 14
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "skinparam BoxPadding 8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "participant \":ModelsManager\" as Models MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "participant \":InventoryModelManager\" as InventoryModel MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "participant \":InventoryBook\" as InventoryBook MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "participant \":DeliveryModelManager\" as DeliveryModel MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "participant \":DeliveryBook\" as DeliveryBook MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "LogicManager -\u003e UndoCommand : execute(Models)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "UndoCommand -\u003e Models : undo()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "activate Models"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Models -\u003e InventoryModel : undo()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "activate InventoryModel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryModel -\u003e InventoryBook :resetData(ReadOnlyInventoryBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "activate InventoryBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryBook -\u003e InventoryModel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "deactivate InventoryBook"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "InventoryModel -\u003e Models"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "deactivate InventoryModel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Models -\u003e DeliveryModel : undo()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "activate DeliveryModel"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryModel -\u003e DeliveryBook :resetData(ReadOnlyDeliveryBook)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "activate DeliveryBook"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryBook -\u003e DeliveryModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "deactivate DeliveryBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "DeliveryModel -\u003e Models"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "deactivate DeliveryModel"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Models --\u003e UndoCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "deactivate Models"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "halcon-blanco": 36
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "!define HISTORY_COLOR #00a7a7"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "!define HISTORY_COLOR_T1 #008080"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 3,
      "-": 75
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Participant \":OneShelfBookParser\" as osbp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Participant \":ItemEditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "logic -\u003e osbp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "osbp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "osbp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "ecp -\u003e ec ++: index, editItemDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "ecp --\u003e osbp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "osbp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 8,
      "-": 13
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "title: OneShelf"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-1/tp/branch/master/graph/badge.svg?token\u003dOPy8woNh1e)](https://codecov.io/gh/AY2021S1-CS2103T-T12-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "**OneShelf** is a desktop application for you to manage your restaurant inventories and pending deliveries."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "It is easy to build and customise your inventory items and pending deliveries"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "by using only Command Line Interface. If you are a busy restaurant manager who prefers"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "to use the Command Line Interface and needs to keep track of inventories and deliveries,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " **OneShelf** is definitely for you."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* If you are interested in using OneShelf, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* If you are interested about developing OneShelf, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 6,
      "-": 13,
      "zeranium97": 5
    }
  },
  {
    "path": "docs/team/halcon-blanco.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "title: Saad Haider\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## Project: Inventory Book (OneShelf)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "OneShelf is an app designed as a one-stop platform for restaurant managers to handle their management needs such as having efficient inventory management "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "and up-to-date information on pending deliveries, which translates to savings in man-hours and minimal losses due to over stocking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#search\u003dT12-1\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dhalcon-blanco\u0026tabRepo\u003dAY2021S1-CS2103T-T12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Weekly meetings to decide the direction of the project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Implemented a max quantity field for inventory items**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * What it does: Allows users to set an ideal stock level for each item in the inventory. Updates colours in the GUI to reflect stock level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Justification: Restaurant managers need to be aware which of their stocks are running low and need restocking"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Pull Request [#87](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/87)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Reorganised the layout of the GUI**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * What it does: Reorganised the GUI to split the window into two sections: items and deliveries, with the help messages at the bottom"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Justification: It is a more simplistic layout that focuses on the important things on the window"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Pull Request [#106](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/106)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Implemented the Find command for deliveries**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * What it does: Allows users to search for deliveries with particular fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Justification: Restaurant managers need to be able to quickly find and refer to particular deliveries"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Pull Request [#115](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/115)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Implemented Undo and Redo commands**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * What it does: Allows users to undo any action and redo any undone action"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Justification: Mistakes are often made in the usage of any app"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Pull Requests [#141](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/141), [#147](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/147),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    [#166](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/166)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    * Added documentation for the features `help`, `undo`, `redo`, `edit-i`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        * Issue [\\#50](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/50)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        * Pull Requests [#166](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/166), [#201](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/201), "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "          [#206](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/206)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    * Added Non-Functional Requirements."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        * Pull Requests [#76](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/76), [#166](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/166)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    * Added Use-cases and manual testing for Undo/Redo commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        * Pull Request [#201](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/201)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    * Added implementation details, including UML diagrams, for Undo/Redo commands"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        * Pull Request [#166](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/166)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#88](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/88),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#100](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/100),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#114](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/114),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#123](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/123),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#143](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/143),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#145](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/145),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#168](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/168),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#169](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/169), "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#187](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/187),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#202](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/202),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#205](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/205),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#207](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/207)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/35), [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/31), [3](https://github.com/nus-cs2103-AY2021S1/forum/issues/118))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      Issues [#182](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/182),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#183](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/183),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#184](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/184),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#185](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/185),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#186](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/186),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#187](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/187),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#188](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/188),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      [#189](https://github.com/AY2021S1-CS2103T-T17-3/tp/issues/189))"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 1,
      "halcon-blanco": 75
    }
  },
  {
    "path": "docs/team/wengfaing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "title: Weng Fai\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## Project: Inventory Book (OneShelf)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "OneShelf is an app designed as a one-stop platform for restaurant managers to handle their management needs such as having efficient inventory management "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "and up-to-date information on pending deliveries, which translates to savings in man-hours and minimal losses due to over stocking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dt12\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dwengfaing\u0026tabRepo\u003dAY2021S1-CS2103T-T12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Weekly meetings to decide the direction of the project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Implemented the Remove command for items**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * What it does: Allows the user to remove a specified quantity from an existing item"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Justification: This feature allows users to edit their existing inventory without having to delete and re-add an item."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Pull Request [#71](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/71)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Implemented metric field for inventory items**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * What it does: Allows the user to input a `metric` for each item in the inventory"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Justification: Items in a restaurant\u0027s inventory are usually measured using a particular metric, eg kg or litres."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Pull Request [#100](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/100)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Implemented order in advance feature**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * What it does: Allows the user to input a time for each delivery."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Justification: Deliveries from a restaurant might have variable delivery time based on how busy the restaurant is."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Pull Request [#202](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/202) "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Implemented sorting for Deliveries**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * What it does: Deliveries shown in the GUI will be sorted based on how urgent (time till delivery) they are."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Justification: Deliveries that are either overdue or that should be completed urgently should be more visible, and shown at the top."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Pull Request [#202](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/202) "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Updated GUI for individual Item and Delivery**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * What it does: Added an item\u0027s metric next to its quantity. Added time till delivery at the bottom of each delivery."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Justification: Improve visual clarity for users."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Pull Request [#100](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/100), [#202](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/202)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    * Added documentation for the features `remove`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    * Updated `Features` section"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    * Pull Request [#71](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/71), [#202](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/202) "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    * Updated `Architecture` section"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    * Updated sequence diagram (figure 6)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    * Pull Request [#169](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/169)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "      Issues [#175](https://github.com/AY2021S1-CS2103T-T13-3/tp/issues/175),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "      [#176](https://github.com/AY2021S1-CS2103T-T13-3/tp/issues/176),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "      [#177](https://github.com/AY2021S1-CS2103T-T13-3/tp/issues/177),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "      [#178](https://github.com/AY2021S1-CS2103T-T13-3/tp/issues/178),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "      [#179](https://github.com/AY2021S1-CS2103T-T13-3/tp/issues/179),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "      [#180](https://github.com/AY2021S1-CS2103T-T13-3/tp/issues/180)"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 57,
      "Wincenttjoi": 1,
      "halcon-blanco": 2
    }
  },
  {
    "path": "docs/team/wincenttjoi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "title: Wincent\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## Project: Inventory Book (OneShelf)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "OneShelf is an app designed as a one-stop platform for restaurant managers to handle their management needs such as having efficient inventory management "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "and up-to-date information on pending deliveries, which translates to savings in man-hours and minimal losses due to over stocking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dWincenttjoi\u0026tabRepo\u003dAY2021S1-CS2103T-T12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dfunctional-code~test-code)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Managed releases `v1.1`, `v1.2`, `v1.2b`, `v1.3`, `v1.4` on GitHub"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Added help and preview window**: Help window and summary command window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * What it does: Allows users to have easy reference when they want to start learning OneShelf."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Justification: As OneShelf have a relatively steep learning curve, it is good to have a good guidance at the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  start to ensure that user can get accustomed to the features easily."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * (Pull Request [#80](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/80),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  [#81](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/81), [#90](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/90))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Added dynamic clock**: Allows user to see clock instead of storage on bottom left corner of application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * What it does: Shows users a more useful information (current date time)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Justification: A restaurant manager would be more concerned with current time and date rather than the storage data location."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * (Pull Request [#143](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/143))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Added delivery commands**: Allows user to input commands for delivery, specifically are: `list-d`, `clear-d`, `delete-d` and `edit-d`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * What it does: Allows delivery features to work for users."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Justification: A restaurant manager would want to be able to list, clear, delete and edit deliveries."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * (Pull Request [#99](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/99))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Updated the GUI layout draft 1 (Pull requests [\\#42](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/42),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    [\\#63](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/64/files))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Added unit and integration tests for remove command ([#79](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/79),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    [#109](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/109))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Added delivery model test cases ([#122](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/122))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * General:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Initial Project Readme set up to match our project"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Planned and wireframed UI Mock Up using Figma ([\\#63](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/63))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Updated Ui.png in v1.3"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Added documentation for the features `clear`, `edit`, `help` in v1.1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Updated documentation for the features `clear-i`, `clear-d`, `list-i`, `list-d` in v1.2"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Added numberings, introduction, GUI annotated diagram, quick start installation guide video, FAQ in v1.3"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Updated documentation for `add-i`, `add-d`, `help start` and `help summary`, `delete-i`, `delete-d` in v1.3"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Added/ Updated Installation Guide, How to Use OneShelf, User Interface sections."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Added introduction with target audience, purpose of document and summary of document"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Added Use Cases and Manual Testing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Redesigned UI UML diagram"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Updated Glossary"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Provided description for all components before Diagrams and standardize Figure numbers"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Added description for structures of `Item` and `Delivery`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Added Help Window implementation with description, code snippet and Activity diagram"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    * Restructure DG: Logging, configuration, appendices"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [\\#71](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/71),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [#106](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/106),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [#115](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/115),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [#159](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/159),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [#166](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/166),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [#196](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/194),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [#199](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/199),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [#201](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/201)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Contributed to forum discussions (examples: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/193),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/150),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [3](https://github.com/nus-cs2103-AY2021S1/forum/issues/47#issuecomment-678718187),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [4](https://github.com/nus-cs2103-AY2021S1/forum/issues/86#issuecomment-681816644),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [5](https://github.com/nus-cs2103-AY2021S1/forum/issues/110#issuecomment-683312239),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [6](https://github.com/nus-cs2103-AY2021S1/forum/issues/116#issuecomment-683417502),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [7](https://github.com/nus-cs2103-AY2021S1/forum/issues/278),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [8](https://github.com/nus-cs2103-AY2021S1/forum/issues/328))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [1](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/175),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [2](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/176),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [3](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/177),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [4](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/178),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [5](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/179),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [6](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/180),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [7](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/181),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [8](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/182),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [9](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/183),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [10](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/184),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [11](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/185),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [12](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/186),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [13](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/187),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [14](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/188),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [15](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/189),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [16](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/190),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     [17](https://github.com/AY2021S1-CS2103T-T17-4/tp/issues/191))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Integrated GitHub Actions CI/CD tools for the team"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Integrated a new Github plugin (ZenHub) during meeting to the team"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Set up GitHub Organization and Team Repo"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  * Added Code Coverage badge for the team and integrate with CI for v1.2 iteration"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 108,
      "halcon-blanco": 2
    }
  },
  {
    "path": "docs/team/xnoobftw.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "title: Xing Yu\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## Project: Inventory Book (OneShelf)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "OneShelf is an app designed as a one-stop platform for restaurant managers to handle their management needs such as having efficient inventory management "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "and up-to-date information on pending deliveries, which translates to savings in man-hours and minimal losses due to over stocking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Refactoring Address Book 3**: Refactored Person into Item. (Pull request [\\#37](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/37))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * What it does: Allows CS2103T-T12-1 to start implementing proposed features tailored to our requirements."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Justification: This is an essential first step before any features can be implemented as Person class from AB3 is not suitable for our implementation. Variables such as Address and Email has to be removed. Quantity and Supplier have to be added as well."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Credits: *AB3 from CS2103T [Repo link](https://github.com/nus-cs2103-AY2021S1/tp)*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Added Max Quantity Tests**: Added tests for Max Quantity (Pull request [\\#88](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/88))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Added DeliveryModel**: Added Delivery Model. (Pull request [\\#103](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/103))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * What it does: Acts as the skeleton for delivery class and commands to be implemented by other memebers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Justification: This is an essential first step before any delivery features can be implemented."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Implemented Command History Traversal**: Implemented Command History Traversal (Pull request [\\#125](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/125))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * What it does: Allows user to traverse their command history with arrow up and down button from GUI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Justification: Synergies our fast typist use case."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Added HistoryManager Tests**: Added tests for HistoryManager. (Pull request [\\#125](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/125))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Implemented Sorting to ItemList**: Implemented sorting for Items. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * What it does: Items are sorted based on their % maxQuantity, if maxQuantity doesn\u0027t exist items are flushed to the end of the list. If 2 items have the same quantity, they are sorted lexicographically. (Pull request [\\#145](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/145))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Justification: Sorting helps with inventory management and tracking what items require restocking."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Changed AddCommand to add on to existing items instead of throwing an error. An item is considered the same if they have the same name and supplier. (Pull request [\\#44](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/44))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Fix error message thrown when INDEX provided by user is not correct. From Invalid Command Format to Index Provided is invalid. (Pull request [\\#238](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/238))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added documentation for the features `add` and `find`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added documentation for `HistoryManager`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added subheaders for UG for easier navigation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added FAQ question \"Help! I\u0027ve accidentally typed `clear-i` or `clear-d` and wiped all my data!\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added examples for `add-i` and `add-d`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added Target user profile, value proposition and user stories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added Command History Traversal under implementation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Redesigned LogicClassDiagram.puml"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Redesigned LogicSequenceDiagram.puml"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Redesigned DeleteSequenceDiagram.puml"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Updated Logic API documentation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added AddItemActivityDiagram"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added CommandHistoryTraversalSequenceDiagram"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    * Added \"Adding an item manual test cases\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dxnoobftw\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  [\\#54](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/54) "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  [\\#87](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/87) "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  [\\#141](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/141) "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  [\\#147](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/147) "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  [\\#163](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/163)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  [\\#192](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/192)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  [\\#207](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/207)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  * Reported bugs (such as: [GUI bug](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/47))"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 65,
      "Wincenttjoi": 1,
      "halcon-blanco": 2
    }
  },
  {
    "path": "docs/team/zeranium97.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "title: Bobby Law\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "## Project: Inventory Book (OneShelf)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "OneShelf is an app designed as a one-stop platform for restaurant managers to handle their management needs such as having efficient inventory management "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "and up-to-date information on pending deliveries, which translates to savings in man-hours and minimal losses due to over stocking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Refactoring AddressBook to InventoryBook** Refactored AddressBook to InventoryBook (Pull Request [\\#53](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/53))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * What it does: Allows readability to suit our application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Justification: To allow our application to make more sense with class names and method names."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Credits: *AB3 from CS2103T [Repo link](https://github.com/nus-cs2103-AY2021S1/tp)*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Added Storage for Deliveries** Added Storage (Pull Request [\\#107](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/107))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * What it does: Convert a delivery into json and to be stored locally."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Justification: Allows the user to be able to save their deliveries."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Added Delivery Add Command** Allows user to input `add-d` command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * What it does: Allows the adding of pending deliveries into OneShelf."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Justification: A restaurant manager would want to be able add their pending deliveries."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * (Pull Request [#140](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/140))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dzeranium97\u0026tabRepo\u003dAY2021S1-CS2103T-T12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dfunctional-code~test-code)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Remove Supplier as a mandatory field. It will display \"NO SUPPLIER\" if input is empty. (Pull Request [\\#43](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/43))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Twerk test\u0027s data and method to suit our program (Pull Request [\\#52](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/52))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Modify `find` to support finding based on different data fields (Pull Request [\\#86](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/86))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Further enhance `find` to search a combination of fields (Pull Request [\\#171](https://github.com/AY2021S1-CS2103T-T12-1/tp/pull/86))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * Added documentation for the features `delete` and `Coming Soon`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * Updated documentation for `find` feature."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * Added Use Cases."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * Updated Model section and UML Diagram."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * Updated Storage section and UML Diagram."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * Added `find` implementation including an activity diagram and sequence diagram."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    * Added `edit` implementation including a class, activity and sequence diagram."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Community**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "   * Reported bugs (such as: [Unhandled Exceptions](https://github.com/AY2021S1-CS2103T-T12-1/tp/issues/78)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  * Update site-wide settings using Jekyll"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 1,
      "halcon-blanco": 2,
      "zeranium97": 51
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.ItemModelodel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Changes the remark of an existing item in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public CommandResult execute(Model inventoryModel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the item identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + \"by the index number used in the last item listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public CommandResult execute(Model inventoryModel) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param index of the item in the filtered item list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param remark of the item to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public CommandResult execute(Model inventoryModel) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "## Add `Remark` to the inventoryModel"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of item data. We achieve that by working with the `Person` inventoryModel. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the item’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a item."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Create a new `Remark` in `seedu.address.inventoryModel.item`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each item."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "Simply add the following to [`seedu.address.ui.ItemCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public PersonCard(Person item, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    remark.setText(item.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public CommandResult execute(Model inventoryModel) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d inventoryModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Person itemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Person editedItem \u003d new Person(itemToEdit.getName(), itemToEdit.getPhone(), itemToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                itemToEdit.getAddress(), remark, itemToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.setPerson(itemToEdit, editedItem);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedItem));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code itemToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private String generateSuccessMessage(Person itemToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return String.format(message, itemToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 27,
      "-": 367
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` inventoryModel to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.inventoryModel.item.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  \"items\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 3,
      "-": 100
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        commandResult \u003d command.execute(inventoryModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            //We can deduce that the previous line of code modifies inventoryModel in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            storage.saveAddressBook(inventoryModel.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "   public CommandResult execute(Model inventoryModel) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       Person itemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       Person editedItem \u003d createEditedPerson(itemToEdit, editItemDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       if (!itemToEdit.isSamePerson(editedItem) \u0026\u0026 inventoryModel.hasPerson(editedItem)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       inventoryModel.setPerson(itemToEdit, editedItem);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       inventoryModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `inventoryModel`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "       items.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 12,
      "-": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.delivery.DeliveryBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.delivery.JsonDeliveryBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.item.InventoryBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.item.JsonInventoryBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    protected InventoryModel inventoryModel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    protected DeliveryModel deliveryModel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing OneShelf ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        InventoryBookStorage inventoryBookStorage \u003d new JsonInventoryBookStorage(userPrefs.getInventoryBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryBookStorage deliveryBookStorage \u003d new JsonDeliveryBookStorage(userPrefs.getDeliveryBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        storage \u003d new StorageManager(inventoryBookStorage, deliveryBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel \u003d initInventoryModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel \u003d initDeliveryModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        logic \u003d new LogicManager(inventoryModel, deliveryModel, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns a {@code InventoryModelManager}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * with the data from {@code storage}\u0027s inventory book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * The data from the sample inventory book will be used instead if {@code storage}\u0027s inventory book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * or an empty inventory book will be used instead if errors occur when reading {@code storage}\u0027s inventory book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel initInventoryModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Optional\u003cReadOnlyInventoryBook\u003e inventoryBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        ReadOnlyInventoryBook initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            inventoryBookOptional \u003d storage.readInventoryBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            if (!inventoryBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample InventoryBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            initialData \u003d inventoryBookOptional.orElseGet(SampleDataUtil::getSampleInventoryBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty InventoryBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            initialData \u003d new InventoryBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InventoryBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            initialData \u003d new InventoryBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        logger.info(\"Initializing Inventory Book...\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new InventoryModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns a {@code DeliveryModel} with the data from {@code storage}\u0027s delivery book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The data from the sample delivery book will be used instead if {@code storage}\u0027s delivery book is not found,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * or an empty delivery book will be used instead if errors occur when reading {@code storage}\u0027s delivery book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel initDeliveryModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cReadOnlyDeliveryBook\u003e deliveryBookOptional;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ReadOnlyDeliveryBook initialData;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            deliveryBookOptional \u003d storage.readDeliveryBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            if (!deliveryBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample DeliveryBook\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            initialData \u003d deliveryBookOptional.orElseGet(SampleDataUtil::getSampleDeliveryBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty DeliveryBook\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            initialData \u003d new DeliveryBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DeliveryBook\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            initialData \u003d new DeliveryBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        logger.info(\"Initializing Delivery Book...\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new DeliveryModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InventoryBook\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        logger.info(\"Starting OneShelf \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping OneShelf ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            storage.saveUserPrefs(inventoryModel.getUserPrefs());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 39,
      "Wincenttjoi": 3,
      "-": 152,
      "halcon-blanco": 2,
      "zeranium97": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1080;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String LOG_FILE \u003d \"inventorybook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The item index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERY_DISPLAYED_INDEX \u003d \"The delivery index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_UNDO_LIMIT_REACHED \u003d \"No more commands to undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_REDO_LIMIT_REACHED \u003d \"No more commands to redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_ITEMS_LISTED_OVERVIEW \u003d \"%1$d items listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_DELIVERIES_LISTED_OVERVIEW \u003d \"%1$d deliveries listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_EARLY_TEST_FAILURE \u003d \"Test should not have failed at this point!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_HELP_ON_START \u003d \"Press F1 to view the user guide,\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            + \"Press F2 to get started with some commands!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String HELP_START \u003d getHelpStart();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String HELP_SUMMARY \u003d getHelpSummary();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String DIVIDER \u003d \"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String getHelpStart() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        StringBuilder summary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        summary.append(\"Getting Started\\n\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Welcome to OneShelf!\\nYou have summoned me - your trusty Assistant, probably because you are \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"lost and do not know where to start.\\nBut don\u0027t worry, because that is the whole point of \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"my existence!\\n\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"In this quest, we will go through feature by feature, so follow along with me!\\n\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"You should notice that the interface is divided into 2 main categories. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"The left part of the application is \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"dedicated for inventory items slot whereas the right part is dedicated for \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"storing pending deliveries.\\n\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"First, enter `clear-i` and `clear-d` to ensure that you do not have any existing \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"pre-downloaded data. \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"These commands are used to clear inventory items and pending deliveries respectively\\n\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"If there were existing items or deliveries beforehand, they should be cleared by now. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"If there were no pre-existing data, \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"fret not! Your trusty Assistant will guide you how to add an inventory item and pending \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"delivery in the next step \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"of this journey. \\n\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"To add an Inventory Item, use the following command\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"`add-i n/NAME q/QUANTITY [s/SUPPLIER] [max/MAX_QUANTITY] [metric/METRIC] [t/TAG]`\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"The bracket connotation means that the attribute is optional. You will still be able \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"to add an item without supplier\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"or maximum quantity. Take note that for tags, you will be able to add in multiple tags \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"to an inventory item.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Example: `add-i n/CHICKEN q/50 s/NTUC t/meat` would mean that you want to add an \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"inventory item of name CHICKEN\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"of quantity 50 that was bought from NTUC store and tagged with meat category. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"If you want to add a metric of KG\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"to the quantity, you can press KEY ARROW UP, and add metric/KG to it or whichever \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"metric you deem suitable.\\n\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Once you have added the metric, you should see that the item has a metric \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"attribute attached to it.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"We are done with adding an inventory item! \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Adding a pending delivery is very similar to this,\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"with just a slight difference in the command. You can enter the following \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"command to add a delivery:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"`add-d n/NAME p/PHONE a/ADDRESS o/ORDER [by/TIME]`\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Example: `add-d n/DAMITH p/91231231 a/Jln Burong no 92 o/Mee Rebus by/15`\\n\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"GREAT JOB! Seems like you are getting the hang of it. If you have not seen the \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"effect of clear-i and clear-d\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"now is the time to do it! Afterwards, you may add the item and delivery above \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"again just by scrolling up\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"with the KEY ARROW UP button.\\n\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"If you want to decrease the quantity of an inventory item, you can use \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"`remove-i INDEX q/QUANTITY`\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Example: `remove-i 1 30` would remove the quantity of item on first index by 30.\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Note that remove command is only available for inventory item as \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"pending delivery does not have quantity.\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"You may add a few more unique inventory items and pending deliveries if you would to do so.\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"In the next step, we will learn about delete-i and delete-d\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Command for deleting an item is by using `delete-i INDEX`. An example would be like:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"`delete-i 1`\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"After entering the following command, you should notice that the item at \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"index 1 in the inventory book has\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"now been deleted. To delete pending delivery, the difference in the \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"command is by using `delete-d` instead\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"of delete-i. Try it!\\n\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"You may now realize that it is very dangerous to delete an item as you \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"may have mistaken or input the INDEX\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"wrongly. Do not worry, as we have the `undo` command! If you were to \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"try it now, you should notice that\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"the deleted item or delivery should be back in your book again. On \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"the side note, there is a `redo` feature!\\n\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"In case where your inventory and delivery book has grown larger in the \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"future, you can find a particular\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"item or delivery if you need to by using the command:\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"`[n/NAME | s/SUPPLIER | t/TAG]`.\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Example: `find-i n/Chicken` returns any items containing the name \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"chicken in inventory book.\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"You may also put multiple keywords if you would like search a few items concurrently.\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"Example: `find-d n/AARON p/91231231` returns any delivery that has name AARON and anyone\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"who has the phone number 91231231.\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"After entering the find feature, you can revert back to the entire list \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"by entering `list-i` or `list-d`.\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"CONGRATULATIONS! You have completed OneShelf\u0027s tutorial! If you would \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"want to find out more about OneShelf,\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"feel free to check out the user guide\u0027s link stated above!\\n\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"To close this window, press ALT + F4\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return summary.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String getHelpSummary() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        StringBuilder summary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        summary.append(\"Command Summary\\n\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"GENERAL COMMANDS\\n\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Open up help options: help summary OR help start\\n\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"Undo previous command: undo\\n\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"Redo undone command: redo\\n\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Exit application: exit\\n\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"INVENTORY SPECIFIC COMMANDS\\n\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Add inventory: add-i n/NAME q/QUANTITY [s/SUPPLIER] [max/MAX_QUANTITY] [t/TAG] \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"[metric/METRIC]\\n\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"Delete an inventory item: delete-i INDEX\\n\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"Edit an inventory item: edit-i INDEX [n/NAME] [q/QUANTITY]\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \" [s/SUPPLIER] [max/MAX_QUANTITY] [t/TAG] [metric/METRIC]\\n\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Find an inventory item: find-i [n/NAME | s/SUPPLIER | \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + \"t/TAG] [metric/METRIC]\\n\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"Clear all inventory items: clear-i\\n\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"List all inventory items: list-i\\n\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"DELIVERY SPECIFIC COMMANDS\\n\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Add delivery: add-d n/NAME p/PHONE a/ADDRESS o/ORDER by/TIME\\n\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"Delete a delivery: delete-d INDEX\\n\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Edit a delivery: edit-d INDEX [n/NAME] [p/PHONE] [a/ADDRESS] [o/ORDER] [by/TIME]\\n\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"Find a delivery: find-d [n/NAME | p/PHONE | a/ADDRESS | o/ORDER]\\n\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .append(\"Clear all deliveries: clear-d\\n\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"List all deliveries: list-d\\n\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .append(\"To close this window, press ALT + F4\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return summary.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 3,
      "Wincenttjoi": 121,
      "-": 11,
      "halcon-blanco": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code test}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param test cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static boolean containsStringIgnoreCase(String sentence, String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String preppedWord \u003d test.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return sentence.toLowerCase().contains(preppedWord.toLowerCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if {@code s} represents an integer"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param s String to test if integer"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return true if s is an integer, false otherwise"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (s \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            int i \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 17,
      "-": 68,
      "halcon-blanco": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public interface History {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Adds input to history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Removes oldest history when there is an overflow."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param command input for adding to history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void addToHistory(String command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Provides previous command, if any."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Decreases the currentCommandIndex by 1."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return an Optional of the previous command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Optional\u003cString\u003e previousCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Provides next command, if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Increments the currentCommandIndex by 1."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return an Optional of the next command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Optional\u003cString\u003e nextCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Provides current command, if any."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return an Optional of the current command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Optional\u003cString\u003e currentCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/history/HistoryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.history.exception.HistoryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class HistoryManager implements History {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String MESSAGE_LENGTH_LIMIT_AT_LEAST_ONE \u003d \"Length of Command History must be at least be 1\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private List\u003cString\u003e commandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private int currentCommandIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final int lengthLimit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // boolean value to be checked during previousCommand() method call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // if (hasReturnedCurrentCommandBefore) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //      return previousCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //      return currentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // this is to prevent the first previousCommand() method call to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // return commandHistory\u0027s 2nd last command instead of the last command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // will be set true after initial call of previousCommand()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // will be reset to false if (newCommandsAdded || nextCommand() -\u003e Optional.empty())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean hasReturnedCurrentCommandBefore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Constructor for HistoryManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param lengthLimit length limit of command history. Must be strictly more than 0."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @throws HistoryException if lengthLimit is less than or equals to 0."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public HistoryManager(int lengthLimit) throws HistoryException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (lengthLimit \u003e 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.commandHistory \u003d new ArrayList\u003c\u003e(lengthLimit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            // length limit is one-indexed similar to commandHistory.size()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.lengthLimit \u003d lengthLimit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            // since commandHistory is zero-indexed, initializing currentCommandIndex to -1 solves the zero-index issue"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.currentCommandIndex \u003d -1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.hasReturnedCurrentCommandBefore \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new HistoryException(MESSAGE_LENGTH_LIMIT_AT_LEAST_ONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int getCurrentCommandIndex() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return currentCommandIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int getLengthLimit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return lengthLimit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public List\u003cString\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean isLimitReached() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return commandHistory.size() \u003d\u003d lengthLimit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean isWithinLengthLimit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return currentCommandIndex \u003e\u003d 0 \u0026\u0026 currentCommandIndex \u003c lengthLimit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean isAbleToReturnNextCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return hasNextCommand() \u0026\u0026 isWithinLengthLimit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean isAbleToReturnPreviousCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return currentCommandIndex \u003e 0 \u0026\u0026 isWithinLengthLimit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean isCurrentCommandIndexZero() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return currentCommandIndex \u003d\u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean hasNextCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return currentCommandIndex \u003c commandHistory.size() - 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addToHistory(String command) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        hasReturnedCurrentCommandBefore \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (isLimitReached()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.commandHistory.remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.commandHistory.add(command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.currentCommandIndex \u003d commandHistory.size() - 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Optional\u003cString\u003e previousCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!hasReturnedCurrentCommandBefore) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            hasReturnedCurrentCommandBefore \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return currentCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else if (isAbleToReturnPreviousCommand()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            currentCommandIndex--;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.of(commandHistory.get(currentCommandIndex));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else if (isCurrentCommandIndexZero()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.of(commandHistory.get(currentCommandIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Optional\u003cString\u003e nextCommand() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (isAbleToReturnNextCommand()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            currentCommandIndex++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.of(commandHistory.get(currentCommandIndex));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            hasReturnedCurrentCommandBefore \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Optional\u003cString\u003e currentCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (isWithinLengthLimit()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.of(commandHistory.get(currentCommandIndex));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Objects.hash(commandHistory, currentCommandIndex, lengthLimit);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if both command history have the same commandHistory, currentCommandIndex and length limit."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else if (o instanceof HistoryManager) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            HistoryManager c \u003d (HistoryManager) o;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return c.getCommandHistory().equals(this.commandHistory)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                    \u0026\u0026 c.getCurrentCommandIndex() \u003d\u003d this.currentCommandIndex"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                    \u0026\u0026 c.getLengthLimit() \u003d\u003d this.lengthLimit;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return commandHistory.toString()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + \" || Length Limit: \" + lengthLimit"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + \" || Current Index: \" + currentCommandIndex;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 159,
      "halcon-blanco": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/history/exception/HistoryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.history.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class HistoryException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public HistoryException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns the InventoryBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see InventoryModel#getInventoryBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    ReadOnlyInventoryBook getInventoryBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of items */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredAndSortedItemList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns the user prefs\u0027 inventory book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Path getInventoryBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the DeliveryBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see DeliveryModel#getDeliveryBook()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    ReadOnlyDeliveryBook getDeliveryBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * returns an unmodifiable view of the filtered list of deliveries"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    ObservableList\u003cDelivery\u003e getFilteredAndSortedDeliveryList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the user prefs\u0027 delivery book file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Path getDeliveryBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 1,
      "xnoobftw": 24,
      "Wincenttjoi": 1,
      "-": 41,
      "zeranium97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.OneShelfBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private final Models models;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final InventoryModel inventoryModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final DeliveryModel deliveryModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final OneShelfBookParser oneShelfBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public LogicManager(InventoryModel inventoryModel, DeliveryModel deliveryModel, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assert inventoryModel !\u003d null \u0026\u0026 deliveryModel !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.inventoryModel \u003d inventoryModel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.deliveryModel \u003d deliveryModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models \u003d new ModelsManager(inventoryModel, deliveryModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        oneShelfBookParser \u003d new OneShelfBookParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Command command \u003d oneShelfBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        commandResult \u003d command.execute(models);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            storage.saveInventoryBook(inventoryModel.getInventoryBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            storage.saveDeliveryBook(deliveryModel.getDeliveryBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public ReadOnlyInventoryBook getInventoryBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return inventoryModel.getInventoryBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredAndSortedItemList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return inventoryModel.getFilteredAndSortedItemList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path getInventoryBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return inventoryModel.getInventoryBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ReadOnlyDeliveryBook getDeliveryBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveryModel.getDeliveryBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public ObservableList\u003cDelivery\u003e getFilteredAndSortedDeliveryList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return deliveryModel.getFilteredAndSortedDeliveryList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Path getDeliveryBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveryModel.getDeliveryBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return inventoryModel.getGuiSettings();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "xnoobftw": 23,
      "Wincenttjoi": 5,
      "-": 68,
      "halcon-blanco": 7,
      "zeranium97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Represents command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param models The {@code Models} which contains each {@code Model} the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public abstract CommandResult execute(Models models) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 2,
      "-": 15,
      "halcon-blanco": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Inventory Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 2,
      "-": 15,
      "halcon-blanco": 2,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_REDO_ACKNOWLEDGEMENT \u003d \"Redone command\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String message \u003d MESSAGE_REDO_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            models.redo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_UNDO_ACKNOWLEDGEMENT \u003d \"Reverted to previous state\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String message \u003d MESSAGE_UNDO_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            models.undo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverycommand/DeliveryAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Adds a delivery to the delivery book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class DeliveryAddCommand extends DeliveryCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a delivery to the delivery book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + PREFIX_ORDER + \"ORDER \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_NAME + \"Alex Yeoh \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_PHONE + \"87438807 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_ADDRESS + \"Blk 30 Geylang Street 29, #06-40 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_ORDER + \"2x Chicken Rice, 1x Ice Milo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New delivery added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERY \u003d \"This delivery already existed in the delivery book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final Delivery toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Creates an DeliveryAddCommand to add the specified {@code Delivery}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public DeliveryAddCommand(Delivery item) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        toAdd \u003d item;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getDeliveryModel());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel \u003d models.getDeliveryModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        deliveryModel.addDelivery(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof DeliveryAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((DeliveryAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 4,
      "Wincenttjoi": 1,
      "halcon-blanco": 5,
      "zeranium97": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverycommand/DeliveryClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Clears the delivery book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryClearCommand extends DeliveryCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Delivery book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getDeliveryModel());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel \u003d models.getDeliveryModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        deliveryModel.setDeliveryBook(new DeliveryBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 22,
      "halcon-blanco": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverycommand/DeliveryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Parent class of all delivery commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public abstract class DeliveryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 3,
      "halcon-blanco": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverycommand/DeliveryDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Deletes a delivery identified using it\u0027s displayed index from the delivery book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryDeleteCommand extends DeliveryCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \": Deletes delivery identified by the index number used in the displayed delivery list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted Delivery: \\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public CommandResult execute(Models models) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        requireNonNull(models.getDeliveryModel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel deliveryModel \u003d models.getDeliveryModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        List\u003cDelivery\u003e lastShownList \u003d deliveryModel.getFilteredAndSortedDeliveryList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() || targetIndex.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery deliveryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        deliveryModel.deleteDelivery(deliveryToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, deliveryToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                || (other instanceof DeliveryDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeliveryDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 1,
      "xnoobftw": 2,
      "Wincenttjoi": 54,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverycommand/DeliveryEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Edits the details of an existing delivery in the delivery book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryEditCommand extends DeliveryCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-d\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the delivery identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"by the index number used in the displayed delivery list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"ITEM_NAME | \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_PHONE + \"PHONE | \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS | \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_ORDER + \"ORDER | \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_TIME + \"TIME]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + PREFIX_PHONE + \"91111111 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Delivery: \\n%1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final EditDeliveryDescriptor editDeliveryDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param index of the item in the filtered item list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param editDeliveryDescriptor details to edit the item with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryEditCommand(Index index, EditDeliveryDescriptor editDeliveryDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        requireNonNull(editDeliveryDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.editDeliveryDescriptor \u003d new EditDeliveryDescriptor(editDeliveryDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public CommandResult execute(Models models) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        requireNonNull(models.getDeliveryModel());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel deliveryModel \u003d models.getDeliveryModel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        List\u003cDelivery\u003e lastShownList \u003d deliveryModel.getFilteredAndSortedDeliveryList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size() || index.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery deliveryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery editedDelivery \u003d createEditedDelivery(deliveryToEdit, editDeliveryDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        deliveryModel.setDelivery(deliveryToEdit, editedDelivery);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        deliveryModel.updateFilteredDeliveryList(DeliveryModel.PREDICATE_SHOW_ALL_DELIVERIES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedDelivery));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Creates and returns a {@code Delivery} with the details of {@code deliveryToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * edited with {@code editDeliveryDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static Delivery createEditedDelivery(Delivery deliveryToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                                                 EditDeliveryDescriptor editDeliveryDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert deliveryToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryName updatedName \u003d editDeliveryDescriptor.getDeliveryName().orElse(deliveryToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Phone updatedPhone \u003d editDeliveryDescriptor.getPhone().orElse(deliveryToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Address updatedAddress \u003d editDeliveryDescriptor.getAddress().orElse(deliveryToEdit.getAddress());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Order updatedOrder \u003d editDeliveryDescriptor.getOrder().orElse(deliveryToEdit.getOrder());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Time updatedTime \u003d editDeliveryDescriptor.getTime().orElse(deliveryToEdit.getTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Delivery(updatedName, updatedPhone, updatedAddress, updatedOrder, updatedTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (!(other instanceof DeliveryEditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand e \u003d (DeliveryEditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u0026\u0026 editDeliveryDescriptor.equals(e.editDeliveryDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Stores the details to edit the delivery with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * corresponding field value of the delivery."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static class EditDeliveryDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        private DeliveryName deliveryName;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        private Order order;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public EditDeliveryDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "         * A defensive copy of {@code order} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public EditDeliveryDescriptor(EditDeliveryDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            setDeliveryName(toCopy.deliveryName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            setOrder(toCopy.order);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return CollectionUtil.isAnyNonNull(deliveryName, phone, address, order, time);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public void setDeliveryName(DeliveryName deliveryName) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            this.deliveryName \u003d deliveryName;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public Optional\u003cDeliveryName\u003e getDeliveryName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return Optional.ofNullable(deliveryName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public void setOrder(Order order) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            this.order \u003d order;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public Optional\u003cOrder\u003e getOrder() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return Optional.ofNullable(order);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            if (!(other instanceof EditDeliveryDescriptor)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            EditDeliveryDescriptor e \u003d (EditDeliveryDescriptor) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return getDeliveryName().equals(e.getDeliveryName())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    \u0026\u0026 getOrder().equals(e.getOrder());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 16,
      "xnoobftw": 2,
      "Wincenttjoi": 189,
      "zeranium97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverycommand/DeliveryFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Finds and lists all items in delivery book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DeliveryFindCommand extends DeliveryCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all deliveries whose names contain any of \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME | \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_PHONE + \"PHONE | \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS | \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_ORDER + \"ORDER]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Sally p/84738594\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final Predicate\u003cDelivery\u003e predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public DeliveryFindCommand(Predicate\u003cDelivery\u003e predicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getDeliveryModel());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel \u003d models.getDeliveryModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel.updateFilteredDeliveryList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                String.format(Messages.MESSAGE_DELIVERIES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                        deliveryModel.getFilteredAndSortedDeliveryList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                || (other instanceof DeliveryFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u0026\u0026 predicate.equals(((DeliveryFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 1,
      "Wincenttjoi": 1,
      "halcon-blanco": 40,
      "zeranium97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverycommand/DeliveryListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.model.deliverymodel.DeliveryModel.PREDICATE_SHOW_ALL_DELIVERIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Lists all items in the delivery book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryListCommand extends DeliveryCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all deliveries\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getDeliveryModel());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.getDeliveryModel().updateFilteredDeliveryList(PREDICATE_SHOW_ALL_DELIVERIES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 20,
      "halcon-blanco": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/UndoRedoLimitReachedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Represents an error which occurs during execution of an {@link UndoCommand} or {@link RedoCommand}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * when there are no more commands left to undo or redo."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class UndoRedoLimitReachedException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public UndoRedoLimitReachedException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Constructs a new {@code UndoRedoLimitReachedException}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public UndoRedoLimitReachedException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/help/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Format help instructions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public abstract class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String COMMAND_OPTION_SUMMARY \u003d \"summary\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String COMMAND_OPTION_START \u003d \"start\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" OPTION\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"1. \" + COMMAND_WORD + \" \" + COMMAND_OPTION_SUMMARY + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + \"2. \" + COMMAND_WORD + \" \" + COMMAND_OPTION_START;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_INVALID_OPTION \u003d \"The help option is invalid! \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help pop-up window.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/help/HelpStartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_START;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Format instructions for getting started."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class HelpStartCommand extends HelpCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Opens a pop-up window with instructions for user on how to get started."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param models {@code DeliveryModel} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @return {@code CommandResult} that describes changes made when command execute runs successfully."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new HelpCommandResult(SHOWING_HELP_MESSAGE, true, false, false, \"\", HELP_START);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 21,
      "halcon-blanco": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/help/HelpSummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_SUMMARY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Formats full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class HelpSummaryCommand extends HelpCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Opens a pop-up window with the summary of all available commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param models {@code DeliveryModel} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @return {@code CommandResult} that describes changes made when command execute runs successfully."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new HelpCommandResult(SHOWING_HELP_MESSAGE, false, true, false, \"\", HELP_SUMMARY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 19,
      "halcon-blanco": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_METRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Adds a item to the inventory book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemAddCommand extends ItemCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-i\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a item to the inventory book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            + \"[\" + PREFIX_SUPPLIER + \"SUPPLIER] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + PREFIX_NAME + \"Chicken \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + PREFIX_QUANTITY + \"12 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + PREFIX_SUPPLIER + \"NTUC \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            + PREFIX_TAG + \"meat \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + PREFIX_MAX_QUANTITY + \"50 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + PREFIX_METRIC + \"kg \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New item added: \\n%1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_ITEM_ADDED_TO_INVENTORY \u003d \"Item added to inventory. Stock is now: \\n%1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_CHANGE_MAX_ON_EXISTING_ITEM \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            \"You cannot change the max quantity when adding to existing items.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_CHANGE_METRIC_ON_EXISTING_ITEM \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"You cannot change the metric when adding to existing items.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final Item toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Creates an ItemAddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemAddCommand(Item item) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        toAdd \u003d item;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getInventoryModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel \u003d models.getInventoryModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (inventoryModel.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (toAdd.getMaxQuantity().isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                throw new CommandException(MESSAGE_CHANGE_MAX_ON_EXISTING_ITEM);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (toAdd.getMetric().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                throw new CommandException(MESSAGE_CHANGE_METRIC_ON_EXISTING_ITEM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (inventoryModel.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Item toReplace \u003d inventoryModel.addOnExistingItem(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            commandResult \u003d new CommandResult(String.format(MESSAGE_ITEM_ADDED_TO_INVENTORY, toReplace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryModel.addItem(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                || (other instanceof ItemAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ItemAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 3,
      "xnoobftw": 12,
      "halcon-blanco": 38,
      "-": 29,
      "zeranium97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Clears the inventory book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemClearCommand extends ItemCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-i\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Inventory book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getInventoryModel());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel \u003d models.getInventoryModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel.setInventoryBook(new InventoryBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Parent class of all item commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public abstract class ItemCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 3,
      "halcon-blanco": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Deletes a item identified using it\u0027s displayed index from the inventory book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemDeleteCommand extends ItemCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-i\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted Item: \\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getInventoryModel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel \u003d models.getInventoryModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e lastShownList \u003d inventoryModel.getFilteredAndSortedItemList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() || targetIndex.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item itemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                || (other instanceof ItemDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ItemDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 9,
      "Wincenttjoi": 1,
      "halcon-blanco": 14,
      "-": 32,
      "zeranium97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_METRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.model.inventorymodel.InventoryModel.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Edits the details of an existing item in the inventory book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemEditCommand extends ItemCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-i\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + \"by the index number used in the displayed item list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"ITEM_NAME | \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY | \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_SUPPLIER + \"SUPPLIER | \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_TAG + \"TAG |\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_MAX_QUANTITY + \"MAX_QUANTITY | \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_METRIC + \"METRIC]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            + PREFIX_QUANTITY + \"21 \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Item: \\n%1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the inventory book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final EditItemDescriptor editItemDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param index of the item in the filtered item list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param editItemDescriptor details to edit the item with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemEditCommand(Index index, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(editItemDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getInventoryModel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel \u003d models.getInventoryModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e lastShownList \u003d inventoryModel.getFilteredAndSortedItemList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size() || index.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item itemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedItem \u003d createEditedItem(itemToEdit, editItemDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!itemToEdit.isSameItem(editedItem) \u0026\u0026 inventoryModel.hasItem(editedItem)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.setItem(itemToEdit, editedItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.updateItemListFilter(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Creates and returns a {@code Item} with the details of {@code itemToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * edited with {@code editItemDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static Item createEditedItem(Item itemToEdit, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Name updatedName \u003d editItemDescriptor.getName().orElse(itemToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Quantity updatedQuantity \u003d editItemDescriptor.getQuantity().orElse(itemToEdit.getQuantity());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Supplier updatedSupplier \u003d editItemDescriptor.getSupplier().orElse(itemToEdit.getSupplier());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editItemDescriptor.getTags().orElse(itemToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Quantity updatedMaxQuantity \u003d editItemDescriptor.getMaxQuantity()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .or(() -\u003e itemToEdit.getMaxQuantity())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Metric metric \u003d editItemDescriptor.getMetric()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .or(() -\u003e itemToEdit.getMetric())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Item(updatedName, updatedQuantity, updatedSupplier, updatedTags, updatedMaxQuantity, metric);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (!(other instanceof ItemEditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand e \u003d (ItemEditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 editItemDescriptor.equals(e.editItemDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Stores the details to edit the item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * corresponding field value of the item."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static class EditItemDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        private Supplier supplier;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        private Quantity maxQuantity;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        private Metric metric;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public EditItemDescriptor() {}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            setSupplier(toCopy.supplier);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            setMaxQuantity(toCopy.maxQuantity);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            setMetric(toCopy.metric);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, quantity, supplier, tags, maxQuantity, metric);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public void setSupplier(Supplier supplier) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public Optional\u003cSupplier\u003e getSupplier() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return Optional.ofNullable(supplier);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void setMaxQuantity(Quantity maxQuantity) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            this.maxQuantity \u003d maxQuantity;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public Optional\u003cQuantity\u003e getMaxQuantity() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return Optional.ofNullable(maxQuantity);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        public void setMetric(Metric metric) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            this.metric \u003d metric;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        public Optional\u003cMetric\u003e getMetric() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return Optional.ofNullable(metric);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            if (!(other instanceof EditItemDescriptor)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            EditItemDescriptor e \u003d (EditItemDescriptor) other;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                    \u0026\u0026 getSupplier().equals(e.getSupplier())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    \u0026\u0026 getMaxQuantity().equals(e.getMaxQuantity())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    \u0026\u0026 getMetric().equals(e.getMetric());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 18,
      "xnoobftw": 55,
      "Wincenttjoi": 1,
      "halcon-blanco": 29,
      "-": 135,
      "zeranium97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Finds and lists all items in inventory book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemFindCommand extends ItemCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-i\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all items whose names contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME | \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_SUPPLIER + \"SUPPLIER | \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/chicken t/meat\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final Predicate\u003cItem\u003e predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public ItemFindCommand(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getInventoryModel());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel \u003d models.getInventoryModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.updateItemListFilter(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                        inventoryModel.getFilteredAndSortedItemList().size()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                || (other instanceof ItemFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u0026\u0026 predicate.equals(((ItemFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 5,
      "Wincenttjoi": 1,
      "halcon-blanco": 12,
      "-": 23,
      "zeranium97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.model.inventorymodel.InventoryModel.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Lists all items in the inventory book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemListCommand extends ItemCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-i\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all items\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getInventoryModel());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.getInventoryModel().updateItemListFilter(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 2,
      "Wincenttjoi": 1,
      "halcon-blanco": 10,
      "-": 13,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itemcommand/ItemRemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.model.inventorymodel.InventoryModel.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " * Removes a quantity from an existing item in the inventory book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class ItemRemoveCommand extends ItemCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove-i\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes quantity from the item identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + \"by the index number used in the displayed item list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + \"Existing quantity will be subtracted by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + PREFIX_QUANTITY + \"5 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Updated Item Quantity: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_NO_QUANTITY \u003d \"Quantity field must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the inventory book.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @param index of the item in the filtered item list to edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @param quantity to be subtracted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public ItemRemoveCommand(Index index, Quantity quantity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public CommandResult execute(Models models) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(models.getInventoryModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel \u003d models.getInventoryModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e lastShownList \u003d inventoryModel.getFilteredAndSortedItemList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size() || index.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Item itemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (Integer.parseInt(itemToEdit.getQuantity().value) \u003c Integer.parseInt(this.quantity.value)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            throw new CommandException(Quantity.MESSAGE_INVALID_QUANTITY_REMOVED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Item editedItem \u003d createRemovedItem(itemToEdit, quantity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!itemToEdit.isSameItem(editedItem) \u0026\u0026 inventoryModel.hasItem(editedItem)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.setItem(itemToEdit, editedItem);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.updateItemListFilter(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Creates and returns a {@code Item} with the details of {@code itemToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * after removing {@code quantity}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private static Item createRemovedItem(Item itemToEdit, Quantity quantity) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Name updatedName \u003d itemToEdit.getName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Quantity updatedQuantity \u003d itemToEdit.getQuantity().subtract(quantity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Supplier updatedSupplier \u003d itemToEdit.getSupplier();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d itemToEdit.getTags();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Quantity updatedMaxQuantity \u003d itemToEdit.getMaxQuantity().orElse(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Metric metric \u003d itemToEdit.getMetric().orElse(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Item(updatedName, updatedQuantity, updatedSupplier, updatedTags, updatedMaxQuantity, metric);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (!(other instanceof ItemRemoveCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        ItemRemoveCommand r \u003d (ItemRemoveCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return index.equals(r.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                \u0026\u0026 quantity.equals(r.quantity);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 97,
      "xnoobftw": 8,
      "Wincenttjoi": 5,
      "halcon-blanco": 9,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final boolean isShowHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /** Preview information should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final boolean isShowPreview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowHelp, boolean isShowPreview, boolean isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.isShowPreview \u003d isShowPreview;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.isShowHelp \u003d isShowHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public boolean isShowPreview() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return isShowPreview;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u0026\u0026 isShowPreview \u003d\u003d otherCommandResult.isShowPreview"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isShowPreview, isExit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/HelpCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Represents the result of the Help command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class HelpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private String popUpContent \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private String dataToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Constructs a {@code HelpCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param isShowHelp whether it is showHelp."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param popUpContent the content to show in UI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public HelpCommandResult(String feedbackToUser, boolean isShowHelp,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                             boolean isShowPreview, boolean exit, String dataToUser,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                             String popUpContent) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        super(feedbackToUser, isShowHelp, isShowPreview, exit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.dataToUser \u003d requireNonNull(dataToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.popUpContent \u003d requireNonNull(popUpContent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public String getPopUpContent() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return popUpContent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Prefix PREFIX_SUPPLIER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final Prefix PREFIX_MAX_QUANTITY \u003d new Prefix(\"max/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final Prefix PREFIX_METRIC \u003d new Prefix(\"metric/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "xnoobftw": 2,
      "-": 12,
      "halcon-blanco": 1,
      "zeranium97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.help.HelpStartCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.help.HelpSummaryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        switch (args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new HelpStartCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case \"summary\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new HelpSummaryCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            throw new ParseException(HelpCommand.MESSAGE_INVALID_OPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OneShelfBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryEditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryFindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemDeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemFindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemRemoveCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.parser.deliveryparser.DeliveryAddCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.deliveryparser.DeliveryDeleteCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.deliveryparser.DeliveryEditCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.deliveryparser.DeliveryFindCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.itemparser.ItemAddCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.itemparser.ItemDeleteCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.itemparser.ItemEditCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.itemparser.ItemFindCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.itemparser.RemoveCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class OneShelfBookParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // Inventory command words"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case ItemAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ItemAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case ItemEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ItemEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case ItemRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case ItemDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ItemDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case ItemClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ItemClearCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case ItemFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ItemFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case ItemListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ItemListCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            // Delivery command words"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        case DeliveryAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return new DeliveryAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case DeliveryEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new DeliveryEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case DeliveryDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new DeliveryDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case DeliveryFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new DeliveryFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case DeliveryListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new DeliveryListCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        case DeliveryClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new DeliveryClearCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            // General command words"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new HelpCommandParser().parse(arguments.trim());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 4,
      "Wincenttjoi": 29,
      "-": 52,
      "halcon-blanco": 33,
      "zeranium97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!StringUtil.isInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Parses a {@code String deliveryName} into a {@code DeliveryName}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws ParseException if the given {@code deliveryName} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static DeliveryName parseDeliveryName(String deliveryName) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(deliveryName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String trimmedDeliveryName \u003d deliveryName.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!DeliveryName.isValidName(trimmedDeliveryName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new ParseException(DeliveryName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new DeliveryName(trimmedDeliveryName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Parses a {@code String supplier} into an {@code Supplier}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws ParseException if the given {@code Supplier} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static Supplier parseSupplier(String supplier) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String trimmedSupplier \u003d supplier.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!Supplier.isValidSupplier(trimmedSupplier)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new ParseException(Supplier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new Supplier(trimmedSupplier);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses {@code String maxQuantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static Quantity parseMaxQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (!Quantity.isValidMaxQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS_MAX_QUANTITY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses a {@code String metric} into a {@code Metric}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @throws ParseException if the given {@code Metric} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static Metric parseMetric(String metric) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(metric);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        String trimmedMetric \u003d metric.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (!Metric.isValidMetric(metric)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            throw new ParseException(Metric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Metric(trimmedMetric);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses an {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws ParseException if the given {@code Address} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws ParseException if the given {@code Phone} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Parses a {@code String order} into a {@code Order}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws ParseException if the given {@code Order} is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static Order parseOrder(String order) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String trimmedOrder \u003d order.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (!Order.isValidOrder(order)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new ParseException(Order.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new Order(trimmedOrder);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return Time.timeFromMinutes(trimmedTime);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 37,
      "xnoobftw": 7,
      "-": 93,
      "halcon-blanco": 65,
      "zeranium97": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add Chicken t/ meat\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryparser/DeliveryAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class DeliveryAddCommandParser implements Parser\u003cDeliveryAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static final String DEFAULT_TIME_DELIVERY \u003d \"30\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public DeliveryAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_ORDER, PREFIX_TIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert argMultimap !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_ORDER)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliveryAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryName deliveryName \u003d ParserUtil.parseDeliveryName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Order order \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).orElse(DEFAULT_TIME_DELIVERY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Delivery delivery \u003d new Delivery(deliveryName, phone, address, order, time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new DeliveryAddCommand(delivery);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 4,
      "Wincenttjoi": 5,
      "zeranium97": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryparser/DeliveryDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Parses input arguments and creates a new DeliveryDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryDeleteCommandParser implements Parser\u003cDeliveryDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeliveryDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * and returns a DeliveryDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return new DeliveryDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliveryDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryparser/DeliveryEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Parses input arguments and creates a new DeliveryEditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryEditCommandParser implements Parser\u003cDeliveryEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeliveryEditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * and returns an DeliveryEditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_ORDER, PREFIX_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert argMultimap !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    DeliveryEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor editDeliveryDescriptor \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryEditCommand.EditDeliveryDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            editDeliveryDescriptor.setDeliveryName("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    ParserUtil.parseDeliveryName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            editDeliveryDescriptor.setPhone("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            editDeliveryDescriptor.setAddress("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORDER).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            editDeliveryDescriptor.setOrder(ParserUtil"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    .parseOrder(argMultimap.getValue(PREFIX_ORDER).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            editDeliveryDescriptor.setTime(ParserUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                    .parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (!editDeliveryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            throw new ParseException(DeliveryEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new DeliveryEditCommand(index, editDeliveryDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 7,
      "Wincenttjoi": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryparser/DeliveryFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryFindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.DeliveryNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Parses input arguments and creates a new DeliveryFindCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DeliveryFindCommandParser implements Parser\u003cDeliveryFindCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeliveryFindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * and returns a DeliveryFindCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DeliveryFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_ORDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert argMultimap !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_ORDER)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliveryFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cPredicate\u003cDelivery\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            String trimmedArgs \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            predicateList.add(new DeliveryNameContainsKeywordsPredicate(Arrays.asList(trimmedArgs.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            String trimmedArgs \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()).value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            predicateList.add(new AddressContainsKeywordsPredicate(Arrays.asList(trimmedArgs.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            String trimmedArgs \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()).value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            predicateList.add(new PhoneContainsKeywordsPredicate(Arrays.asList(trimmedArgs.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORDER).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            String trimmedArgs \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER).get()).value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            predicateList.add(new OrderContainsKeywordsPredicate(Arrays.asList(trimmedArgs.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Predicate\u003cDelivery\u003e finalPredicate \u003d predicateList.get(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        for (int i \u003d 1; i \u003c predicateList.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            finalPredicate \u003d finalPredicate.and(predicateList.get(i));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new DeliveryFindCommand(finalPredicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 2,
      "halcon-blanco": 49,
      "zeranium97": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itemparser/ItemAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_METRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Parses input arguments and creates a new ItemAddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemAddCommandParser implements Parser\u003cItemAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ItemAddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * and returns an ItemAddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_QUANTITY, PREFIX_SUPPLIER, PREFIX_TAG,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                        PREFIX_MAX_QUANTITY, PREFIX_METRIC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert argMultimap !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Supplier supplier \u003d ParserUtil.parseSupplier(argMultimap.getValue(PREFIX_SUPPLIER).orElse(\"No Supplier\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String maxQ \u003d argMultimap.getValue(PREFIX_MAX_QUANTITY).orElse(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Quantity maxQuantity \u003d maxQ \u003d\u003d null ? null : ParserUtil.parseMaxQuantity(maxQ);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        String met \u003d argMultimap.getValue(PREFIX_METRIC).orElse(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Metric metric \u003d met \u003d\u003d null ? null : ParserUtil.parseMetric(met);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Item item \u003d new Item(name, quantity, supplier, tagList, maxQuantity, metric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new ItemAddCommand(item);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 6,
      "xnoobftw": 8,
      "Wincenttjoi": 2,
      "halcon-blanco": 18,
      "-": 36,
      "zeranium97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itemparser/ItemDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Parses input arguments and creates a new ItemDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemDeleteCommandParser implements Parser\u003cItemDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ItemDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * and returns a ItemDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ItemDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itemparser/ItemEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_METRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Parses input arguments and creates a new ItemEditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemEditCommandParser implements Parser\u003cItemEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ItemEditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * and returns an ItemEditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_QUANTITY, PREFIX_SUPPLIER, PREFIX_TAG,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                        PREFIX_MAX_QUANTITY, PREFIX_METRIC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert argMultimap !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        EditItemDescriptor editItemDescriptor \u003d new ItemEditCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            editItemDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            editItemDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SUPPLIER).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            editItemDescriptor.setSupplier(ParserUtil.parseSupplier(argMultimap.getValue(PREFIX_SUPPLIER).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editItemDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            editItemDescriptor.setMaxQuantity(ParserUtil"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .parseMaxQuantity(argMultimap.getValue(PREFIX_MAX_QUANTITY).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (argMultimap.getValue(PREFIX_METRIC).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            editItemDescriptor.setMetric(ParserUtil"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .parseMetric(argMultimap.getValue(PREFIX_METRIC).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!editItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(ItemEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new ItemEditCommand(index, editItemDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 6,
      "xnoobftw": 8,
      "Wincenttjoi": 2,
      "halcon-blanco": 26,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itemparser/ItemFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemFindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.SupplierContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Parses input arguments and creates a new ItemFindCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemFindCommandParser implements Parser\u003cItemFindCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ItemFindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * and returns a ItemFindCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SUPPLIER, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert argMultimap !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_SUPPLIER, PREFIX_TAG)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cPredicate\u003cItem\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            String trimmedArgs \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            predicateList.add(new NameContainsKeywordsPredicate(Arrays.asList(trimmedArgs.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SUPPLIER).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            String trimmedArgs \u003d ParserUtil.parseSupplier(argMultimap.getValue(PREFIX_SUPPLIER).get()).value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            predicateList.add(new SupplierContainsKeywordsPredicate(Arrays.asList(trimmedArgs.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            String trimmedArgs \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()).tagName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            predicateList.add(new TagContainsKeywordsPredicate(Arrays.asList(trimmedArgs.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Predicate\u003cItem\u003e finalPredicate \u003d predicateList.get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        for (int i \u003d 1; i \u003c predicateList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            finalPredicate \u003d finalPredicate.and(predicateList.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new ItemFindCommand(finalPredicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 2,
      "halcon-blanco": 13,
      "-": 16,
      "zeranium97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itemparser/RemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemRemoveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cItemRemoveCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * and returns a RemoveCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public ItemRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assert argMultimap !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    ItemRemoveCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (!isQuantityPresent(argMultimap, PREFIX_QUANTITY)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            throw new ParseException(ItemRemoveCommand.MESSAGE_NO_QUANTITY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new ItemRemoveCommand(index, quantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if Prefix Quantity does not contains empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static boolean isQuantityPresent(ArgumentMultimap argumentMultimap, Prefix quantity) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return Stream.of(quantity).allMatch(prefix -\u003e argumentMultimap.getValue(quantity).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 30,
      "Wincenttjoi": 11,
      "halcon-blanco": 6,
      "zeranium97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * API of a Model component"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    int MODEL_DEFAULT_STATES_LIMIT \u003d 20;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the maximum number of states that the model should keep"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void setStatesLimit(int limit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Commits the current model to the list of model states"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Reverts the current model to the previous one in the list of model states"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws UndoRedoLimitReachedException if there is nothing left to undo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void undo() throws UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Changes an undone model back to the previous one"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws UndoRedoLimitReachedException if there is nothing left to redo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void redo() throws UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "halcon-blanco": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Models.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public interface Models {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets the {@code DeliveryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return The {@code DeliveryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    DeliveryModel getDeliveryModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the {@code DeliveryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void setDeliveryModel(DeliveryModel deliveryModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets the {@code InventoryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return The {@code InventoryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    InventoryModel getInventoryModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the {@code InventoryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void setInventoryModel(InventoryModel inventoryModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets every {@code Model} as a {@code Map}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return a {@code Map} mapping each {@code Model}\u0027s key to its respective {@code Model}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    Map\u003c? extends String, ? extends Model\u003e getModelsAsMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the maximum number of states that all the models should keep"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void setStatesLimit(int limit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Commits the current state of {@code Models} into history."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Reverts the current state of {@code Models} one step in history."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void undo() throws UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Redoes an undone state of {@code Models} one step forward in history."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void redo() throws UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelsManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Class that implements {@code Models} interface. Serves as a wrapper class for all models."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ModelsManager implements Models {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String DELIVERY_MODEL_KEY \u003d \"Delivery Model\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String INVENTORY_MODEL_KEY \u003d \"Inventory Model\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel deliveryModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private InventoryModel inventoryModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Map\u003cString, Model\u003e modelMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Initialise a {@code ModelManager} to hold empty models"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ModelsManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this(new InventoryModelManager(), new DeliveryModelManager());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Initialise a {@code ModelManager} to hold the specificied models"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param inventoryModel {@InventoryModel} which the {@ModelManager} stores"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param deliveryModel {@DeliveryModel} which the {@ModelManager} stores"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ModelsManager(InventoryModel inventoryModel, DeliveryModel deliveryModel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.deliveryModel \u003d deliveryModel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.inventoryModel \u003d inventoryModel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        modelMap \u003d initialiseModelMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        commit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the {@code DeliveryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void setDeliveryModel(DeliveryModel deliveryModel) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.deliveryModel \u003d deliveryModel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        modelMap.put(DELIVERY_MODEL_KEY, deliveryModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the {@code InventoryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void setInventoryModel(InventoryModel inventoryModel) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.inventoryModel \u003d inventoryModel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        modelMap.put(INVENTORY_MODEL_KEY, inventoryModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets the {@code DeliveryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return The {@code DeliveryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DeliveryModel getDeliveryModel() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return deliveryModel;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets the {@code InventoryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return The {@code InventoryModel} stored inside {@code Models}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public InventoryModel getInventoryModel() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return inventoryModel;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets every {@code Model} as a {@code Map}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return a {@code Map} mapping each {@code Model}\u0027s key to its respective {@code Model}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Map\u003c? extends String, ? extends Model\u003e getModelsAsMap() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return modelMap;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the maximum number of states that a model should keep"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void setStatesLimit(int limit) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assert limit \u003e\u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (Model model: modelMap.values()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            model.setStatesLimit(limit);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Commits the current state of {@code Models} into history."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (Model model : modelMap.values()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            model.commit();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Reverts the current state of {@code Models} one step in history."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void undo() throws UndoRedoLimitReachedException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (Model model : modelMap.values()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            model.undo();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Redoes an undone state of {@code Models} one step forward in history."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void redo() throws UndoRedoLimitReachedException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (Model model : modelMap.values()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            model.redo();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Map\u003cString, Model\u003e initialiseModelMap() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Map\u003cString, Model\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tempMap.put(DELIVERY_MODEL_KEY, deliveryModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tempMap.put(INVENTORY_MODEL_KEY, inventoryModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return tempMap;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else if (!(obj instanceof ModelsManager)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            DeliveryModel objDeliveryModel \u003d ((ModelsManager) obj).getDeliveryModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            InventoryModel objInventoryModel \u003d ((ModelsManager) obj).getInventoryModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return objDeliveryModel.equals(this.deliveryModel) \u0026\u0026 objInventoryModel.equals(this.inventoryModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Path getInventoryBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Path getDeliveryBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "-": 16,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private Path inventoryBookFilePath \u003d Paths.get(\"data\" , \"inventorybook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private Path deliveryBookFilePath \u003d Paths.get(\"data\", \"deliverybook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        setInventoryBookFilePath(newUserPrefs.getInventoryBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        setDeliveryBookFilePath(newUserPrefs.getDeliveryBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path getInventoryBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setInventoryBookFilePath(Path inventoryBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(inventoryBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.inventoryBookFilePath \u003d inventoryBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Path getDeliveryBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveryBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveryBookFilePath(Path deliveryBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(deliveryBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.deliveryBookFilePath \u003d deliveryBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 inventoryBookFilePath.equals(o.inventoryBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 deliveryBookFilePath.equals(o.deliveryBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Objects.hash(guiSettings, inventoryBookFilePath, deliveryBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        sb.append(\"\\nInventory data file location : \" + inventoryBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        sb.append(\"\\nDelivery data file location : \" + deliveryBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 14,
      "-": 79,
      "zeranium97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents a Person\u0027s address in the delivery book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "zeranium97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/Delivery.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents a delivery in the delivery book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class Delivery {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final DeliveryName name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final Order order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public Delivery(DeliveryName name, Phone phone, Address address, Order order, Time time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireAllNonNull(name, phone, address, order, time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public DeliveryName getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Order getOrder() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return this.time.endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Objects.hash(name, phone, address, order);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if both delivery have the same identity and data fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * This defines a stronger notion of equality between two delivery."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!(other instanceof Delivery)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Delivery otherDelivery \u003d (Delivery) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return otherDelivery.getName().equals(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 otherDelivery.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 otherDelivery.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 otherDelivery.getOrder().equals(getOrder());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        builder.append(\"\\nName: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"Phone: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"Address: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"Order: \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(getOrder());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 13,
      "xnoobftw": 13,
      "Wincenttjoi": 1,
      "halcon-blanco": 1,
      "zeranium97": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/DeliveryName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents a Item\u0027s name in the delivery book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryName implements Comparable\u003cDeliveryName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public DeliveryName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        fullName \u003d name.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof DeliveryName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 fullName.equals(((DeliveryName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public int compareTo(DeliveryName deliveryName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this.fullName.compareTo(deliveryName.fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 5,
      "zeranium97": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/Order.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents a Delivery\u0027s order in the delivery book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Order can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructs an {@code Order}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param order A valid order."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Order(String order) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        checkArgument(isValidOrder(order), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        value \u003d order;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Returns true if a given string is a valid order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static boolean isValidOrder(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof Order // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 value.equals(((Order) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 11,
      "halcon-blanco": 6,
      "zeranium97": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " * Represents a Delivery\u0027s time in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "public class Time implements Comparable\u003cTime\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            \"Time is in minutes, should only contain numbers, and it should be at least 1 digit long, \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                    + \"and it should be greater than or equals to 0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String TIME_FORMAT_PATTERN \u003d \"dd MMMM yyyy HH:mm:ss SSS\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public final String minutes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public final LocalDateTime endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @param minutes A valid time in minutes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @param endTime A LocalDateTime that the delivery should be done by."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public Time(String minutes, String endTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(minutes, endTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.parse(endTime, DateTimeFormatter.ofPattern(TIME_FORMAT_PATTERN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.endTime \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @param minutes A valid time in minutes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @return A new Time, with endTime {@code minutes} from time now."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static Time timeFromMinutes(String minutes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        checkArgument(isValidTime(minutes), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        long min \u003d Long.parseLong(minutes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        LocalDateTime endTime \u003d LocalDateTime.now().plusMinutes(min);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Time(minutes, endTime.format(DateTimeFormatter.ofPattern(TIME_FORMAT_PATTERN)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return endTime.format(DateTimeFormatter.ofPattern(TIME_FORMAT_PATTERN));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                \u0026\u0026 endTime.equals(((Time) other).endTime)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return endTime.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public int compareTo(Time time) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return endTime.compareTo(time.endTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 76,
      "Wincenttjoi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/UniqueDeliveryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.exception.DeliveryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A list of deliveries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A delivery is considered unique by comparing using {@code Delivery#isSameItem(Delivery)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * As such, adding and updating of deliveries uses Delivery#isSameDelivery(Delivery) for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * equality so as to ensure that the delivery being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * unique in terms of identity in the UniqueDeliveryList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * However, the removal of a delivery uses Delivery#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * as to ensure that the delivery with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class UniqueDeliveryList implements Iterable\u003cDelivery\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final ObservableList\u003cDelivery\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final ObservableList\u003cDelivery\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if the list contains an equivalent delivery as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean contains(Delivery toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Adds a delivery to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The delivery must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void add(Delivery toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the delivery {@code target} in the list with {@code editedDelivery}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The delivery identity of {@code editedDelivery} must not be the same as another existing delivery in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDelivery(Delivery target, Delivery editedDelivery) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(target, editedDelivery);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new DeliveryNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        internalList.set(index, editedDelivery);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Removes the equivalent delivery from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The delivery must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void remove(Delivery toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new DeliveryNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveries(UniqueDeliveryList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the contents of this list with {@code deliveries}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code deliveries} must not contain duplicate deliveries."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveries(List\u003cDelivery\u003e deliveries) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(deliveries);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        internalList.setAll(deliveries);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ObservableList\u003cDelivery\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Iterator\u003cDelivery\u003e iterator() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                || (other instanceof UniqueDeliveryList // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeliveryList) other).internalList));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 111,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/comparator/DeliveryEndTimeComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "package seedu.address.model.delivery.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "public class DeliveryEndTimeComparator implements Comparator\u003cDelivery\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public int compare(Delivery delivery1, Delivery delivery2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (delivery1.getEndTime().isBefore(delivery2.getEndTime())) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        } else if (delivery1.getEndTime().isAfter(delivery2.getEndTime())) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            // when 2 deliveries have the same endTime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            return delivery1.getName().compareTo(delivery2.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 18,
      "Wincenttjoi": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/exception/DeliveryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.delivery.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Signals that the operation is unable to find the specified delivery."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class DeliveryNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/predicate/AddressContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Tests that a {@code Delivery}\u0027s {@code Address} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cDelivery\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructor for DeliveryContainsKeywordsPredicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param keywords List of keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean test(Delivery delivery) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(delivery.getAddress().value, keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/predicate/DeliveryNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Tests that a {@code Delivery}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class DeliveryNameContainsKeywordsPredicate implements Predicate\u003cDelivery\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructor for DeliveryNameContainsKeywordsPredicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param keywords List of keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public DeliveryNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean test(Delivery delivery) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assert(delivery !\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(delivery.getName().fullName, keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof DeliveryNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 keywords.equals(((DeliveryNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/predicate/OrderContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Tests that a {@code Delivery}\u0027s {@code Order} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class OrderContainsKeywordsPredicate implements Predicate\u003cDelivery\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructor for OrderContainsKeywordsPredicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param keywords List of keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public OrderContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean test(Delivery delivery) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(delivery.getOrder().value, keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof OrderContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 keywords.equals(((OrderContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/delivery/predicate/PhoneContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Tests that a {@code Delivery}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cDelivery\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructor for PhoneContainsKeywordsPredicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param keywords List of keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean test(Delivery delivery) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(delivery.getPhone().value, keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverymodel/DeliveryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.deliverymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.UniqueDeliveryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class DeliveryBook implements ReadOnlyDeliveryBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final UniqueDeliveryList deliveries;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        deliveries \u003d new UniqueDeliveryList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public DeliveryBook() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Creates a DeliveryBook using Deliveries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public DeliveryBook(ReadOnlyDeliveryBook toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the contents of the delivery list with {@code deliveries}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code deliveries} must not contain duplicate deliveries."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveries(List\u003cDelivery\u003e deliveries) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.deliveries.setDeliveries(deliveries);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Resets the existing data of this {@code DeliveryBook} with {@code newData}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void resetData(ReadOnlyDeliveryBook newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        setDeliveries(newData.getDeliveryList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //// delivery-level operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if a delivery with the same identity as {@code delivery} exists in the delivery book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean hasDelivery(Delivery delivery) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(delivery);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveries.contains(delivery);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Adds a delivery to the delivery book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The delivery must not already exist in the delivery book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addDelivery(Delivery d) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        deliveries.add(d);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the given delivery {@code target} in the list with {@code editedDelivery}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code target} must exist in the delivery book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The delivery identity of {@code editedDelivery} must not be the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * same as another existing delivery in the delivery book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDelivery(Delivery target, Delivery editedDelivery) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(editedDelivery);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        deliveries.setDelivery(target, editedDelivery);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Removes {@code key} from this {@code DeliveryBook}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code key} must exist in the Delivery book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void removeDelivery(Delivery key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        deliveries.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ObservableList\u003cDelivery\u003e getDeliveryList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            || (other instanceof DeliveryBook"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            \u0026\u0026 deliveries.equals(((DeliveryBook) other).deliveries));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveries.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverymodel/DeliveryModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.deliverymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.comparator.DeliveryEndTimeComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * API of the DeliveryModel component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public interface DeliveryModel extends Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Predicate\u003cDelivery\u003e PREDICATE_SHOW_ALL_DELIVERIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /** {@code Comparator} that returns a ItemComparator */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    Comparator\u003cDelivery\u003e DELIVERY_COMPARATOR \u003d new DeliveryEndTimeComparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the user prefs\u0027 delivery book file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Path getDeliveryBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Sets the user prefs\u0027 delivery book file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void setDeliveryBookFilePath(Path deliveryBookFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces delivery book data with the data in {@code deliveryBook}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void setDeliveryBook(ReadOnlyDeliveryBook deliveryBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /** Returns the DeliveryBook */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    ReadOnlyDeliveryBook getDeliveryBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d METHODS STARTS HERE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Adds the given delivery."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code delivery} must not already exist in the delivery book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void addDelivery(Delivery delivery);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Deletes the given delivery."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The delivery must exist in the delivery book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void deleteDelivery(Delivery delivery);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the given delivery {@code target} with {@code editedDelivery}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code target} must exist in the delivery book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The delivery identity of {@code editedDelivery} must not"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * be the same as another existing delivery in the delivery book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void setDelivery(Delivery target, Delivery editedDelivery);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered delivery list */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    ObservableList\u003cDelivery\u003e getFilteredAndSortedDeliveryList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Updates the filter of the filtered delivery list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void updateFilteredDeliveryList(Predicate\u003cDelivery\u003e predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 6,
      "xnoobftw": 62,
      "halcon-blanco": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverymodel/DeliveryModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.deliverymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class DeliveryModelManager implements DeliveryModel {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeliveryModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private List\u003cDeliveryBook\u003e deliveryBookStateList \u003d new ArrayList\u003c\u003e(MODEL_DEFAULT_STATES_LIMIT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private int deliveryBookStatePointer \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private int statesLimit \u003d MODEL_DEFAULT_STATES_LIMIT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final DeliveryBook deliveryBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final FilteredList\u003cDelivery\u003e filteredDeliveries;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Initializes a DeliveryModelManager with the given deliveryBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public DeliveryModelManager(ReadOnlyDeliveryBook deliveryBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(deliveryBook, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        logger.fine(\"Initializing with delivery book: \" + deliveryBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.deliveryBook \u003d new DeliveryBook(deliveryBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        filteredDeliveries \u003d new FilteredList\u003c\u003e(this.deliveryBook.getDeliveryList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public DeliveryModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this(new DeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Path getDeliveryBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return userPrefs.getDeliveryBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveryBookFilePath(Path deliveryBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(deliveryBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userPrefs.setDeliveryBookFilePath(deliveryBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliveryBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveryBook(ReadOnlyDeliveryBook deliveryBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.deliveryBook.resetData(deliveryBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ReadOnlyDeliveryBook getDeliveryBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveryBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void deleteDelivery(Delivery target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        deliveryBook.removeDelivery(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addDelivery(Delivery delivery) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        deliveryBook.addDelivery(delivery);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        updateFilteredDeliveryList(PREDICATE_SHOW_ALL_DELIVERIES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDelivery(Delivery target, Delivery editedDelivery) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(target, editedDelivery);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        deliveryBook.setDelivery(target, editedDelivery);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Delivery List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Delivery} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code versionedDeliveryBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public ObservableList\u003cDelivery\u003e getFilteredAndSortedDeliveryList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new SortedList\u003c\u003e(filteredDeliveries, DELIVERY_COMPARATOR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void updateFilteredDeliveryList(Predicate\u003cDelivery\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        filteredDeliveries.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Redo/Undo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Copies the current {@code InventoryBook} in the state list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assert deliveryBookStatePointer \u003c deliveryBookStateList.size();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assert deliveryBookStateList.size() \u003c\u003d statesLimit;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (canRedo()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deliveryBookStateList \u003d deliveryBookStateList.subList(0, deliveryBookStatePointer + 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (deliveryBookStateIsFull()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deliveryBookStateList.remove(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deliveryBookStatePointer--;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryBookStateList.add(new DeliveryBook(deliveryBook));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryBookStatePointer++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Shifts the current {@code InventoryBook} to the previous one in the state list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void undo() throws UndoRedoLimitReachedException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (canUndo()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deliveryBookStatePointer--;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deliveryBook.resetData(deliveryBookStateList.get(deliveryBookStatePointer));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new UndoRedoLimitReachedException(MESSAGE_UNDO_LIMIT_REACHED);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Shifts the current {@code InventoryBook} to the next one in the state list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void redo() throws UndoRedoLimitReachedException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (canRedo()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deliveryBookStatePointer++;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deliveryBook.resetData(deliveryBookStateList.get(deliveryBookStatePointer));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new UndoRedoLimitReachedException(MESSAGE_REDO_LIMIT_REACHED);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void setStatesLimit(int limit) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        statesLimit \u003d limit;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private boolean canUndo() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return deliveryBookStatePointer \u003e 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private boolean canRedo() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return deliveryBookStatePointer \u003c deliveryBookStateList.size() - 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private boolean deliveryBookStateIsFull() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return deliveryBookStateList.size() \u003e\u003d statesLimit;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!(obj instanceof DeliveryModelManager)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        DeliveryModelManager other \u003d (DeliveryModelManager) obj;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return deliveryBook.equals(other.deliveryBook)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 filteredDeliveries.equals(other.filteredDeliveries);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 3,
      "xnoobftw": 139,
      "halcon-blanco": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverymodel/ReadOnlyDeliveryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.deliverymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public interface ReadOnlyDeliveryBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns an unmodifiable view of the delivery list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    ObservableList\u003cDelivery\u003e getDeliveryList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventorymodel/InventoryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.inventorymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Wraps all data at the inventory-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Duplicates are not allowed (by .isSameItem comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class InventoryBook implements ReadOnlyInventoryBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final UniqueItemList items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        items \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public InventoryBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Creates an InventoryBook using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public InventoryBook(ReadOnlyInventoryBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.items.setItems(items);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Resets the existing data of this {@code InventoryBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void resetData(ReadOnlyInventoryBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        setItems(newData.getItemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //// item-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if a item with the same identity as {@code item} exists in the inventory book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Adds a item to the inventory book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * The item must not already exist in the inventory book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addItem(Item p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        items.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Combines quantity and tags of existing item with item provided"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param item item provided to combine with existing item"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return combined item"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Item addOnExistingItem(Item item) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return items.addOnExistingItem(item);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the given item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code target} must exist in the inventory book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the inventory book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(editedItem);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        items.setItem(target, editedItem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Removes {@code key} from this {@code InventoryBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code key} must exist in the inventory book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void removeItem(Item key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        items.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return items.asUnmodifiableObservableList().size() + \" items\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return items.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof InventoryBook // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 items.equals(((InventoryBook) other).items));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return items.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 36,
      "-": 75,
      "halcon-blanco": 1,
      "zeranium97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventorymodel/InventoryModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.inventorymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.comparator.ItemNameComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.comparator.ItemQuantityPercentageComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * The API of the InventoryModel component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public interface InventoryModel extends Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /** {@code Comparator} that returns a ItemComparator */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Comparator\u003cItem\u003e ITEM_COMPARATOR \u003d new ItemQuantityPercentageComparator().thenComparing(new ItemNameComparator());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns the user prefs\u0027 inventory book file path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Path getInventoryBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Sets the user prefs\u0027 inventory book file path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void setInventoryBookFilePath(Path inventoryBookFilePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Replaces inventory book data with the data in {@code inventoryBook}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void setInventoryBook(ReadOnlyInventoryBook inventoryBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /** Returns the InventoryBook */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    ReadOnlyInventoryBook getInventoryBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d METHODS STARTS HERE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if a item with the same identity as {@code item} exists in the inventory book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    boolean hasItem(Item item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Deletes the given item."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * The item must exist in the inventory book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void deleteItem(Item target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Adds the given item."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code item} must not already exist in the inventory book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void addItem(Item item);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Combines quantity and tags of existing item with item provided"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param item item provided to combine with existing item"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return combined item"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Item addOnExistingItem(Item item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the given item {@code target} with {@code editedItem}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code target} must exist in the inventory book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the inventory book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void setItem(Item target, Item editedItem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered and sorted item list */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredAndSortedItemList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Updates the filter of the filtered and sorted item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    void updateItemListFilter(Predicate\u003cItem\u003e predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 30,
      "-": 37,
      "halcon-blanco": 2,
      "zeranium97": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventorymodel/InventoryModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.inventorymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents the in-memory model of the inventory book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class InventoryModelManager implements InventoryModel {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InventoryModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private List\u003cInventoryBook\u003e inventoryBookStateList \u003d new ArrayList\u003c\u003e(MODEL_DEFAULT_STATES_LIMIT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private int inventoryBookStatePointer \u003d -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private int statesLimit \u003d MODEL_DEFAULT_STATES_LIMIT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final InventoryBook inventoryBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Initializes a InventoryModelManager with the given inventoryBook and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public InventoryModelManager(ReadOnlyInventoryBook inventoryBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireAllNonNull(inventoryBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        logger.fine(\"Initializing with inventory book: \" + inventoryBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.inventoryBook \u003d new InventoryBook(inventoryBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.inventoryBook.getItemList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public InventoryModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this(new InventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path getInventoryBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return userPrefs.getInventoryBookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setInventoryBookFilePath(Path inventoryBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(inventoryBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        userPrefs.setInventoryBookFilePath(inventoryBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventoryBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setInventoryBook(ReadOnlyInventoryBook inventoryBook) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.inventoryBook.resetData(inventoryBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public ReadOnlyInventoryBook getInventoryBook() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBook;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBook.hasItem(item);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        inventoryBook.removeItem(target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        inventoryBook.addItem(item);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        updateItemListFilter(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Item addOnExistingItem(Item item) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Item combinedItem \u003d inventoryBook.addOnExistingItem(item);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        updateItemListFilter(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return combinedItem;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        inventoryBook.setItem(target, editedItem);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code versionedInventoryBook}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredAndSortedItemList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new SortedList\u003c\u003e(filteredItems, ITEM_COMPARATOR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void updateItemListFilter(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Redo/Undo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Copies the current {@code InventoryBook} in the state list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assert inventoryBookStatePointer \u003c inventoryBookStateList.size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (canRedo()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryBookStateList \u003d inventoryBookStateList.subList(0, inventoryBookStatePointer + 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (inventoryBookStateIsFull()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryBookStateList.remove(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryBookStatePointer--;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryBookStateList.add(new InventoryBook(inventoryBook));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryBookStatePointer++;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Shifts the current {@code InventoryBook} to the previous one in the state list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws UndoRedoLimitReachedException if there is nothing left to undo"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void undo() throws UndoRedoLimitReachedException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (canUndo()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryBookStatePointer--;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryBook.resetData(inventoryBookStateList.get(inventoryBookStatePointer));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new UndoRedoLimitReachedException(MESSAGE_UNDO_LIMIT_REACHED);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Shifts the current {@code InventoryBook} to the next one in the state list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws UndoRedoLimitReachedException if there is nothing left to redo"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void redo() throws UndoRedoLimitReachedException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (canRedo()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryBookStatePointer++;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            inventoryBook.resetData(inventoryBookStateList.get(inventoryBookStatePointer));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new UndoRedoLimitReachedException(MESSAGE_REDO_LIMIT_REACHED);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void setStatesLimit(int limit) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        statesLimit \u003d limit;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private boolean canUndo() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return inventoryBookStatePointer \u003e 0;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private boolean canRedo() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return inventoryBookStatePointer \u003c inventoryBookStateList.size() - 1;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private boolean inventoryBookStateIsFull() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return inventoryBookStateList.size() \u003e\u003d statesLimit;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!(obj instanceof InventoryModelManager)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModelManager other \u003d (InventoryModelManager) obj;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBook.equals(other.inventoryBook)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 filteredItems.equals(other.filteredItems);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 33,
      "-": 104,
      "halcon-blanco": 75,
      "zeranium97": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventorymodel/ReadOnlyInventoryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.inventorymodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Unmodifiable view of an inventory book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public interface ReadOnlyInventoryBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns an unmodifiable view of the items list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    ObservableList\u003cItem\u003e getItemList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 5,
      "-": 10,
      "zeranium97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents a Item in the inventory book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final Supplier supplier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private final Optional\u003cQuantity\u003e maxQuantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private final Optional\u003cMetric\u003e metric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public Item(Name name, Quantity quantity, Supplier supplier, Set\u003cTag\u003e tags, Quantity maxQuantity, Metric metric) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        requireAllNonNull(name, quantity, supplier, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.maxQuantity \u003d Optional.ofNullable(maxQuantity);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.metric \u003d Optional.ofNullable(metric);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Supplier getSupplier() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return supplier;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Optional\u003cQuantity\u003e getMaxQuantity() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return maxQuantity;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public Optional\u003cMetric\u003e getMetric() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return metric;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if both items of the same name have the same supplier."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 otherItem.getSupplier().equals(getSupplier());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if both items have the same name and data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 otherItem.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 otherItem.getSupplier().equals(getSupplier())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 otherItem.getMaxQuantity().equals(getMaxQuantity());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Objects.hash(name, quantity, supplier, tags, maxQuantity);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        builder.append(\"\\nName: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .append(\"Quantity: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .append(\"Supplier: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .append(getSupplier())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Tags: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        getTags().forEach(x -\u003e builder.append(x).append(\" \"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (maxQuantity.isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            builder.append(\"\\n\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                    .append(\"Max Quantity: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    .append(getMaxQuantity().get().value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 7,
      "xnoobftw": 32,
      "Wincenttjoi": 1,
      "-": 72,
      "halcon-blanco": 12,
      "zeranium97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Metric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " * Represents a Item\u0027s metric in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMetric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "public class Metric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Metric should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Constructs an {@code Metric}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @param metric A valid metric."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public Metric(String metric) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        requireNonNull(metric);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        checkArgument(isValidMetric(metric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        value \u003d metric.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Returns true if a given string is a valid metric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static boolean isValidMetric(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return this.value.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                || (other instanceof Metric // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                \u0026\u0026 value.equals(((Metric) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Represents a Item\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        fullName \u003d name.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int compareTo(Name name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return fullName.compareTo(name.fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 8,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Represents a Item\u0027s quantity in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class Quantity implements Comparable\u003cQuantity\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            \"Quantity should only contain numbers, and it should be at least 1 digit long, \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            + \"and it should be greater than or equals to 0\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANTITY_REMOVED \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            \"Quantity removed should be less than the available quantity\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_MAX_QUANTITY \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"Max Quantity should only contain numbers, it should be at least 1 digit long, \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            + \"and it should be greater than 0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String VALIDATION_REGEX_MAX_QUANTITY \u003d \"^[1-9]\\\\d*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param quantity A valid phone number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        value \u003d quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static boolean isValidMaxQuantity(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return test.matches(VALIDATION_REGEX_MAX_QUANTITY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * adds a Quantity\u0027s value to another quantity\u0027s value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param quantity another quantity"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return Quantity of both quantity\u0027s value added up"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Quantity add(Quantity quantity) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        int value \u003d Integer.parseInt(this.value) + Integer.parseInt(quantity.value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new Quantity(Integer.toString(value));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * subtracts a Quantity\u0027s value from another quantity\u0027s value"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @param quantity another quantity"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * @return Quantity after subtraction"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public Quantity subtract(Quantity quantity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        int value \u003d Integer.parseInt(this.value) - Integer.parseInt(quantity.value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Quantity(Integer.toString(value));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * divides a Quantity\u0027s value from another quantity\u0027s value"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param quantity another quantity"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return double that represents the fraction after division"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public double divideBy(Quantity quantity) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Double.parseDouble(this.value) / Double.parseDouble(quantity.value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 value.equals(((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int compareTo(Quantity quantity) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Double.compare(Double.parseDouble(value), Double.parseDouble(quantity.value));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 15,
      "xnoobftw": 36,
      "-": 37,
      "halcon-blanco": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Supplier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Represents a Item\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSupplier(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class Supplier {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Supplier can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructs an {@code Supplier}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param supplier A valid supplier."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Supplier(String supplier) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        checkArgument(isValidSupplier(supplier), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        value \u003d supplier.toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns true if a given string is a valid supplier."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static boolean isValidSupplier(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                || (other instanceof Supplier // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 value.equals(((Supplier) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 12,
      "-": 41,
      "zeranium97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents a Tag in the inventory book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "-": 51,
      "zeranium97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A item is considered unique by comparing using {@code Item#isSameItem(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * items uses Item#isSameItem(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of a item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * @see Item#isSameItem(Item)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class UniqueItemList implements Iterable\u003cItem\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public boolean contains(Item toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Adds a item to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void add(Item toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!target.isSameItem(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Combines quantity and tags of existing item with item provided"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @param toAdd item provided to combine with existing item"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return combined item"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Item addOnExistingItem(Item toAdd) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item existingItem \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            if (internalList.get(i).isSameItem(toAdd)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                existingItem \u003d internalList.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (index \u003d\u003d -1 || existingItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Name name \u003d toAdd.getName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Quantity quantity \u003d toAdd.getQuantity().add(existingItem.getQuantity());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Supplier supplier \u003d toAdd.getSupplier();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Set\u003cTag\u003e providedItemTags \u003d toAdd.getTags();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Set\u003cTag\u003e existingItemTags \u003d existingItem.getTags();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Set\u003cTag\u003e combinedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        combinedTags.addAll(providedItemTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        combinedTags.addAll(existingItemTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // four cases for maxQuantity"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // 1) if existing item have maxQuantity, toAdd item does not"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // 2) if both existing item and toAdd does not have max quantity"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // 3) if both existing item and toAdd item have maxQuantity"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // 4) if existing item does not have maxQuantity, but toAdd does"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // case 3 and 4 are handled upstream @ ItemAddCommand via throwing MESSAGE_CHANGE_MAX_ON_EXISTING_ITEM"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Only need to consider case 1 and 2"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assert toAdd.getMaxQuantity().isEmpty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Quantity maxQuantity \u003d existingItem.getMaxQuantity().orElse(null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Metric metric \u003d existingItem.getMetric().orElse(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Item toReplace \u003d new Item(name, quantity, supplier, combinedTags, maxQuantity, metric);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        internalList.set(index, toReplace);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return toReplace;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void remove(Item toRemove) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItems(UniqueItemList replacement) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ObservableList\u003cItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Iterator\u003cItem\u003e iterator() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private boolean itemsAreUnique(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                if (items.get(i).isSameItem(items.get(j))) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "xnoobftw": 90,
      "-": 89,
      "halcon-blanco": 1,
      "zeranium97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/comparator/ItemNameComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class ItemNameComparator implements Comparator\u003cItem\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int compare(Item item1, Item item2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return item1.getName().compareTo(item2.getName());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/comparator/ItemQuantityPercentageComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class ItemQuantityPercentageComparator implements Comparator\u003cItem\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public int compare(Item item1, Item item2) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Quantity quantity1 \u003d item1.getQuantity();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Quantity quantity2 \u003d item2.getQuantity();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cQuantity\u003e maxQuantity1 \u003d item1.getMaxQuantity();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cQuantity\u003e maxQuantity2 \u003d item2.getMaxQuantity();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // orElse(Double.MAX_VALUE) flushes item to the end of the list as it does not have a maxQuantity"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        double percentageQuantity1 \u003d maxQuantity1.map(maxQ -\u003e quantity1.divideBy(maxQ))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .orElse(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        double percentageQuantity2 \u003d maxQuantity2.map(maxQ -\u003e quantity2.divideBy(maxQ))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .orElse(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (percentageQuantity1 \u003c percentageQuantity2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else if (percentageQuantity1 \u003e percentageQuantity2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return quantity1.compareTo(quantity2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/DuplicateItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 5,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/predicate/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructor for NameContainsKeywordsPredicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param keywords List of keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getName().fullName, keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "zeranium97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/predicate/SupplierContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Supplier} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class SupplierContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructor for SupplierContainsKeywordsPredicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param keywords List of keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public SupplierContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getSupplier().value, keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof SupplierContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 keywords.equals(((SupplierContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/predicate/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Tags} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructor for SupplierContainsKeywordsPredicate."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param keywords List of keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        StringBuilder tags \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        for (Tag tag : item.getTags()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            tags.append(tag).append(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tags.toString(), keyword));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Contains utility methods for populating {@code InventoryBook} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static Item[] getSampleItems() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return new Item[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            new Item(new Name(\"Milk\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"5\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Supplier(\"SHENG SHIONG\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                getTagSet(\"Beverage\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"30\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Metric(\"L\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            new Item(new Name(\"Tuna\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"24\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new Supplier(\"NTUC\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                getTagSet(\"meat\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"50\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Metric(\"KG\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            new Item(new Name(\"Broccoli\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"50\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Supplier(\"NTUC\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                getTagSet(\"Vegetable\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"80\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Metric(\"KG\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            new Item(new Name(\"Chicken\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"72\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new Supplier(\"NTUC\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                getTagSet(\"meat\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Quantity(\"50\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Metric(\"KG\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static Delivery[] getSampleDeliveries() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new Delivery[]{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            new Delivery(new DeliveryName(\"Damith\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Phone(\"91231231\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new Address(\"Blk 999 Bukit Batam Jln Pondok Indah No. 55\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Order(\"1x Laksa, 1x Ice Kopi\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                Time.timeFromMinutes(\"0\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            new Delivery(new DeliveryName(\"Aileen\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Phone(\"81111111\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new Address(\"The View Orchard Apartment No. 12\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Order(\"5x Mee Goreng, 5x Prata plain\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                Time.timeFromMinutes(\"8\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            new Delivery(new DeliveryName(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new Order(\"1x Prata\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                Time.timeFromMinutes(\"30\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static ReadOnlyDeliveryBook getSampleDeliveryBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        DeliveryBook sampleDb \u003d new DeliveryBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        for (Delivery sampleDelivery : getSampleDeliveries()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            sampleDb.addDelivery(sampleDelivery);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return sampleDb;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static ReadOnlyInventoryBook getSampleInventoryBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        InventoryBook sampleAb \u003d new InventoryBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        for (Item sampleItem : getSampleItems()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            sampleAb.addItem(sampleItem);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "xnoobftw": 25,
      "Wincenttjoi": 30,
      "-": 31,
      "halcon-blanco": 2,
      "zeranium97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.delivery.DeliveryBookStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.item.InventoryBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public interface Storage extends InventoryBookStorage, UserPrefsStorage, DeliveryBookStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Path getInventoryBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void saveInventoryBook(ReadOnlyInventoryBook inventoryBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void saveDeliveryBook(ReadOnlyDeliveryBook deliveryBook) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 5,
      "-": 28,
      "zeranium97": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.delivery.DeliveryBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.item.InventoryBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Manages storage of InventoryBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private InventoryBookStorage inventoryBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private DeliveryBookStorage deliveryBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code InventoryBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public StorageManager(InventoryBookStorage inventoryBookStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                          DeliveryBookStorage deliveryBookStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.inventoryBookStorage \u003d inventoryBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.deliveryBookStorage \u003d deliveryBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventoryBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path getInventoryBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBookStorage.getInventoryBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return readInventoryBook(inventoryBookStorage.getInventoryBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook(Path filePath)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBookStorage.readInventoryBook(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveInventoryBook(ReadOnlyInventoryBook inventoryBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        saveInventoryBook(inventoryBook, inventoryBookStorage.getInventoryBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveInventoryBook(ReadOnlyInventoryBook inventoryBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        inventoryBookStorage.saveInventoryBook(inventoryBook, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliveryBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path getDeliveryBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return deliveryBookStorage.getDeliveryBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return readDeliveryBook(deliveryBookStorage.getDeliveryBookFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return deliveryBookStorage.readDeliveryBook(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveDeliveryBook(ReadOnlyDeliveryBook deliveryBook) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        saveDeliveryBook(deliveryBook, deliveryBookStorage.getDeliveryBookFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveDeliveryBook(ReadOnlyDeliveryBook deliveryBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        deliveryBookStorage.saveDeliveryBook(deliveryBook, filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 6,
      "-": 64,
      "zeranium97": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/delivery/DeliveryBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * Represents a storage for {@link DeliveryBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public interface DeliveryBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Path getDeliveryBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns DeliveryBook data as a {@link ReadOnlyDeliveryBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @see #getDeliveryBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Saves the given {@link ReadOnlyDeliveryBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param inventoryBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void saveDeliveryBook(ReadOnlyDeliveryBook inventoryBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @see #saveDeliveryBook(ReadOnlyDeliveryBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void saveDeliveryBook(ReadOnlyDeliveryBook inventoryBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 17,
      "zeranium97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/delivery/JsonAdaptedDelivery.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "/*import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.time.format.DateTimeParseException;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonAdaptedDelivery {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Delivery\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final String order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructs a {@code JsonAdaptedDelivery} with the given Delivery details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonAdaptedDelivery(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                               @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                               @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                               @JsonProperty(\"order\") String order,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                               @JsonProperty(\"time\") String endTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Converts a given {@code Delivery} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonAdaptedDelivery(Delivery source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        order \u003d source.getOrder().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        endTime \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Delivery} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted delivery."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Delivery toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                    DeliveryName.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!DeliveryName.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(DeliveryName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        final DeliveryName modelName \u003d new DeliveryName(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (order \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Order.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!Order.isValidOrder(order)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new IllegalValueException(Order.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        final Order modelOrder \u003d new Order(order);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        final Time modelTime \u003d new Time(\"0\", endTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Delivery(modelName, modelPhone, modelAddress, modelOrder, modelTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 17,
      "zeranium97": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/delivery/JsonDeliveryBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * A class to access DeliveryBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonDeliveryBookStorage implements DeliveryBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonDeliveryBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonDeliveryBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path getDeliveryBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return readDeliveryBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Similar to {@link #readDeliveryBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Optional\u003cJsonSerializableDeliveryBook\u003e jsonDeliveryBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                filePath, JsonSerializableDeliveryBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!jsonDeliveryBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return Optional.of(jsonDeliveryBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveDeliveryBook(ReadOnlyDeliveryBook deliveryBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        saveDeliveryBook(deliveryBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Similar to {@link #saveDeliveryBook(ReadOnlyDeliveryBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveDeliveryBook(ReadOnlyDeliveryBook deliveryBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(deliveryBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDeliveryBook(deliveryBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zeranium97": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/delivery/JsonSerializableDeliveryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * An Immutable DeliveryBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@JsonRootName(value \u003d \"deliverybook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonSerializableDeliveryBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final List\u003cJsonAdaptedDelivery\u003e deliveries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructs a {@code JsonSerializableDeliveryBook} with the given deliveries."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonSerializableDeliveryBook(@JsonProperty(\"deliveries\") List\u003cJsonAdaptedDelivery\u003e deliveries) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.deliveries.addAll(deliveries);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Converts a given {@code ReadOnlyDeliveryBook} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventoryBook}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonSerializableDeliveryBook(ReadOnlyDeliveryBook source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        deliveries.addAll(source.getDeliveryList().stream().map(JsonAdaptedDelivery::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Converts this delivery book into the model\u0027s {@code DeliveryBook} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public DeliveryBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryBook deliveryBook \u003d new DeliveryBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        for (JsonAdaptedDelivery jsonAdaptedDelivery : deliveries) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            Delivery delivery \u003d jsonAdaptedDelivery.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            deliveryBook.addDelivery(delivery);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return deliveryBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/item/InventoryBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Represents a storage for {@link InventoryBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public interface InventoryBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Path getInventoryBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns InventoryBook data as a {@link ReadOnlyInventoryBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @see #getInventoryBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Saves the given {@link ReadOnlyInventoryBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param inventoryBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void saveInventoryBook(ReadOnlyInventoryBook inventoryBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @see #saveInventoryBook(ReadOnlyInventoryBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    void saveInventoryBook(ReadOnlyInventoryBook inventoryBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 3,
      "zeranium97": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/item/JsonAdaptedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Jackson-friendly version of {@link Item}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "class JsonAdaptedItem {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final String supplier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private final String maxQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private final String metric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Constructs a {@code JsonAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public JsonAdaptedItem(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                           @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                           @JsonProperty(\"supplier\") String supplier,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                           @JsonProperty(\"maxQuantity\") String maxQuantity,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                           @JsonProperty(\"metric\") String metric) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.supplier \u003d supplier;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.maxQuantity \u003d maxQuantity;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.metric \u003d metric;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Converts a given {@code Item} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public JsonAdaptedItem(Item source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        quantity \u003d source.getQuantity().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        supplier \u003d source.getSupplier().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        maxQuantity \u003d source.getMaxQuantity().map(q -\u003e q.value).orElse(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        metric \u003d source.getMetric().map(m -\u003e m.value).orElse(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Item toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        final List\u003cTag\u003e itemTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            itemTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (supplier \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                    Supplier.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!Supplier.isValidSupplier(supplier)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            throw new IllegalValueException(Supplier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        final Supplier modelSupplier \u003d new Supplier(supplier);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(itemTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (maxQuantity !\u003d null \u0026\u0026 !Quantity.isValidMaxQuantity(maxQuantity)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        final Quantity modelMaxQuantity \u003d maxQuantity \u003d\u003d null ? null : new Quantity(maxQuantity);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        if (metric !\u003d null \u0026\u0026 !Metric.isValidMetric(metric)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            throw new IllegalValueException(Metric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        final Metric modelMetric \u003d metric \u003d\u003d null ? null : new Metric(metric);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Item(modelName, modelQuantity, modelSupplier, modelTags, modelMaxQuantity, modelMetric);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 13,
      "xnoobftw": 36,
      "-": 58,
      "halcon-blanco": 11,
      "zeranium97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/item/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "-": 46,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/item/JsonInventoryBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * A class to access InventoryBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonInventoryBookStorage implements InventoryBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonInventoryBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path getInventoryBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return readInventoryBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Similar to {@link #readInventoryBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Optional\u003cJsonSerializableInventoryBook\u003e jsonInventoryBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                filePath, JsonSerializableInventoryBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        if (!jsonInventoryBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return Optional.of(jsonInventoryBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveInventoryBook(ReadOnlyInventoryBook inventoryBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        saveInventoryBook(inventoryBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Similar to {@link #saveInventoryBook(ReadOnlyInventoryBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveInventoryBook(ReadOnlyInventoryBook inventoryBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(inventoryBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventoryBook(inventoryBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "zeranium97": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/item/JsonSerializableInventoryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * An Immutable InventoryBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "@JsonRootName(value \u003d \"inventorybook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "class JsonSerializableInventoryBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Items list contains duplicate item(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final List\u003cJsonAdaptedItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Constructs a {@code JsonSerializableInventoryBook} with the given items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonSerializableInventoryBook(@JsonProperty(\"items\") List\u003cJsonAdaptedItem\u003e items) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.items.addAll(items);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Converts a given {@code ReadOnlyInventoryBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventoryBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public JsonSerializableInventoryBook(ReadOnlyInventoryBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        items.addAll(source.getItemList().stream().map(JsonAdaptedItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Converts this inventory book into the model\u0027s {@code InventoryBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public InventoryBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        InventoryBook inventoryBook \u003d new InventoryBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        for (JsonAdaptedItem jsonAdaptedItem : items) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Item item \u003d jsonAdaptedItem.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            if (inventoryBook.hasItem(item)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            inventoryBook.addItem(item);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 10,
      "-": 34,
      "zeranium97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.history.History;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.history.HistoryManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.history.exception.HistoryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final int COMMAND_HISTORY_LIMIT \u003d 20;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private final History history;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Button submitCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        history \u003d makeCommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e handleHistoryNavigation(event));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Makes a {@code HistoryManager} object with COMMAND_HISTORY_LIMIT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @return {@code HistoryManager} object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see seedu.address.ui.CommandBox#COMMAND_HISTORY_LIMIT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private HistoryManager makeCommandHistory() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager tempHistory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            tempHistory \u003d new HistoryManager(COMMAND_HISTORY_LIMIT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (HistoryException historyException) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            tempHistory \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            System.err.println(historyException);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return tempHistory;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        history.addToHistory(commandTextField.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Handles the Up/Down button pressed event."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private void handleHistoryNavigation(KeyEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        switch (event.getCode()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            commandTextField.setText(history.previousCommand().orElse(\"\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            commandTextField.setText(history.nextCommand().orElse(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 7,
      "Wincenttjoi": 5,
      "-": 81,
      "halcon-blanco": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliveryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * An UI component that displays information of a {@code Item}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DeliveryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String FXML \u003d \"DeliveryListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public final Delivery delivery;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Label order;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private Text time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Creates a {@code ItemCode} with the given {@code Item} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DeliveryCard(Delivery delivery, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.delivery \u003d delivery;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        name.setText(delivery.getName().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        phone.setText(delivery.getPhone().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        address.setText(delivery.getAddress().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        order.setText(delivery.getOrder().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        time.setText(delivery.getTime().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        endTime \u003d delivery.getEndTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        initializeDeliveryCountdown();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (!(other instanceof DeliveryCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        //TODO: Update this in the future"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryCard card \u003d (DeliveryCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return card \u003d\u003d other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Initializes the local date time."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private void initializeDeliveryCountdown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Timeline clock \u003d new Timeline(new KeyFrame(Duration.ZERO, e -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            LocalDateTime tempDateTime \u003d LocalDateTime.from(currentTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            long minutes \u003d tempDateTime.until(endTime, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            tempDateTime \u003d tempDateTime.plusMinutes(minutes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            long seconds \u003d tempDateTime.until(endTime, ChronoUnit.SECONDS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            if ((minutes \u003c 0 || seconds \u003c 0)) { // OVERDUE BY: XXmin XXsec (in red)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                String timeString \u003d \"OVERDUE BY: \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + (minutes \u003c 0 ? (-1 * minutes) : minutes)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + \"min \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + (seconds \u003c 0 ? (-1 * seconds) : seconds)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + \"sec\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                time.setText(timeString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                time.setFill(Color.web(\"#f24e6c\")); // light red"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            } else { // DELIVER BY: XXmin XXsec (in green)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                String timeString \u003d \"DELIVER BY: \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + minutes"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + \"min \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + seconds"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                                    + \"sec\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                time.setText(timeString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                if (minutes \u003c 10) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                    time.setFill(Color.ORANGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                    time.setFill(Color.LIGHTGREEN);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        }), new KeyFrame(Duration.seconds(1)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        clock.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        clock.play();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 57,
      "halcon-blanco": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliveryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Panel containing the list of deliveries."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DeliveryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String FXML \u003d \"DeliveryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliveryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private ListView\u003cDelivery\u003e deliveryListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Creates a {@code DeliveryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DeliveryListPanel(ObservableList\u003cDelivery\u003e deliveryList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryListView.setItems(deliveryList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryListView.setCellFactory(listView -\u003e new DeliveryListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    class DeliveryListViewCell extends ListCell\u003cDelivery\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        protected void updateItem(Delivery delivery, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            super.updateItem(delivery, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (empty || delivery \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                setGraphic(new DeliveryCard(delivery, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"https://github.com/AY2021S1-CS2103T-T12-1/tp/blob/master/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Label helpHeader;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Label userGuideLink;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private TextArea helpText;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the content of the {@code TextArea} to {@code text}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param text the content to be set."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String[] headerAndText \u003d text.split(\"\\n\", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        helpHeader.setText(headerAndText[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        userGuideLink.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        helpText.setText(headerAndText[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 19,
      "-": 99,
      "halcon-blanco": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * An UI component that displays information of a {@code Item}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class ItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String FXML \u003d \"ItemListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Text quantityStats;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private Label supplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Creates a {@code ItemCode} with the given {@code Item} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ItemCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String itemQuantity \u003d item.getQuantity().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Optional\u003cString\u003e itemMaxQuantity \u003d item.getMaxQuantity().map(q -\u003e q.value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Optional\u003cString\u003e itemMetric \u003d item.getMetric().map(m -\u003e m.value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        name.setText(item.getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        quantity.setText(itemQuantity);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (itemMaxQuantity.isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            String maxQuantity \u003d itemMaxQuantity.get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            float percentage \u003d Float.parseFloat(itemQuantity) / Integer.parseInt(maxQuantity) * 100;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            if (itemMetric.isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                String met \u003d itemMetric.get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                String statsWithMetric \u003d String.format(\"/%s %s (%.01f%%)\", maxQuantity, met, percentage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                quantityStats.setText(statsWithMetric);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                String stats \u003d String.format(\"/%s (%.01f%%)\", maxQuantity, percentage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                quantityStats.setText(stats);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            if (percentage \u003e 100) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                quantityStats.setFill(Color.LIGHTSKYBLUE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            } else if (percentage \u003e 20) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                quantityStats.setFill(Color.LIGHTGREEN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            } else if (percentage \u003c\u003d 20) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                quantityStats.setFill(Color.web(\"#f24e6c\")); // light red"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            if (itemMetric.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                String met \u003d itemMetric.get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                String quantityWithMetric \u003d String.format(\"%s %s\", itemQuantity, met);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                quantity.setText(quantityWithMetric);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        supplier.setText(item.getSupplier().value);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        item.getTags().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ItemCard card \u003d (ItemCard) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 19,
      "xnoobftw": 16,
      "Wincenttjoi": 4,
      "-": 57,
      "halcon-blanco": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class ItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItemListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private ListView\u003cItem\u003e itemListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Creates a {@code ItemListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ItemListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 16,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_START;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_SUMMARY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_HELP_ON_START;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static final String TITLE \u003d \"OneShelf\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private ItemListPanel itemListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryListPanel deliveryListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private PreviewWindow previewWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private MenuItem startHelpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private MenuItem summaryHelpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private StackPane itemListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private StackPane deliveryListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        primaryStage.setTitle(TITLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        previewWindow \u003d new PreviewWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        setAccelerator(startHelpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        setAccelerator(summaryHelpMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        itemListPanel \u003d new ItemListPanel(logic.getFilteredAndSortedItemList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        itemListPanelPlaceholder.getChildren().add(itemListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        resultDisplay.setFeedbackToUser(MESSAGE_HELP_ON_START);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        deliveryListPanel \u003d new DeliveryListPanel(logic.getFilteredAndSortedDeliveryList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryListPanelPlaceholder.getChildren().add(deliveryListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets up the start help window page and opens it or focuses on it if it\u0027s already opened"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void handleHelpStart() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        helpWindow.setText(HELP_START);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets up the summary help window page and opens it or focuses on it if it\u0027s already opened"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void handleHelpSummary() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        previewWindow.setPreviewText(HELP_SUMMARY);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        handlePreview();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private void handlePreview() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        if (!previewWindow.isShowing()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            previewWindow.show();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            previewWindow.focus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        previewWindow.hide();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ItemListPanel getItemListPanel() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return itemListPanel;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                HelpCommandResult helpCommandResult \u003d (HelpCommandResult) commandResult;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                helpWindow.setText(helpCommandResult.getPopUpContent());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            if (commandResult.isShowPreview()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                HelpCommandResult helpCommandResult \u003d (HelpCommandResult) commandResult;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                previewWindow.setPreviewText(helpCommandResult.getPopUpContent());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                handlePreview();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 1,
      "xnoobftw": 6,
      "Wincenttjoi": 28,
      "-": 184,
      "halcon-blanco": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PreviewWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Controller for a preview page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class PreviewWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PreviewWindow.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static final String FXML \u003d \"PreviewWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Label previewHeader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private TextArea previewText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Creates a new PreviewWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param root Stage to use as the root of the PreviewWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public PreviewWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Creates a new PreviewWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public PreviewWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setPreviewText(String text) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String[] headerAndText \u003d text.split(\"\\n\", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        previewHeader.setText(headerAndText[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        previewText.setText(headerAndText[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Shows the preview window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        logger.fine(\"Showing resume preview page.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Returns true if the preview window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Hides the preview window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Focuses on the preview window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Label saveDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Pair\u003cString, LocalDateTime\u003e displayString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.displayString \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the display text on status footer. Default display time of 3 seconds"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * @param display the displayed text."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDisplayString(String display) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author tanweijie123-reused"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setDisplayString(display, 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the display text on status footer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param display the displayed text."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param seconds the amount of seconds to display"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDisplayString(String display, int seconds) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayString \u003d new Pair\u003c\u003e(display, LocalDateTime.now().plusSeconds(seconds));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the local date time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //Solution below adapted from: https://stackoverflow.com/questions/42383857/javafx-live-time-and-date/42384436"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Timeline clock \u003d new Timeline(new KeyFrame(Duration.ZERO, e -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            checkDisplayValidity();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (displayString \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                saveDateTime.setText(currentTime.format(DateTimeFormatter.ofPattern(\"dd MMMM yyyy HH:mm:ss\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                saveDateTime.setText(currentTime.format(DateTimeFormatter.ofPattern(\"dd MMMM yyyy HH:mm:ss\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \" - \" + displayString.getKey());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }), new KeyFrame(Duration.seconds(1)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        clock.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        clock.play();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void checkDisplayValidity() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (displayString !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            if (displayString.getValue().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                displayString \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 20,
      "-": 63
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003cHBox styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  \u003cButton fx:id\u003d\"submitCommand\" onAction\u003d\"#handleCommandEntered\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "          prefHeight\u003d\"40\" minHeight\u003d\"40\" layoutX\u003d\"500\" StackPane.alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    Send\u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 5,
      "-": 6,
      "halcon-blanco": 4
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "#filterField, #itemListPanel, #itemWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "#quantity {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ".popUpBox {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-background-color: linear-gradient(to bottom right, #212c34, #434e56);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ".popUpHeader {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-font-size: 22pt;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ".popUpText {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-control-inner-background: #434e56;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-focus-color: -fx-control-inner-background ;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-faint-focus-color: -fx-control-inner-background ;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-border-insets: 5px;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    -fx-background-insets: 5px;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "Wincenttjoi": 21,
      "-": 351,
      "halcon-blanco": 4
    }
  },
  {
    "path": "src/main/resources/view/DeliveryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                   \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Phone: \" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                   \u003cLabel fx:id\u003d\"phone\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                   \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                   \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Address: \" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                   \u003cLabel fx:id\u003d\"address\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                   \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cLabel fx:id\u003d\"order\" layoutX\u003d\"25.0\" layoutY\u003d\"72.0\" text\u003d\"\\$order\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                    \u003cLabel styleClass\u003d\"cell_small_label\" style\u003d\"-fx-font-weight: bold;\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                            \u003cText fx:id\u003d\"time\" fill\u003d\"WHITE\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 16,
      "halcon-blanco": 59,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/resources/view/DeliveryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    \u003cListView fx:id\u003d\"deliveryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 8,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        \u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cfx:root minHeight\u003d\"740\" minWidth\u003d\"1080\" title\u003d\"Help User Guide\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            \u003cVBox fx:id\u003d\"HelpBox\" styleClass\u003d\"popUpBox\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003cLabel fx:id\u003d\"helpHeader\" styleClass\u003d\"popUpHeader\" text\u003d\"Header\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        \u003cLabel fx:id\u003d\"userGuideLink\" styleClass\u003d\"popUpText\" text\u003d\"Link\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" styleClass\u003d\"button\" text\u003d\"Copy\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003cTextArea fx:id\u003d\"helpText\" editable\u003d\"false\" layoutX\u003d\"10\" layoutY\u003d\"30\" styleClass\u003d\"popUpText\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 23,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/ItemListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "       \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Quantity: \" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "          \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "             \u003cLabel style\u003d\"-fx-font-weight: bold;\" styleClass\u003d\"cell_small_label\" text\u003d\"\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                   \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                     \u003cText fx:id\u003d\"quantityStats\" fill\u003d\"WHITE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "             \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "       \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "         \u003cTextFlow layoutX\u003d\"25.0\" layoutY\u003d\"54.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Supplier: \" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            \u003cLabel fx:id\u003d\"supplier\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$supplier\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 2,
      "-": 29,
      "halcon-blanco": 29
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "Wincenttjoi": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003cfx:root minHeight\u003d\"740\" minWidth\u003d\"1080\" onCloseRequest\u003d\"#handleExit\" title\u003d\"OneShelf\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"startHelpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelpStart\" text\u003d\"Start\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"summaryHelpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelpSummary\" text\u003d\"Summary\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003cHBox minHeight\u003d\"-Infinity\" prefHeight\u003d\"440.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cVBox fx:id\u003d\"itemList\" minWidth\u003d\"400\" prefWidth\u003d\"400\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "              \u003cStackPane fx:id\u003d\"itemListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cVBox fx:id\u003d\"deliveryList\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"440.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "              \u003cStackPane fx:id\u003d\"deliveryListPanelPlaceholder\" prefHeight\u003d\"440.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c!--          For some reason, there was a 1px padding of the HBox from the VBox, even with the padding set to 0. So a --\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "\u003c!--          -1 margin was needed to remove it--\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cInsets right\u003d\"-1.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"150.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "Wincenttjoi": 5,
      "-": 48,
      "halcon-blanco": 23,
      "zeranium97": 1
    }
  },
  {
    "path": "src/main/resources/view/PreviewWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cfx:root title\u003d\"Help Summary\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"740\" minWidth\u003d\"1080\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            \u003cVBox styleClass\u003d\"popUpBox\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003cLabel fx:id\u003d\"previewHeader\" styleClass\u003d\"popUpHeader\" text\u003d\"Resume\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003cTextArea fx:id\u003d\"previewText\" styleClass\u003d\"popUpText\" layoutX\u003d\"10\" layoutY\u003d\"30\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                          editable\u003d\"false\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 26
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveDateTime\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/data/JsonDeliveryBookStorageTest/invalidAndValidDeliveryDeliveryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"deliveries\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Valid Delivery\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\": \"94824243\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\": \"Blk 30 Geylang Street 29, #06-40\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"order\": \"2x Chicken Rice, 1x Ice Milo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Delivery With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\": \"Blk 30 Geylang Street 29, #06-40\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"order\": \"2x Chicken Rice, 1x Ice Milo\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 13
    }
  },
  {
    "path": "src/test/data/JsonDeliveryBookStorageTest/invalidDeliveryDeliveryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"deliveries\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Delivery with invalid name field: R@chel\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\": \"99272758\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\": \"Blk 30 Lorong 3 Serangoon Gardens, #07-18\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"order\" : \"2x Duck Rice, 1x Ayutaka Green Tea\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 8
    }
  },
  {
    "path": "src/test/data/JsonInventoryBookStorageTest/invalidAndValidItemInventoryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"items\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Valid Item\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"quantity\": \"12\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"supplier\": \"NTUC\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Person With Invalid Quantity Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\": \"39sdfa\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"supplier\": \"NTUC\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 11
    }
  },
  {
    "path": "src/test/data/JsonInventoryBookStorageTest/invalidItemInventoryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"items\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Item with invalid name field: L@mb\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"quantity\": \"23\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"supplier\": \"NTUC\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableDeliveryBookTest/duplicateDeliveryDeliveryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"deliveries\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\" : \"ALEX YEOH\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\" : \"87438807\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\" : \"Blk 30 Geylang Street 29, #06-40\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"order\" : \"2x Chicken Rice, 1x Ice Milo\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"endTime\" : \"28 October 2020 00:27:56\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\" : \"ALEX YEOH\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\" : \"87438807\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\" : \"Blk 30 Geylang Street 29, #06-40\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"order\" : \"2x Chicken Rice, 1x Ice Milo\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"endTime\" : \"28 October 2020 00:27:56\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 4,
      "zeranium97": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableDeliveryBookTest/invalidDeliveryDeliveryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"deliveries\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Delivery with invalid name field: R@chel\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\": \"asd99272758\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\": \"Blk 30 Lorong 3 Serangoon Gardens, #07-18\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"order\" : \" \","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"endTime\" : \"28 October 2020 00:27:56\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "zeranium97": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableDeliveryBookTest/typicalDeliveryDeliveryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"_comment\": \"DeliveryBook save file which contains the same Item values as in TypicalDelivery#TypicalDeliverBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"deliveries\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\" : \"Kelvin\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\" : \"91234332\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\" : \"Clementi Blk 235 #11-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"order\" : \"Char Kway Teow\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"endTime\" : \"28 October 2020 00:27:56\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\" : \"Marcus\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"phone\" : \"8198264\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"address\" : \"Jurong Blk 231 #15-123\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"order\" : \"Seafood Hor Fun x5\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    \"endTime\" : \"28 October 2020 00:27:56\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 4,
      "zeranium97": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableInventoryBookTest/duplicateItemInventoryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"items\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\" : \"CHICKEN\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"quantity\" : \"24\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"supplier\" : \"NTUC\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"tagged\" : [\"meat\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\": \"Chicken\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"quantity\": \"12\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"supplier\": \"NTUC\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableInventoryBookTest/invalidItemInventoryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"items\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"name\" : \"CHICKEN\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"quantity\" : \"+24\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"supplier\" : \"@NTUC\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    \"tagged\" : [\"meat\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableInventoryBookTest/typicalItemInventoryBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Item values as in TypicalItem#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  \"items\" : ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"name\" : \"Duck\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"quantity\" : \"33\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "      \"maxQuantity\" : \"500\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"supplier\" : \"Cold Storage\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"tagged\" : [\"meat\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"name\" : \"Pork\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"quantity\" : \"2\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"supplier\" : \"Sheng Siong\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"tagged\" : [\"meat\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"name\" : \"Broccoli\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"quantity\" : \"3\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"supplier\" : \"Sheng Siong\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"tagged\" : [\"vegetable\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"name\" : \"Salmon\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"quantity\" : \"5\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"supplier\" : \"No Supplier\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"tagged\" : [\"fish\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"name\" : \"Crab\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"quantity\" : \"7\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"supplier\" : \"NTUC\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"tagged\" : [\"seafood\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"name\" : \"Chicken\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"quantity\" : \"12\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"supplier\" : \"Giant\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"tagged\" : [\"meat\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    },{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"name\" : \"Beef\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"quantity\" : \"41\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "      \"supplier\" : \"No Supplier\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "      \"tagged\" : [\"meat\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 1,
      "xnoobftw": 19,
      "zeranium97": 22
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"inventoryBookFilePath\" : \"inventorybook.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "  \"inventoryBookFilePath\" : \"inventorybook.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        final Index fifthItemIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(fifthItemIndex.equals(fifthItemIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(fifthItemIndex.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(fifthItemIndex.equals(5.0f));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(fifthItemIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 7,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/history/HistoryManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.history.exception.HistoryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class HistoryManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void constructorInvalidLengthLimit_throwsHistoryException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // instantiating with a negative limit -\u003e throws HistoryException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(HistoryException.class, () -\u003e new HistoryManager(-1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // instantiating with a limit of 0 -\u003e throws HistoryException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(HistoryException.class, () -\u003e new HistoryManager(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void nextCommandThenPreviousCommandThenNextCommand() throws HistoryException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalFirstCommand \u003d Optional.of(firstCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalSecondCommand \u003d Optional.of(secondCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cOne \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cTwo \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cThree \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PRIOR TO ADDING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding firstCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding secondCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING TO HISTORY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne has limit of 1, thus there is no nextCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.nextCommand());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.nextCommand());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.nextCommand());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x NEXT COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cThree should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne has limit of 1, thus there is no previousCommand"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.nextCommand());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.nextCommand());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.nextCommand());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x NEXT COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void previousCommandThenPreviousCommandThenNextCommandThenPreviousCommand() throws HistoryException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalFirstCommand \u003d Optional.of(firstCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalSecondCommand \u003d Optional.of(secondCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cOne \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cTwo \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cThree \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PRIOR TO ADDING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {};"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d -1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {};"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d -1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d -1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding firstCommand"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding secondCommand"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING TO HISTORY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cThree should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be firstCommand as it\u0027s not the first time we are applying previousCommand"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cThree should be firstCommand as it\u0027s not the first time we are applying previousCommand"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 0;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.nextCommand());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // next Item in both cTwo and cThree should be secondCommand"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cTwo.nextCommand());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cThree.nextCommand());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x NEXT COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be firstCommand as it\u0027s not the first time"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cThree should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void previousCommandThenNextCommandThenPreviousCommand() throws HistoryException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalSecondCommand \u003d Optional.of(secondCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cOne \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cTwo \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cThree \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PRIOR TO ADDING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {};"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d -1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {};"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d -1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {};"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d -1;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding firstCommand"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding secondCommand"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING TO HISTORY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cThree should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne has limit of 1, thus there is no nextCommand"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.nextCommand());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.nextCommand());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.nextCommand());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x NEXT COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cThree should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void previousCommand() throws HistoryException {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalFirstCommand \u003d Optional.of(firstCommand);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalSecondCommand \u003d Optional.of(secondCommand);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cOne \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cTwo \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cThree \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PRIOR TO ADDING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {};"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d -1;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {};"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d -1;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {};"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d -1;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since cOne is empty, there is no previousCommand"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.previousCommand());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since cTwo is empty, there is no previousCommand"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.previousCommand());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since cThree is empty, there is no previousCommand"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.previousCommand());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding firstCommand"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING FIRST COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {firstCommand};"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand};"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 0;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand};"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 0;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding secondCommand"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING SECOND COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cThree should be secondCommand as it\u0027s the first time"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // we are applying previousCommand after addingToHistory"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // if only command in history, return that command"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be firstCommand as it\u0027s not the first time we\u0027re prompting previousCommand"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // previous command of cTwo should be firstCommand as it\u0027s not the first time we\u0027re prompting previousCommand"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 0;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 0;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentIndex is 0, return secondCommand for cOne"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.previousCommand());"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentIndex is 0, return firstCommand for cTwo"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cTwo.previousCommand());"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentIndex is 0, return firstCommand for cThree"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cThree.previousCommand());"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void nextCommand() throws HistoryException {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cOne \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cTwo \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cThree \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PRIOR TO ADDING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {};"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d -1;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {};"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d -1;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {};"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d -1;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since cOne is empty, there is no nextCommand"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.nextCommand());"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since cTwo is empty, there is no nextCommand"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.nextCommand());"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since cThree is empty, there is no nextCommand"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.nextCommand());"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding firstCommand"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding secondCommand"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING TO HISTORY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne has limit of 1, thus there is no nextCommand"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.nextCommand());"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.nextCommand());"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.nextCommand());"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x NEXT COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.nextCommand());"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since currentCommandIndex is at the end, there is no nextCommand"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.nextCommand());"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void currentCommand() throws HistoryException {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalFirstCommand \u003d Optional.of(firstCommand);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalSecondCommand \u003d Optional.of(secondCommand);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cOne \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cTwo \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cThree \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PRIOR TO ADDING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {};"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d -1;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {};"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d -1;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {};"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d -1;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cOne.currentCommand());"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cTwo.currentCommand());"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Optional.empty(), cThree.currentCommand());"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding firstCommand"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING FIRST COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {firstCommand};"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand};"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 0;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand};"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 0;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cOne.currentCommand());"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cTwo.currentCommand());"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFirstCommand, cThree.currentCommand());"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Adding secondCommand"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cOne.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cTwo.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING SECOND COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne \u003d {secondCommand};"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cOne Current index \u003d 0;"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cTwo Current index \u003d 1;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand};"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cOne.currentCommand());"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cTwo.currentCommand());"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalSecondCommand, cThree.currentCommand());"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addToHistory() throws HistoryException {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String thirdCommand \u003d \"ThirdCommand\";"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cIsLimitReached \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cIsLimitReached.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cIsLimitReached.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // c \u003d\u003d {secondCommand};"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // c Current index \u003d 0;"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // when overflow, addToHistory should pop firstCommand, thus size() \u003d\u003d 1"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(cIsLimitReached.getCommandHistory().size(), 1);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since length limit is 1, the only item left inside commandHistory should be secondCommand"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(cIsLimitReached.getCommandHistory().get(0), secondCommand);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ONE MORE TIME FOR GOOD MEASURE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cIsLimitReached.addToHistory(thirdCommand);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // c \u003d {thirdCommand}"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // when overflow, addToHistory should now pop secondCommand, thus size() \u003d\u003d 1"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(1, cIsLimitReached.getCommandHistory().size());"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // since length limit is 1, the only item left inside commandHistory should be thirdCommand"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(thirdCommand, cIsLimitReached.getCommandHistory().get(0));"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void overwrite_existing_commandHistory() throws HistoryException {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String firstCommand \u003d \"FirstCommand\";"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String secondCommand \u003d \"SecondCommand\";"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String thirdCommand \u003d \"ThirdCommand\";"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String fourthCommand \u003d \"FourthCommand\";"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager cThree \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Optional\u003cString\u003e optionalFourthCommand \u003d Optional.of(fourthCommand);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(firstCommand);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(secondCommand);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(thirdCommand);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING TO HISTORY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand, thirdCommand};"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 2;"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.previousCommand();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER 1x PREVIOUS COMMAND \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand, thirdCommand};"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 1;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        cThree.addToHistory(fourthCommand);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AFTER ADDING TO HISTORY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree \u003d {firstCommand, secondCommand, fourthCommand};"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // cThree Current index \u003d 2;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(optionalFourthCommand, cThree.currentCommand());"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void equals() throws HistoryException {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager emptyHistoryManager \u003d new HistoryManager(10);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager emptyHistoryManagerCopy \u003d emptyHistoryManager;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager otherEmptyHistoryManagerButSame \u003d new HistoryManager(10);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager differentEmptyHistoryManager \u003d new HistoryManager(20);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager filledHistoryManager \u003d new HistoryManager(10);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        filledHistoryManager.addToHistory(\"PLACEHOLDER\");"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager filledHistoryManagerCopy \u003d filledHistoryManager;"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager sameFilledHistoryManager \u003d new HistoryManager(10);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        sameFilledHistoryManager.addToHistory(\"PLACEHOLDER\");"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        HistoryManager differentFilledHistoryManager \u003d new HistoryManager(10);"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        differentFilledHistoryManager.addToHistory(\"DIFFERENT\");"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(emptyHistoryManager.equals(emptyHistoryManagerCopy));"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(filledHistoryManager.equals(filledHistoryManagerCopy));"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same variable fields -\u003e returns true"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(emptyHistoryManager.equals(otherEmptyHistoryManagerButSame));"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(emptyHistoryManager.equals(null));"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different command history -\u003e returns false"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(emptyHistoryManager.equals(differentEmptyHistoryManager));"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // empty !\u003d filled command history -\u003e returns false"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(emptyHistoryManager.equals(filledHistoryManager));"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // differently filled -\u003e returns false"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(filledHistoryManager.equals(differentFilledHistoryManager));"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same fields -\u003e returns true"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(filledHistoryManager.equals(sameFilledHistoryManager));"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 731
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_QUANTITY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.METRIC_DESC_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_CHICKEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPLIER_DESC_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_METRIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.CHICKEN_MANUAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.delivery.JsonDeliveryBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.item.JsonInventoryBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private DeliveryModel deliveryModel \u003d new DeliveryModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonInventoryBookStorage inventoryBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new JsonInventoryBookStorage(temporaryFolder.resolve(\"inventoryBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonDeliveryBookStorage deliveryBookStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new JsonDeliveryBookStorage(temporaryFolder.resolve(\"deliveryBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(inventoryBookStorage, deliveryBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        logic \u003d new LogicManager(inventoryModel, deliveryModel, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String deleteCommand \u003d \"delete-i 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String listCommand \u003d ItemListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(listCommand, ItemListCommand.MESSAGE_SUCCESS, inventoryModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Setup LogicManager with JsonInventoryBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        JsonInventoryBookStorage inventoryBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            new JsonInventoryBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionInventoryBook.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonDeliveryBookStorage deliveryBookStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new JsonDeliveryBookStorage(temporaryFolder.resolve(\"deliveryBook.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(inventoryBookStorage, deliveryBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        logic \u003d new LogicManager(inventoryModel, deliveryModel, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String addCommand \u003d ItemAddCommand.COMMAND_WORD + NAME_DESC_CHICKEN + QUANTITY_DESC_CHICKEN"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                + SUPPLIER_DESC_CHICKEN + MAX_QUANTITY_DESC + METRIC_DESC_CHICKEN;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder(CHICKEN_MANUAL)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .withTags()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .withMaxQuantity(VALID_MAX_QUANTITY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .withMetric(VALID_METRIC).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModelManager expectedModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedModel.addItem(expectedItem);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void getFilteredItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAndSortedItemList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, InventoryModel)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            InventoryModel expectedInventoryModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedInventoryModel, inventoryModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, InventoryModel)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, InventoryModel)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, InventoryModel)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(inventoryModel.getInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * @see #assertCommandSuccess(String, String, InventoryModel)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            String expectedMessage, InventoryModel expectedInventoryModel) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedInventoryModel, inventoryModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static class JsonInventoryBookIoExceptionThrowingStub extends JsonInventoryBookStorage {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        private JsonInventoryBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void saveInventoryBook(ReadOnlyInventoryBook inventoryBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 7,
      "xnoobftw": 39,
      "Wincenttjoi": 1,
      "-": 112,
      "halcon-blanco": 6,
      "zeranium97": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different previewHelp value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 10,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_METRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryEditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.DeliveryNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.EditDeliveryDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    INVENTORY ITEM"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_NAME_CHICKEN \u003d \"Chicken\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_NAME_DUCK \u003d \"Duck\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_QUANTITY_CHICKEN \u003d \"11111111\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_QUANTITY_DUCK \u003d \"22222222\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String VALID_SUPPLIER_CHICKEN \u003d \"GIANT\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_SUPPLIER_DUCK \u003d \"Sheng Siong\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_TAG_DUCK \u003d \"meat\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_TAG_CHICKEN \u003d \"poultry\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_MAX_QUANTITY \u003d \"500\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_MAX_QUANTITY_CHICKEN \u003d \"50\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String VALID_MAX_QUANTITY_DUCK \u003d \"30\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String VALID_METRIC \u003d \"kg\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String NAME_DESC_CHICKEN \u003d \" \" + PREFIX_NAME + VALID_NAME_CHICKEN;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String NAME_DESC_DUCK \u003d \" \" + PREFIX_NAME + VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String QUANTITY_DESC_CHICKEN \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_CHICKEN;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String QUANTITY_DESC_DUCK \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String SUPPLIER_DESC_CHICKEN \u003d \" \" + PREFIX_SUPPLIER + VALID_SUPPLIER_CHICKEN;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String SUPPLIER_DESC_DUCK \u003d \" \" + PREFIX_SUPPLIER + VALID_SUPPLIER_DUCK;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String TAG_DESC_CHICKEN \u003d \" \" + PREFIX_TAG + VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String TAG_DESC_DUCK \u003d \" \" + PREFIX_TAG + VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MAX_QUANTITY_DESC \u003d \" \" + PREFIX_MAX_QUANTITY + VALID_MAX_QUANTITY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MAX_QUANTITY_DESC_CHICKEN \u003d \" \" + PREFIX_MAX_QUANTITY + VALID_MAX_QUANTITY_CHICKEN;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String MAX_QUANTITY_DESC_DUCK \u003d \" \" + PREFIX_MAX_QUANTITY + VALID_MAX_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String METRIC_DESC_CHICKEN \u003d \" \" + PREFIX_METRIC + VALID_METRIC;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String METRIC_DESC_DUCK \u003d \" \" + PREFIX_METRIC + VALID_METRIC;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Salt\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"911a\"; // \u0027a\u0027 not allowed in quantity"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String INVALID_SUPPLIER_DESC \u003d \" \" + PREFIX_SUPPLIER; // empty string not allowed for suppliers"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"liquids*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String INVALID_MAX_QUANTITY_DESC \u003d \" \" + PREFIX_MAX_QUANTITY + \"-30\"; // neg num not allowed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String INVALID_METRIC \u003d \" \" + PREFIX_METRIC + \"kgs*\"; // \u0027*\u0027 not allowed in metric"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final ItemEditCommand.EditItemDescriptor DESC_CHICKEN;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final ItemEditCommand.EditItemDescriptor DESC_DUCK;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        DESC_CHICKEN \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_CHICKEN)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(VALID_QUANTITY_CHICKEN).withSupplier(VALID_SUPPLIER_CHICKEN)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        DESC_DUCK \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_DUCK)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(VALID_QUANTITY_DUCK).withSupplier(VALID_SUPPLIER_DUCK)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withTags(VALID_TAG_DUCK, VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    DELIVERY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_NAME_DAMITH \u003d \"DAMITH\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_NAME_AARON \u003d \"AARON\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_PHONE_DAMITH \u003d \"91231231\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_PHONE_AARON \u003d \"92323232\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_ADDRESS_DAMITH \u003d \"Jl Burong Kechil Tanjong Pajar No 92\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_ADDRESS_AARON \u003d \"Jl Koro koro kuru kuru Blk 251\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_ORDER_DAMITH \u003d \"Chicken rice 1x, not spicy\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String VALID_ORDER_AARON \u003d \"Iced Kopi x2, Prata plain x3\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String VALID_TIME_AARON \u003d \"0\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String VALID_TIME_DAMITH \u003d \"0\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String NAME_DESC_DAMITH \u003d \" \" + PREFIX_NAME + VALID_NAME_DAMITH;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String NAME_DESC_AARON \u003d \" \" + PREFIX_NAME + VALID_NAME_AARON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String PHONE_DESC_DAMITH \u003d \" \" + PREFIX_PHONE + VALID_PHONE_DAMITH;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String PHONE_DESC_AARON \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AARON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String ADDRESS_DESC_DAMITH \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_DAMITH;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String ADDRESS_DESC_AARON \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AARON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String ORDER_DESC_DAMITH \u003d \" \" + PREFIX_ORDER + VALID_ORDER_DAMITH;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static final String ORDER_DESC_AARON \u003d \" \" + PREFIX_ORDER + VALID_ORDER_AARON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String TIME_DESC_AARON \u003d \" \" + PREFIX_TIME + VALID_TIME_AARON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String TIME_DESC_DAMITH \u003d \" \" + PREFIX_TIME + VALID_TIME_DAMITH;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String INVALID_DELIVERYNAME_DESC \u003d \" \" + PREFIX_NAME + \"Salt\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phone"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for address"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final String INVALID_ORDER_DESC \u003d \" \" + PREFIX_ORDER; // empty string not allowed for orders"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String INVALID_TIME \u003d \" \" + PREFIX_TIME;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final DeliveryEditCommand.EditDeliveryDescriptor DESC_AARON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final DeliveryEditCommand.EditDeliveryDescriptor DESC_DAMITH;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DESC_AARON \u003d new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withAddress(VALID_ADDRESS_AARON)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withOrder(VALID_ORDER_AARON)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DESC_DAMITH \u003d new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withName(VALID_NAME_DAMITH)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withPhone(VALID_PHONE_DAMITH)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withAddress(VALID_ADDRESS_DAMITH)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withOrder(VALID_ORDER_DAMITH)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static void assertCommandSuccess(Command command, InventoryModel actualInventoryModel,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                                            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                                            InventoryModel expectedInventoryModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Models models \u003d new ModelsManager(actualInventoryModel, new DeliveryModelManager());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            CommandResult result \u003d command.execute(models);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            assertEquals(expectedInventoryModel, actualInventoryModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static void assertCommandSuccess(Command command, DeliveryModel actualDeliveryModel,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                                            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                                            DeliveryModel expectedDeliveryModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Models models \u003d new ModelsManager(new InventoryModelManager(), actualDeliveryModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            CommandResult result \u003d command.execute(models);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            assertEquals(expectedDeliveryModel, actualDeliveryModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, InventoryModel, CommandResult, InventoryModel)}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static void assertCommandSuccess(Command command, InventoryModel actualInventoryModel,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                                            InventoryModel expectedInventoryModel) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(command, actualInventoryModel, expectedCommandResult, expectedInventoryModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, DeliveryModel, CommandResult, DeliveryModel)}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static void assertCommandSuccess(Command command, DeliveryModel actualDeliveryModel,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                                            DeliveryModel expectedDeliveryModel) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(command, actualDeliveryModel, expectedCommandResult, expectedDeliveryModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * - the {@code actualModels} matches {@code expectedModels}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static void assertCommandSuccess(Command command, Models actualModels,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                                            CommandResult expectedCommandResult, Models expectedModels) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            CommandResult result \u003d command.execute(actualModels);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            assertEquals(expectedModels, actualModels);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Models, CommandResult, Models)}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static void assertCommandSuccess(Command command, Models actualModels,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                                            Models expectedModels) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(command, actualModels, expectedCommandResult, expectedModels);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * - the inventory book, filtered item list and selected item in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static void assertCommandFailure(Command command,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                                            InventoryModel actualInventoryModel, String expectedMessage) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBook expectedInventoryBook \u003d new InventoryBook(actualInventoryModel.getInventoryBook());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualInventoryModel.getFilteredAndSortedItemList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(actualInventoryModel, new DeliveryModelManager());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(models));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedInventoryBook, actualInventoryModel.getInventoryBook());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedFilteredList, actualInventoryModel.getFilteredAndSortedItemList());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * - the delivery book, filtered delivery list and selected delivery in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static void assertCommandFailure(Command command,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                                            DeliveryModel actualDeliveryModel, String expectedMessage) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryBook expectedDeliveryBook \u003d new DeliveryBook(actualDeliveryModel.getDeliveryBook());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        List\u003cDelivery\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualDeliveryModel.getFilteredAndSortedDeliveryList());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(new InventoryModelManager(), actualDeliveryModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(models));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(expectedDeliveryBook, actualDeliveryModel.getDeliveryBook());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertEquals(expectedFilteredList, actualDeliveryModel.getFilteredAndSortedDeliveryList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Updates {@code model}\u0027s filtered and sorted list to show only the item at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * {@code model}\u0027s inventory book."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static void showItemAtIndex(InventoryModel inventoryModel, Index targetIndex) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c inventoryModel.getFilteredAndSortedItemList().size());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item item \u003d inventoryModel.getFilteredAndSortedItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        final String[] splitName \u003d item.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.updateItemListFilter("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(1, inventoryModel.getFilteredAndSortedItemList().size());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Updates {@code model}\u0027s filtered and sorted list to show only"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * the delivery at the given {@code targetIndex} in the {@code model}\u0027s delivery book."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static void showDeliveryAtIndex(DeliveryModel deliveryModel, Index targetIndex) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c deliveryModel.getFilteredAndSortedDeliveryList().size());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Delivery delivery \u003d deliveryModel.getFilteredAndSortedDeliveryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        final String[] splitName \u003d delivery.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        deliveryModel.updateFilteredDeliveryList("
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new DeliveryNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertEquals(1, deliveryModel.getFilteredAndSortedDeliveryList().size());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 15,
      "xnoobftw": 55,
      "Wincenttjoi": 71,
      "-": 87,
      "halcon-blanco": 53,
      "zeranium97": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel expectedInventoryModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), inventoryModel, expectedCommandResult, expectedInventoryModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 5,
      "Wincenttjoi": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.help.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.help.HelpStartCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.help.HelpSummaryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel expectedInventoryModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_helpStart_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(new HelpStartCommand(), inventoryModel, expectedCommandResult, expectedInventoryModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_helpSummary_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false, true, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(new HelpSummaryCommand(), inventoryModel, expectedCommandResult, expectedInventoryModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 6,
      "Wincenttjoi": 10,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EARLY_TEST_FAILURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.RedoCommand.MESSAGE_REDO_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "class RedoCommandUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_emptyModels_limitReached() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new RedoCommand(), actualModels, MESSAGE_REDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_nothingToRedo_limitReached() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new RedoCommand(), actualModels, MESSAGE_REDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_changedInventoryState_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel1 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel2 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(inventoryModel1, new DeliveryModelManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(inventoryModel2, new DeliveryModelManager());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change the state, commit, then undo"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel1.addItem(testItem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel2.addItem(testItem);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            actualModels.undo();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Assertions.fail(MESSAGE_EARLY_TEST_FAILURE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new RedoCommand(), actualModels, MESSAGE_REDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_redoAfterCommittingInventory_limitReached() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel1 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(inventoryModel1, new DeliveryModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), new DeliveryModelManager());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change state, commit, undo, then commit again"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel1.addItem(testItem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            actualModels.undo();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Assertions.fail(MESSAGE_EARLY_TEST_FAILURE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_changedDeliveryState_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel1 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel2 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(new InventoryModelManager(), deliveryModel1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(new InventoryModelManager(), deliveryModel2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change the state, commit, then undo"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel1.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel2.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            actualModels.undo();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Assertions.fail(MESSAGE_EARLY_TEST_FAILURE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new RedoCommand(), actualModels, MESSAGE_REDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_changedDeliveryAndInventoryState_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel1 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel2 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel1 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel2 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(inventoryModel1, deliveryModel1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(inventoryModel2, deliveryModel2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change the state, commit, then undo"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel1.addItem(testItem);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel2.addItem(testItem);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel1.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel2.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            actualModels.undo();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Assertions.fail(MESSAGE_EARLY_TEST_FAILURE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new RedoCommand(), actualModels, MESSAGE_REDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_redoAfterCommittingDelivery_limitReached() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel1 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(new InventoryModelManager(), deliveryModel1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(new InventoryModelManager(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change state, commit, undo, then commit again"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel1.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            actualModels.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Assertions.fail(MESSAGE_EARLY_TEST_FAILURE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_redoAfterCommittingInventoryAndDelivery_limitReached() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel1 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel1 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(inventoryModel1, deliveryModel1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change state, commit, undo, then commit again"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel1.addItem(testItem);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel1.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            actualModels.undo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (UndoRedoLimitReachedException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Assertions.fail(MESSAGE_EARLY_TEST_FAILURE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private InventoryModel makeTestInventoryModel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel makeTestDeliveryModel() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 188
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.UndoCommand.MESSAGE_UNDO_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "class UndoCommandUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_emptyModels_limitReached() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new UndoCommand(), actualModels, MESSAGE_UNDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_nothingToUndo_limitReached() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new UndoCommand(), actualModels, MESSAGE_UNDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_changedInventoryState_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel1 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(inventoryModel1, new DeliveryModelManager());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), new DeliveryModelManager());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change the state and commit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel1.addItem(testItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new UndoCommand(), actualModels, MESSAGE_UNDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_changedDeliveryState_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel1 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(new InventoryModelManager(), deliveryModel1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(new InventoryModelManager(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change the state and commit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel1.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new UndoCommand(), actualModels, MESSAGE_UNDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_changedDeliveryAndInventoryState_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel1 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel1 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(inventoryModel1, deliveryModel1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // change the state and commit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel1.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel1.addItem(testItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new UndoCommand(), actualModels, MESSAGE_UNDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private InventoryModel makeTestInventoryModel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel makeTestDeliveryModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoRedoAndModelsIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNDO_LIMIT_REACHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.RedoCommand.MESSAGE_REDO_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.UndoCommand.MESSAGE_UNDO_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.exceptions.UndoRedoLimitReachedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "class UndoRedoAndModelsIntegrationTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_statesLimitIs1_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.setStatesLimit(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        models.commit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(UndoRedoLimitReachedException.class, () -\u003e models.undo());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(UndoRedoLimitReachedException.class, () -\u003e models.redo());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_statesLimitIs2_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel1 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel1 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel2 \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel2 \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(inventoryModel1, deliveryModel1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(inventoryModel2, deliveryModel2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.setStatesLimit(2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel1.addItem(testItem);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        inventoryModel2.addItem(testItem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel1.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        deliveryModel2.addDelivery(testDelivery);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertDoesNotThrow(() -\u003e actualModels.undo());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(actualModels, new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertDoesNotThrow(() -\u003e actualModels.redo());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(actualModels, expectedModels);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_undoTwiceThenRedoWithThreeStates_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // add item and commit"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedModels.commit();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // add item to actualModels and commit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.getDeliveryModel().addDelivery(testDelivery);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // undo twice"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new UndoCommand().execute(actualModels), new CommandResult(MESSAGE_UNDO_ACKNOWLEDGEMENT));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new UndoCommand().execute(actualModels), new CommandResult(MESSAGE_UNDO_ACKNOWLEDGEMENT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // redo and compare"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_undoTwiceThenRedoWithTwoStates_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // add item and commit actualModels"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // undo twice"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new UndoCommand().execute(actualModels), new CommandResult(MESSAGE_UNDO_ACKNOWLEDGEMENT));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new UndoCommand().execute(actualModels), new CommandResult(MESSAGE_UNDO_LIMIT_REACHED));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // redo and compare"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_undoTwiceThenRedoTwiceWithThreeStates_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Delivery testDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // add item and commit actualModels"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // add delivery and commit actualModels"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.getDeliveryModel().addDelivery(testDelivery);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedModels.getDeliveryModel().addDelivery(testDelivery);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // undo twice"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new UndoCommand().execute(actualModels), new CommandResult(MESSAGE_UNDO_ACKNOWLEDGEMENT));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new UndoCommand().execute(actualModels), new CommandResult(MESSAGE_UNDO_ACKNOWLEDGEMENT));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // redo twice and compare"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new RedoCommand().execute(actualModels), new CommandResult(MESSAGE_REDO_ACKNOWLEDGEMENT));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void execute_undoThenRedoTwiceWithTwoStates_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models actualModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models expectedModels \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item testItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // add item and commit actualModels"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedModels.getInventoryModel().addItem(testItem);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        actualModels.commit();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // undo once"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new UndoCommand().execute(actualModels), new CommandResult(MESSAGE_UNDO_ACKNOWLEDGEMENT));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // redo once and compare"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_ACKNOWLEDGEMENT, expectedModels);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // redo again"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), actualModels, MESSAGE_REDO_LIMIT_REACHED, expectedModels);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private InventoryModel makeTestInventoryModel() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel makeTestDeliveryModel() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/DeliveryAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class DeliveryAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private DeliveryModel model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        model \u003d new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void execute_newDelivery_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Delivery validDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryModel expectedModel \u003d new DeliveryModelManager(model.getDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        expectedModel.addDelivery(validDelivery);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertCommandSuccess(new DeliveryAddCommand(validDelivery), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                String.format(DeliveryAddCommand.MESSAGE_SUCCESS, validDelivery), expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/DeliveryAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class DeliveryAddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void constructor_nullDelivery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeliveryAddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void execute_deliveryAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryAddCommandTest.DeliveryModelStubAcceptingDeliveriesAdded modelStub \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new DeliveryAddCommandTest.DeliveryModelStubAcceptingDeliveriesAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(new InventoryModelManager(), modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Delivery validDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        CommandResult commandResult \u003d new DeliveryAddCommand(validDelivery).execute(models);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(String.format(DeliveryAddCommand.MESSAGE_SUCCESS, validDelivery),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(Arrays.asList(validDelivery), modelStub.deliveryAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Delivery alice \u003d new DeliveryBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Delivery bob \u003d new DeliveryBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryAddCommand addAliceCommand \u003d new DeliveryAddCommand(alice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryAddCommand addBobCommand \u003d new DeliveryAddCommand(bob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryAddCommand addAliceCommandCopy \u003d new DeliveryAddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different deliveries -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private class DeliveryModelStub implements DeliveryModel {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void setStatesLimit(int limit) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void commit() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public Path getDeliveryBookFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void setDeliveryBookFilePath(Path deliveryBookFilePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void addDelivery(Delivery delivery) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void setDeliveryBook(ReadOnlyDeliveryBook newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public ReadOnlyDeliveryBook getDeliveryBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void deleteDelivery(Delivery target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void setDelivery(Delivery target, Delivery editedDelivery) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        public ObservableList\u003cDelivery\u003e getFilteredAndSortedDeliveryList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void updateFilteredDeliveryList(Predicate\u003cDelivery\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * A Model stub that always accept the delivery being added."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private class DeliveryModelStubAcceptingDeliveriesAdded extends DeliveryAddCommandTest.DeliveryModelStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        final ArrayList\u003cDelivery\u003e deliveryAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void addDelivery(Delivery delivery) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            requireNonNull(delivery);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            deliveryAdded.add(delivery);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public ReadOnlyDeliveryBook getDeliveryBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return new DeliveryBook();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 1,
      "halcon-blanco": 24,
      "zeranium97": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/DeliveryClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_emptyDeliveryBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel deliveryModel \u003d new DeliveryModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel expectedDeliveryModel \u003d new DeliveryModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(new DeliveryClearCommand(), deliveryModel, DeliveryClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                expectedDeliveryModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_nonEmptyDeliveryBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel deliveryModel \u003d new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel expectedDeliveryModel \u003d new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedDeliveryModel.setDeliveryBook(new DeliveryBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(new DeliveryClearCommand(), deliveryModel, DeliveryClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                expectedDeliveryModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/DeliveryDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeliveryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * {@code DeliveryDeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryModel deliveryModel \u003d new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Delivery deliveryToDelete \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                deliveryModel.getFilteredAndSortedDeliveryList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deleteCommand \u003d new DeliveryDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String expectedMessage \u003d String.format(DeliveryDeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, deliveryToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryModelManager(deliveryModel.getDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedModel.deleteDelivery(deliveryToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(deleteCommand, deliveryModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(deliveryModel.getFilteredAndSortedDeliveryList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deleteCommand \u003d new DeliveryDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(deleteCommand, deliveryModel, Messages.MESSAGE_INVALID_DELIVERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        showDeliveryAtIndex(deliveryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Delivery deliveryToDelete \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                deliveryModel.getFilteredAndSortedDeliveryList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deleteCommand \u003d new DeliveryDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String expectedMessage \u003d String.format(DeliveryDeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, deliveryToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel expectedDeliveryModel \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryModelManager(deliveryModel.getDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedDeliveryModel.deleteDelivery(deliveryToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        showNoDelivery(expectedDeliveryModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(deleteCommand, deliveryModel, expectedMessage, expectedDeliveryModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        showDeliveryAtIndex(deliveryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of delivery book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c deliveryModel.getDeliveryBook().getDeliveryList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deleteCommand \u003d new DeliveryDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(deleteCommand, deliveryModel, Messages.MESSAGE_INVALID_DELIVERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deleteFirstCommand \u003d new DeliveryDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deleteSecondCommand \u003d new DeliveryDeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deleteFirstCommandCopy \u003d new DeliveryDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private void showNoDelivery(DeliveryModel deliveryModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        deliveryModel.updateFilteredDeliveryList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertTrue(deliveryModel.getFilteredAndSortedDeliveryList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 6,
      "xnoobftw": 2,
      "Wincenttjoi": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/DeliveryEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AARON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DAMITH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AARON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AARON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AARON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeliveryAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.EditDeliveryDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * DeliveryEditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryEditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryModel deliveryModel \u003d new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery editedDelivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder(editedDelivery).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand editCommand \u003d new DeliveryEditCommand(INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String expectedMessage \u003d String.format(DeliveryEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedDelivery);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel expectedDeliveryModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryModelManager(new DeliveryBook(deliveryModel.getDeliveryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        expectedDeliveryModel.setDelivery(deliveryModel.getFilteredAndSortedDeliveryList().get(1), editedDelivery);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(editCommand, deliveryModel, expectedMessage, expectedDeliveryModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Index indexLastDelivery \u003d Index.fromOneBased(deliveryModel.getFilteredAndSortedDeliveryList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Delivery lastDelivery \u003d deliveryModel.getFilteredAndSortedDeliveryList().get(indexLastDelivery.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryBuilder deliveryInList \u003d new DeliveryBuilder(lastDelivery);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery editedDelivery \u003d deliveryInList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withOrder(VALID_ORDER_AARON)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .withOrder(VALID_ORDER_AARON).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand editCommand \u003d new DeliveryEditCommand(indexLastDelivery, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String expectedMessage \u003d String.format(DeliveryEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedDelivery);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel expectedDeliveryModel \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryModelManager(new DeliveryBook(deliveryModel.getDeliveryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedDeliveryModel.setDelivery(lastDelivery, editedDelivery);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(editCommand, deliveryModel, expectedMessage, expectedDeliveryModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand editCommand \u003d new DeliveryEditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryEditCommand.EditDeliveryDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Delivery editedDelivery \u003d deliveryModel.getFilteredAndSortedDeliveryList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String expectedMessage \u003d String.format(DeliveryEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedDelivery);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel expectedDeliveryModel \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryModelManager(new DeliveryBook(deliveryModel.getDeliveryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(editCommand, deliveryModel, expectedMessage, expectedDeliveryModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        showDeliveryAtIndex(deliveryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Delivery deliveryInFilteredList \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                deliveryModel.getFilteredAndSortedDeliveryList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery editedDelivery \u003d new DeliveryBuilder(deliveryInFilteredList)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand editCommand \u003d new DeliveryEditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String expectedMessage \u003d String.format(DeliveryEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedDelivery);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryModel expectedDeliveryModel \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryModelManager(new DeliveryBook(deliveryModel.getDeliveryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        expectedDeliveryModel.setDelivery(deliveryModel.getFilteredAndSortedDeliveryList().get(0), editedDelivery);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(editCommand, deliveryModel, expectedMessage, expectedDeliveryModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_invalidDeliveryIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(deliveryModel.getFilteredAndSortedDeliveryList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand editCommand \u003d new DeliveryEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(editCommand, deliveryModel, Messages.MESSAGE_INVALID_DELIVERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * but smaller than size of delivery book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_invalidDeliveryIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        showDeliveryAtIndex(deliveryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory book list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c deliveryModel.getDeliveryBook().getDeliveryList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand editCommand \u003d new DeliveryEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder().withName(VALID_NAME_AARON).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(editCommand, deliveryModel, Messages.MESSAGE_INVALID_DELIVERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        final DeliveryEditCommand standardCommand \u003d new DeliveryEditCommand(INDEX_FIRST_ITEM, DESC_AARON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryEditCommand.EditDeliveryDescriptor(DESC_AARON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand commandWithSameValues \u003d new DeliveryEditCommand(INDEX_FIRST_ITEM, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(standardCommand.equals(new DeliveryClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(standardCommand.equals(new DeliveryEditCommand(INDEX_SECOND_ITEM, DESC_AARON)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(standardCommand.equals(new DeliveryEditCommand(INDEX_FIRST_ITEM, DESC_DAMITH)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 8,
      "xnoobftw": 2,
      "Wincenttjoi": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/DeliveryFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELIVERIES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.DeliveryNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "class DeliveryFindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Delivery KELVIN \u003d new DeliveryBuilder().withName(\"Kelvin\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .withPhone(\"91234332\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .withAddress(\"Clementi Blk 235 #11-111\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .withOrder(\"Char Kway Teow\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Delivery MARCUS \u003d new DeliveryBuilder().withName(\"Marcus\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .withPhone(\"8198264\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .withAddress(\"Jurong Blk 231 #15-123\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .withOrder(\"Seafood Hor Fun x5\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel deliveryModel \u003d new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel expectedDeliveryModel \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel testModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel expectedTestModel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        testModel \u003d new DeliveryModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedTestModel \u003d new DeliveryModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        testModel.addDelivery(KELVIN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        testModel.addDelivery(MARCUS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedTestModel.addDelivery(KELVIN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedTestModel.addDelivery(MARCUS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute_zeroKeywords_noItemFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        executeTest(0, prepareDeliveryNamePredicate(\" \"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                deliveryModel, expectedDeliveryModel, Collections.emptyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute_matchingSubstring_itemsFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        executeTest(2, prepareAddressPredicate(\"blk 23\"), testModel, expectedTestModel,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                testModel.getFilteredAndSortedDeliveryList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute_matchingKeywordsNotInOrder_itemsFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        executeTest(2, prepareAddressPredicate(\"23 blk\"), testModel, expectedTestModel,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                testModel.getFilteredAndSortedDeliveryList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void execute_twoFieldSpecified_itemsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        executeTest(1, prepareDeliveryNamePredicate(\"Kelvin\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .and(prepareAddressPredicate(\"Clementi\")), testModel,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                expectedTestModel, testModel.getFilteredAndSortedDeliveryList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new DeliveryNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new DeliveryNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryFindCommand findFirstCommand \u003d new DeliveryFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryFindCommand findSecondCommand \u003d new DeliveryFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryFindCommand findFirstCommandCopy \u003d new DeliveryFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // different delivery -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Parses {@code userInput} into a {@code DeliveryNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private DeliveryNameContainsKeywordsPredicate prepareDeliveryNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new DeliveryNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Parses {@code userInput} into a {@code AddressContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private AddressContainsKeywordsPredicate prepareAddressPredicate(String userInput) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Carries out an {@code execute} test with relevant arguments."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private void executeTest(int numItemsMatched, Predicate\u003cDelivery\u003e predicate,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                             DeliveryModel actualModel, DeliveryModel expectedModel,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                             List\u003cDelivery\u003e expectedFilteredDeliveries) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERIES_LISTED_OVERVIEW, numItemsMatched);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryFindCommand command \u003d new DeliveryFindCommand(predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        expectedModel.updateFilteredDeliveryList(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertEquals(expectedFilteredDeliveries, actualModel.getFilteredAndSortedDeliveryList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 4,
      "halcon-blanco": 87,
      "zeranium97": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/DeliveryListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for DeliveryListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryModel deliveryModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryModel expectedDeliveryModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        deliveryModel \u003d new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedDeliveryModel \u003d new DeliveryModelManager(deliveryModel.getDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(new DeliveryListCommand(), deliveryModel, DeliveryListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                expectedDeliveryModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertCommandSuccess(new DeliveryListCommand(), deliveryModel, DeliveryListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                expectedDeliveryModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 37,
      "halcon-blanco": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliverycommand/EditDeliveryDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.commands.deliverycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AARON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DAMITH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AARON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AARON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AARON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AARON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.EditDeliveryDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class EditDeliveryDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new DeliveryEditCommand.EditDeliveryDescriptor(DESC_DAMITH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(DESC_DAMITH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(DESC_DAMITH.equals(DESC_DAMITH));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DESC_DAMITH.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DESC_DAMITH.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DESC_DAMITH.equals(DESC_AARON));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor editedDamith \u003d new EditDeliveryDescriptorBuilder(DESC_DAMITH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withName(VALID_NAME_AARON).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DESC_DAMITH.equals(editedDamith));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        editedDamith \u003d new EditDeliveryDescriptorBuilder(DESC_DAMITH).withPhone(VALID_PHONE_AARON).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DESC_DAMITH.equals(editedDamith));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different order -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        editedDamith \u003d new EditDeliveryDescriptorBuilder(DESC_DAMITH).withOrder(VALID_ORDER_AARON).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DESC_DAMITH.equals(editedDamith));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        editedDamith \u003d new EditDeliveryDescriptorBuilder(DESC_DAMITH).withAddress(VALID_ADDRESS_AARON).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DESC_DAMITH.equals(editedDamith));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/EditItemDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DUCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_DUCK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class EditItemDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor descriptorWithSameValues \u003d new EditItemDescriptor(DESC_CHICKEN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(DESC_CHICKEN.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(DESC_CHICKEN.equals(DESC_CHICKEN));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(DESC_DUCK));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        EditItemDescriptor editedChicken \u003d new EditItemDescriptorBuilder(DESC_CHICKEN)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withName(VALID_NAME_DUCK).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new EditItemDescriptorBuilder(DESC_CHICKEN).withQuantity(VALID_QUANTITY_DUCK).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new EditItemDescriptorBuilder(DESC_CHICKEN).withSupplier(VALID_SUPPLIER_DUCK).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new EditItemDescriptorBuilder(DESC_CHICKEN).withTags(VALID_TAG_DUCK).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 24,
      "halcon-blanco": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ItemAddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_newItem_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item validItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(inventoryModel.getInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel.addItem(validItem);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new ItemAddCommand(validItem), inventoryModel,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                String.format(seedu.address.logic.commands.itemcommand.ItemAddCommand.MESSAGE_SUCCESS, validItem),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                expectedInventoryModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 18,
      "halcon-blanco": 6,
      "-": 14,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemAddCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemAddCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_itemAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ItemModelStubAcceptingInventoryAdded modelStub \u003d new ItemModelStubAcceptingInventoryAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(modelStub, new DeliveryModelManager());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item validItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        CommandResult commandResult \u003d new ItemAddCommand(validItem).execute(models);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(String.format(seedu.address.logic.commands.itemcommand.ItemAddCommand.MESSAGE_SUCCESS, validItem),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.itemsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_duplicateItem_updateQuantitySuccessful() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item currentItem \u003d new ItemBuilder().withName(\"Chicken\").withQuantity(\"2\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item finalItem \u003d new ItemBuilder().withName(\"Chicken\").withQuantity(\"4\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModelStub modelStub \u003d new ItemModelStubAcceptingDuplicatingInventory(currentItem);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(modelStub, new DeliveryModelManager());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        CommandResult commandResult \u003d new ItemAddCommand(currentItem).execute(models);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(String.format(ItemAddCommand.MESSAGE_ITEM_ADDED_TO_INVENTORY, finalItem),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_duplicateItem_updateMaxQuantityUnsuccessful() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item currentItem \u003d new ItemBuilder().withName(\"Chicken\").withQuantity(\"2\").withMaxQuantity(\"500\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item finalItem \u003d new ItemBuilder().withName(\"Chicken\").withQuantity(\"4\").withMaxQuantity(\"5000\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModelStub modelStub \u003d new ItemModelStubAcceptingDuplicatingInventory(currentItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(modelStub, new DeliveryModelManager());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ItemAddCommand(finalItem).execute(models));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute_duplicateItem_updateMetricUnsuccessful() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item currentItem \u003d new ItemBuilder().withName(\"Chicken\").withQuantity(\"2\").withMaxQuantity(\"500\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Item finalItem \u003d new ItemBuilder().withName(\"Chicken\").withQuantity(\"4\").withMetric(\"kg\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModelStub modelStub \u003d new ItemModelStubAcceptingDuplicatingInventory(currentItem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(modelStub, new DeliveryModelManager());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ItemAddCommand(finalItem).execute(models));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item chicken \u003d new ItemBuilder().withName(\"Chicken\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item duck \u003d new ItemBuilder().withName(\"Duck\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemAddCommand addChickenCommand \u003d new ItemAddCommand(chicken);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemAddCommand addDuckCommand \u003d new ItemAddCommand(duck);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(addChickenCommand.equals(addChickenCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemAddCommand addChickenCommandCopy \u003d new ItemAddCommand(chicken);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(addChickenCommand.equals(addChickenCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(addChickenCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(addChickenCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(addChickenCommand.equals(addDuckCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private class InventoryModelStub implements InventoryModel {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        private static final String MESSAGE_METHOD_SHOULD_NOT_BE_CALLED \u003d \"This method should not be called.\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void setStatesLimit(int limit) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public Path getInventoryBookFilePath() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void setInventoryBookFilePath(Path inventoryBookFilePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public void addItem(Item item) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public Item addOnExistingItem(Item item) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public void setInventoryBook(ReadOnlyInventoryBook newData) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public ReadOnlyInventoryBook getInventoryBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredAndSortedItemList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public void updateItemListFilter(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new AssertionError(MESSAGE_METHOD_SHOULD_NOT_BE_CALLED);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void commit() { }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void undo() { }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        public void redo() { }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * A Model stub that accepts duplicate item, updating its quantity."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private class ItemModelStubAcceptingDuplicatingInventory extends InventoryModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        private final Item item;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ItemModelStubAcceptingDuplicatingInventory(Item item) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public Item addOnExistingItem(Item item) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Name name \u003d item.getName();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Quantity quantity \u003d item.getQuantity().add(item.getQuantity());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Supplier supplier \u003d item.getSupplier();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Set\u003cTag\u003e providedItemTags \u003d item.getTags();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Set\u003cTag\u003e combinedTags \u003d new HashSet\u003c\u003e(providedItemTags);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            Quantity maxQuantity \u003d item.getMaxQuantity().orElse(null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            Metric metric \u003d item.getMetric().orElse(null);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            return new Item(name, quantity, supplier, combinedTags, maxQuantity, metric);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return this.item.isSameItem(item);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * A Model stub that always accept the item being added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private class ItemModelStubAcceptingInventoryAdded extends InventoryModelStub {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        final ArrayList\u003cItem\u003e itemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return itemsAdded.stream().anyMatch(item::isSameItem);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public void addItem(Item item) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            itemsAdded.add(item);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        public ReadOnlyInventoryBook getInventoryBook() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            return new InventoryBook();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 3,
      "xnoobftw": 102,
      "Wincenttjoi": 1,
      "halcon-blanco": 59,
      "-": 91,
      "zeranium97": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void execute_emptyInventoryBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel inventoryModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new ItemClearCommand(), inventoryModel, ItemClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                expectedInventoryModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_nonEmptyInventoryBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel inventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel.setInventoryBook(new InventoryBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new ItemClearCommand(), inventoryModel, ItemClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                expectedInventoryModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 14,
      "halcon-blanco": 6,
      "-": 13,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItemAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * {@code ItemDeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item itemToDelete \u003d inventoryModel.getFilteredAndSortedItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemDeleteCommand deleteCommand \u003d new ItemDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String expectedMessage \u003d String.format(ItemDeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(inventoryModel.getInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedModel.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(deleteCommand, inventoryModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(inventoryModel.getFilteredAndSortedItemList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemDeleteCommand deleteCommand \u003d new ItemDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(deleteCommand, inventoryModel, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        showItemAtIndex(inventoryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item itemToDelete \u003d inventoryModel.getFilteredAndSortedItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemDeleteCommand deleteCommand \u003d new ItemDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String expectedMessage \u003d String.format(ItemDeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(inventoryModel.getInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        showNoItem(expectedInventoryModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(deleteCommand, inventoryModel, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        showItemAtIndex(inventoryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c inventoryModel.getInventoryBook().getItemList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemDeleteCommand deleteCommand \u003d new ItemDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(deleteCommand, inventoryModel, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemDeleteCommand deleteFirstCommand \u003d new ItemDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemDeleteCommand deleteSecondCommand \u003d new ItemDeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemDeleteCommand deleteFirstCommandCopy \u003d new ItemDeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private void showNoItem(InventoryModel inventoryModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel.updateItemListFilter(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(inventoryModel.getFilteredAndSortedItemList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 82,
      "halcon-blanco": 12,
      "-": 16,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DUCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItemAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * ItemEditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemEditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder(editedItem).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String expectedMessage \u003d String.format(ItemEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(new InventoryBook(inventoryModel.getInventoryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel.setItem(inventoryModel.getFilteredAndSortedItemList().get(1), editedItem);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(editCommand, inventoryModel, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index indexLastItem \u003d Index.fromOneBased(inventoryModel.getFilteredAndSortedItemList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item lastItem \u003d inventoryModel.getFilteredAndSortedItemList().get(indexLastItem.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ItemBuilder itemInList \u003d new ItemBuilder(lastItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedItem \u003d itemInList.withName(VALID_NAME_DUCK).withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withTags(VALID_TAG_DUCK).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_DUCK)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(VALID_QUANTITY_DUCK).withTags(VALID_TAG_DUCK).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(indexLastItem, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String expectedMessage \u003d String.format(ItemEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(new InventoryBook(inventoryModel.getInventoryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel.setItem(lastItem, editedItem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(editCommand, inventoryModel, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(INDEX_FIRST_ITEM, new ItemEditCommand.EditItemDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedItem \u003d inventoryModel.getFilteredAndSortedItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String expectedMessage \u003d String.format(ItemEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(new InventoryBook(inventoryModel.getInventoryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(editCommand, inventoryModel, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        showItemAtIndex(inventoryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item itemInFilteredList \u003d inventoryModel.getFilteredAndSortedItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedItem \u003d new ItemBuilder(itemInFilteredList).withName(VALID_NAME_CHICKEN).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new EditItemDescriptorBuilder().withName(VALID_NAME_CHICKEN).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String expectedMessage \u003d String.format(ItemEditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new InventoryModelManager(new InventoryBook(inventoryModel.getInventoryBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel.setItem(inventoryModel.getFilteredAndSortedItemList().get(0), editedItem);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(editCommand, inventoryModel, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_duplicateItemUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item firstItem \u003d inventoryModel.getFilteredAndSortedItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder(firstItem).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandFailure(editCommand, inventoryModel, ItemEditCommand.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_duplicateItemFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        showItemAtIndex(inventoryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // edit item in filtered list into a duplicate in inventory book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item itemInList \u003d inventoryModel.getInventoryBook().getItemList().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new EditItemDescriptorBuilder(itemInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandFailure(editCommand, inventoryModel, ItemEditCommand.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_invalidItemIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(inventoryModel.getFilteredAndSortedItemList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .withName(VALID_NAME_DUCK).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(editCommand, inventoryModel, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * but smaller than size of inventory book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_invalidItemIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        showItemAtIndex(inventoryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c inventoryModel.getInventoryBook().getItemList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand editCommand \u003d new ItemEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                new EditItemDescriptorBuilder().withName(VALID_NAME_DUCK).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandFailure(editCommand, inventoryModel, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        final ItemEditCommand standardCommand \u003d new ItemEditCommand(INDEX_FIRST_ITEM, DESC_CHICKEN);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor copyDescriptor \u003d new ItemEditCommand.EditItemDescriptor(DESC_CHICKEN);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand commandWithSameValues \u003d new ItemEditCommand(INDEX_FIRST_ITEM, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertFalse(standardCommand.equals(new ItemClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertFalse(standardCommand.equals(new ItemEditCommand(INDEX_SECOND_ITEM, DESC_CHICKEN)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertFalse(standardCommand.equals(new ItemEditCommand(INDEX_FIRST_ITEM, DESC_DUCK)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 142,
      "halcon-blanco": 28,
      "-": 9,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITEMS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.SupplierContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ItemFindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemFindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel expectedInventoryModel \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemFindCommand findFirstCommand \u003d new ItemFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemFindCommand findSecondCommand \u003d new ItemFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemFindCommand findFirstCommandCopy \u003d new ItemFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_zeroKeywords_noItemFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemFindCommand command \u003d new ItemFindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel.updateItemListFilter(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertCommandSuccess(command, inventoryModel, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(Collections.emptyList(), inventoryModel.getFilteredAndSortedItemList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void execute_twoFieldSpecified_itemFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITEMS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Predicate\u003cItem\u003e predicate \u003d prepareNamePredicate(\"Chicken\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .and(prepareSupplierPredicate(\"GIANT\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        ItemFindCommand command \u003d new ItemFindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        expectedInventoryModel.updateItemListFilter(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertCommandSuccess(command, inventoryModel, expectedMessage, expectedInventoryModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(expectedInventoryModel.getFilteredAndSortedItemList(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                inventoryModel.getFilteredAndSortedItemList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Parses {@code userInput} into a {@code SupplierContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private SupplierContainsKeywordsPredicate prepareSupplierPredicate(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new SupplierContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 13,
      "halcon-blanco": 7,
      "-": 42,
      "zeranium97": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItemAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ItemListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel inventoryModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModel expectedInventoryModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedInventoryModel \u003d new InventoryModelManager(inventoryModel.getInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new ItemListCommand(), inventoryModel, ItemListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                expectedInventoryModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        showItemAtIndex(inventoryModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertCommandSuccess(new ItemListCommand(), inventoryModel, ItemListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                expectedInventoryModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 18,
      "halcon-blanco": 8,
      "-": 14,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itemcommand/ItemRemoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.commands.itemcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.Models;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.ModelsManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class ItemRemoveCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private InventoryModel inventoryModel \u003d new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Models models \u003d initialiseModels();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Item currentItem \u003d new ItemBuilder().withName(\"Chicken\").withQuantity(\"12\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemRemoveCommand(null, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemRemoveCommand(null, currentItem.getQuantity()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemRemoveCommand(INDEX_FIRST_ITEM, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void execute_itemAcceptedByModel_removeSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item afterRemoveItem \u003d new ItemBuilder().withName(\"Duck\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withSupplier(\"Cold Storage\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(\"23\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withTags(\"meat\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withMaxQuantity(\"500\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Quantity quantity \u003d new ItemBuilder().withQuantity(\"10\").build().getQuantity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        CommandResult commandResult \u003d new ItemRemoveCommand(INDEX_FIRST_ITEM, quantity)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                .execute(models);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(String.format(ItemRemoveCommand.MESSAGE_EDIT_ITEM_SUCCESS, afterRemoveItem),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        ItemRemoveCommand removeOne \u003d new ItemRemoveCommand(INDEX_FIRST_ITEM, new Quantity(\"10\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        ItemRemoveCommand removeTwo \u003d new ItemRemoveCommand(INDEX_SECOND_ITEM, new Quantity(\"10\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        ItemRemoveCommand removeThree \u003d new ItemRemoveCommand(INDEX_SECOND_ITEM, new Quantity(\"20\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        ItemAddCommand removeFour \u003d new ItemAddCommand(new ItemBuilder().build());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(removeOne.equals(removeOne));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(removeOne.equals(removeTwo));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(removeTwo.equals(removeThree));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(removeOne.equals(removeFour));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Models initialiseModels() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models tempModels \u003d new ModelsManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tempModels.setInventoryModel(inventoryModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return tempModels;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 4,
      "Wincenttjoi": 60,
      "halcon-blanco": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OneShelfBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryFindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemDeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemFindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemRemoveCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.DeliveryNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.DeliveryUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.EditDeliveryDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class OneShelfBookParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final OneShelfBookParser parser \u003d new OneShelfBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item item \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemAddCommand command \u003d (ItemAddCommand) parser.parseCommand(ItemUtil.getAddCommand(item));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new ItemAddCommand(item), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertTrue(parser.parseCommand(ItemClearCommand.COMMAND_WORD) instanceof ItemClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertTrue(parser.parseCommand(ItemClearCommand.COMMAND_WORD + \" 3\") instanceof ItemClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(parser.parseCommand(DeliveryClearCommand.COMMAND_WORD) instanceof DeliveryClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(parser.parseCommand(DeliveryClearCommand.COMMAND_WORD + \" 3\") instanceof DeliveryClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        ItemDeleteCommand itemCommand \u003d (ItemDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                ItemDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(new ItemDeleteCommand(INDEX_FIRST_ITEM), itemCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryDeleteCommand deliveryCommand \u003d (DeliveryDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                DeliveryDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(new DeliveryDeleteCommand(INDEX_FIRST_ITEM), deliveryCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item item \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder(item).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand command \u003d (ItemEditCommand) parser.parseCommand(ItemEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + INDEX_FIRST_ITEM.getOneBased() + \" \" + ItemUtil.getEditItemDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new ItemEditCommand(INDEX_FIRST_ITEM, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery delivery \u003d new DeliveryBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptorDelivery \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder(delivery).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand command2 \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                (DeliveryEditCommand) parser.parseCommand(DeliveryEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        + DeliveryUtil.getEditDeliveryDescriptorDetails(descriptorDelivery));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(new DeliveryEditCommand(INDEX_FIRST_ITEM, descriptorDelivery), command2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e keywords \u003d Collections.singletonList(\"CHICKEN\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemFindCommand command \u003d (ItemFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                ItemFindCommand.COMMAND_WORD + \" \" + \"n/chicken\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(new ItemFindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        List\u003cString\u003e deliveryKeywords \u003d Collections.singletonList(\"KELVIN\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryFindCommand deliveryCommand \u003d (DeliveryFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                DeliveryFindCommand.COMMAND_WORD + \" \" + \"n/Kelvin\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(new DeliveryFindCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new DeliveryNameContainsKeywordsPredicate(deliveryKeywords)), deliveryCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parseCommand_remove() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(parser.parseCommand(ItemRemoveCommand.COMMAND_WORD + \" 1 q/10\") instanceof ItemRemoveCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + HelpCommand.COMMAND_OPTION_SUMMARY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + HelpCommand.COMMAND_OPTION_START)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                HelpCommand.MESSAGE_INVALID_OPTION, () -\u003e parser"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .parseCommand(HelpCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertTrue(parser.parseCommand(ItemListCommand.COMMAND_WORD) instanceof ItemListCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertTrue(parser.parseCommand(ItemListCommand.COMMAND_WORD + \" 3\") instanceof ItemListCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(parser.parseCommand(DeliveryListCommand.COMMAND_WORD) instanceof DeliveryListCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(parser.parseCommand(DeliveryListCommand.COMMAND_WORD + \" 3\") instanceof DeliveryListCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 14,
      "Wincenttjoi": 55,
      "-": 53,
      "halcon-blanco": 18,
      "zeranium97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Chick@n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"+9\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_SUPPLIER \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_NAME \u003d \"Chicken\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_QUANTITY \u003d \"32\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_SUPPLIER \u003d \"NTUC\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"meat\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"seafood\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuantity((String) null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuantity(INVALID_QUANTITY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseQuantity(VALID_QUANTITY));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_QUANTITY + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseQuantity(phoneWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parseSupplier_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSupplier((String) null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parseSupplier_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSupplier(INVALID_SUPPLIER));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parseSupplier_validValueWithoutWhitespace_returnsSupplier() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Supplier expectedSupplier \u003d new Supplier(VALID_SUPPLIER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(expectedSupplier, ParserUtil.parseSupplier(VALID_SUPPLIER));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parseSupplier_validValueWithWhitespace_returnsTrimmedSupplier() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String supplierWithWhitespace \u003d WHITESPACE + VALID_SUPPLIER + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Supplier expectedSupplier \u003d new Supplier(VALID_SUPPLIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(expectedSupplier, ParserUtil.parseSupplier(supplierWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 10,
      "-": 130,
      "zeranium97": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryparser/DeliveryAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AARON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_DAMITH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERYNAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AARON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_DAMITH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_AARON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_DAMITH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AARON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_DAMITH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_DAMITH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DAMITH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_DAMITH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_DAMITH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.AARON_MANUAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryAddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class DeliveryAddCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private DeliveryAddCommandParser parser \u003d new DeliveryAddCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Delivery expectedDelivery \u003d new DeliveryBuilder(AARON_MANUAL).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_AARON + PHONE_DESC_AARON"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                + ADDRESS_DESC_AARON + ORDER_DESC_AARON, new DeliveryAddCommand(expectedDelivery));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_DAMITH + NAME_DESC_AARON + PHONE_DESC_AARON"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                + ADDRESS_DESC_AARON + ORDER_DESC_AARON, new DeliveryAddCommand(expectedDelivery));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // multiple phone - last phone accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AARON + PHONE_DESC_AARON + PHONE_DESC_AARON"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                + ADDRESS_DESC_AARON + ORDER_DESC_AARON, new DeliveryAddCommand(expectedDelivery));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // multiple address - last address accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AARON + PHONE_DESC_AARON + ADDRESS_DESC_AARON"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                + ADDRESS_DESC_AARON + ORDER_DESC_AARON, new DeliveryAddCommand(expectedDelivery));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // multiple orders - last order accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AARON + PHONE_DESC_AARON + ADDRESS_DESC_AARON"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                + ORDER_DESC_AARON + ORDER_DESC_AARON, new DeliveryAddCommand(expectedDelivery));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliveryAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DAMITH + PHONE_DESC_DAMITH + ADDRESS_DESC_DAMITH + ORDER_DESC_DAMITH,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DAMITH + VALID_PHONE_DAMITH + ADDRESS_DESC_DAMITH + ORDER_DESC_DAMITH,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DAMITH + PHONE_DESC_DAMITH + VALID_ADDRESS_DAMITH + ORDER_DESC_DAMITH,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // missing order prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DAMITH + PHONE_DESC_DAMITH + ADDRESS_DESC_DAMITH + VALID_ORDER_DAMITH,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DAMITH + VALID_PHONE_DAMITH"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                        + VALID_ADDRESS_DAMITH + VALID_ORDER_DAMITH, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, INVALID_DELIVERYNAME_DESC + PHONE_DESC_DAMITH + ADDRESS_DESC_DAMITH"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                        + ORDER_DESC_DAMITH, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DAMITH + INVALID_PHONE_DESC + ADDRESS_DESC_DAMITH"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                        + ORDER_DESC_DAMITH, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DAMITH + PHONE_DESC_DAMITH + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                        + ORDER_DESC_DAMITH, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid order"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DAMITH + PHONE_DESC_DAMITH + ADDRESS_DESC_DAMITH"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                        + INVALID_ORDER_DESC, Order.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, INVALID_DELIVERYNAME_DESC + PHONE_DESC_DAMITH + ADDRESS_DESC_DAMITH"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                        + INVALID_ORDER_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_DAMITH + PHONE_DESC_DAMITH + ADDRESS_DESC_DAMITH"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                        + ORDER_DESC_DAMITH,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliveryAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "zeranium97": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryparser/DeliveryDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * outside of the DeliveryDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * same path through the DeliveryDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryDeleteCommandParser parser \u003d new DeliveryDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeliveryDeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliveryDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryparser/DeliveryEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AARON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERYNAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AARON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_AARON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AARON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AARON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AARON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AARON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AARON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.EditDeliveryDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryEditCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliveryEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryEditCommandParser parser \u003d new DeliveryEditCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AARON, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1\", DeliveryEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DELIVERYNAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid quantity"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid supplier"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ORDER_DESC, Order.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_AARON + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                + PHONE_DESC_AARON"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                + NAME_DESC_AARON"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                + ADDRESS_DESC_AARON"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                + ORDER_DESC_AARON;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder().withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withAddress(VALID_ADDRESS_AARON)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withOrder(VALID_ORDER_AARON).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AARON;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AARON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AARON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor \u003d new EditDeliveryDescriptorBuilder().withPhone(VALID_PHONE_AARON).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AARON;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor \u003d new EditDeliveryDescriptorBuilder().withAddress(VALID_ADDRESS_AARON).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // order"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ORDER_DESC_AARON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor \u003d new EditDeliveryDescriptorBuilder().withOrder(VALID_ORDER_AARON).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AARON + PHONE_DESC_AARON + ADDRESS_DESC_AARON"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                    + ORDER_DESC_AARON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                new EditDeliveryDescriptorBuilder().withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withAddress(VALID_ADDRESS_AARON)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withOrder(VALID_ORDER_AARON)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_AARON;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand.EditDeliveryDescriptor descriptor \u003d new EditDeliveryDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withPhone(VALID_PHONE_AARON).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryEditCommand expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + ORDER_DESC_AARON"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                + PHONE_DESC_AARON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor \u003d new EditDeliveryDescriptorBuilder().withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .withOrder(VALID_ORDER_AARON).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedCommand \u003d new DeliveryEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryparser/DeliveryFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.deliveryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_DAMITH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_DAMITH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_DAMITH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_DAMITH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_DAMITH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AARON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DAMITH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_DAMITH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_DAMITH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryFindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.DeliveryNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.predicate.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "class DeliveryFindCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryFindCommandParser parser \u003d new DeliveryFindCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                DeliveryFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void parse_validNameArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryFindCommand expectedFindCommand \u003d new DeliveryFindCommand(new DeliveryNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                                Arrays.asList(VALID_NAME_DAMITH, VALID_NAME_AARON)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_DAMITH + \" \" + VALID_NAME_AARON, expectedFindCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void parse_validAddressArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryFindCommand expectedFindCommand \u003d new DeliveryFindCommand(new AddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Arrays.asList(VALID_ADDRESS_DAMITH.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseSuccess(parser, ADDRESS_DESC_DAMITH, expectedFindCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void parse_validOrderArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryFindCommand expectedFindCommand \u003d new DeliveryFindCommand(new OrderContainsKeywordsPredicate("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Arrays.asList(VALID_ORDER_DAMITH.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseSuccess(parser, ORDER_DESC_DAMITH, expectedFindCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void parse_validPhoneArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryFindCommand expectedFindCommand \u003d new DeliveryFindCommand(new PhoneContainsKeywordsPredicate("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Arrays.asList(VALID_PHONE_DAMITH)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseSuccess(parser, PHONE_DESC_DAMITH, expectedFindCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 55,
      "zeranium97": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itemparser/ItemAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUPPLIER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_QUANTITY_DESC_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_QUANTITY_DESC_DUCK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.METRIC_DESC_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.METRIC_DESC_DUCK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_DUCK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_CHICKEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_DUCK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPLIER_DESC_CHICKEN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPLIER_DESC_DUCK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DUCK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_QUANTITY_CHICKEN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_METRIC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.CHICKEN_MANUAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.DUCK_MANUAL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemAddCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemAddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private ItemAddCommandParser parser \u003d new ItemAddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder(DUCK_MANUAL).withTags(VALID_TAG_DUCK).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_DUCK + QUANTITY_DESC_DUCK"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                + SUPPLIER_DESC_DUCK + TAG_DESC_DUCK, new ItemAddCommand(expectedItem));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN + NAME_DESC_DUCK + QUANTITY_DESC_DUCK"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                + SUPPLIER_DESC_DUCK + TAG_DESC_DUCK, new ItemAddCommand(expectedItem));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // multiple quantity - last quantity accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_DUCK + QUANTITY_DESC_DUCK + QUANTITY_DESC_DUCK"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                + SUPPLIER_DESC_DUCK + TAG_DESC_DUCK, new ItemAddCommand(expectedItem));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // multiple supplier - last supplier accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_DUCK + QUANTITY_DESC_DUCK + SUPPLIER_DESC_DUCK"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                + SUPPLIER_DESC_DUCK + TAG_DESC_DUCK, new ItemAddCommand(expectedItem));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item expectedItemMultipleTags \u003d new ItemBuilder(DUCK_MANUAL)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN, VALID_TAG_DUCK)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_DUCK + QUANTITY_DESC_DUCK + SUPPLIER_DESC_DUCK"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                + TAG_DESC_DUCK + TAG_DESC_CHICKEN, new ItemAddCommand(expectedItemMultipleTags));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // multiple maxQuantity - last maxQuantity accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item expectedItemMaxQuantitySpecified \u003d new ItemBuilder(CHICKEN_MANUAL)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withMaxQuantity(VALID_MAX_QUANTITY_CHICKEN)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN + QUANTITY_DESC_CHICKEN"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + SUPPLIER_DESC_CHICKEN + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                + MAX_QUANTITY_DESC_DUCK + MAX_QUANTITY_DESC_CHICKEN,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ItemAddCommand(expectedItemMaxQuantitySpecified));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        // multiple metrics - last metric accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        Item expectedItemMetricSpecified \u003d new ItemBuilder(CHICKEN_MANUAL)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .withMetric(VALID_METRIC)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN + QUANTITY_DESC_CHICKEN"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                + SUPPLIER_DESC_CHICKEN + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                + METRIC_DESC_DUCK + METRIC_DESC_CHICKEN, new ItemAddCommand(expectedItemMetricSpecified));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item expectedItem \u003d new ItemBuilder(CHICKEN_MANUAL).withTags().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN + QUANTITY_DESC_CHICKEN + SUPPLIER_DESC_CHICKEN,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ItemAddCommand(expectedItem));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // zero maxQuantity"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item expectedItemMaxQ \u003d new ItemBuilder(CHICKEN_MANUAL).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN + QUANTITY_DESC_CHICKEN + SUPPLIER_DESC_CHICKEN,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ItemAddCommand(expectedItemMaxQ));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                seedu.address.logic.commands.itemcommand.ItemAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DUCK + QUANTITY_DESC_DUCK,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DUCK + VALID_QUANTITY_DUCK,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DUCK + VALID_QUANTITY_DUCK,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + QUANTITY_DESC_DUCK + SUPPLIER_DESC_DUCK"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + TAG_DESC_DUCK + TAG_DESC_CHICKEN, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DUCK + INVALID_QUANTITY_DESC + SUPPLIER_DESC_DUCK"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + TAG_DESC_DUCK + TAG_DESC_CHICKEN, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid supplier"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DUCK + QUANTITY_DESC_DUCK + INVALID_SUPPLIER_DESC"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + TAG_DESC_DUCK + TAG_DESC_CHICKEN, Supplier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_DUCK + QUANTITY_DESC_DUCK + SUPPLIER_DESC_DUCK"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_CHICKEN, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + QUANTITY_DESC_DUCK + INVALID_SUPPLIER_DESC,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_DUCK + QUANTITY_DESC_DUCK"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + SUPPLIER_DESC_DUCK + TAG_DESC_DUCK + TAG_DESC_CHICKEN,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                        seedu.address.logic.commands.itemcommand.ItemAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 11,
      "xnoobftw": 80,
      "halcon-blanco": 18,
      "-": 38,
      "zeranium97": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itemparser/ItemDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * outside of the ItemDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * same path through the ItemDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private ItemDeleteCommandParser parser \u003d new ItemDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ItemDeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "halcon-blanco": 8,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itemparser/ItemEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUPPLIER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_CHICKEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_DUCK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPLIER_DESC_CHICKEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPLIER_DESC_DUCK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DUCK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CHICKEN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHICKEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_CHICKEN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_DUCK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemEditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private ItemEditCommandParser parser \u003d new ItemEditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CHICKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseFailure(parser, \"1\", ItemEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS); // invalid quantity"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SUPPLIER_DESC, Supplier.MESSAGE_CONSTRAINTS); // invalid supplier"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, \"1\" + QUANTITY_DESC_DUCK + INVALID_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Item} being edited,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHICKEN + TAG_DESC_DUCK + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHICKEN + TAG_EMPTY + TAG_DESC_DUCK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_CHICKEN + TAG_DESC_DUCK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_SUPPLIER_CHICKEN + VALID_QUANTITY_CHICKEN,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_DUCK + TAG_DESC_DUCK"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + SUPPLIER_DESC_CHICKEN + NAME_DESC_CHICKEN + TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_CHICKEN)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(VALID_QUANTITY_DUCK).withSupplier(VALID_SUPPLIER_CHICKEN)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withTags(VALID_TAG_DUCK, VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_DUCK;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_CHICKEN;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_CHICKEN).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // quantity"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_CHICKEN;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_CHICKEN).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // supplier"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SUPPLIER_DESC_CHICKEN;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor \u003d new EditItemDescriptorBuilder().withSupplier(VALID_SUPPLIER_CHICKEN).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor \u003d new EditItemDescriptorBuilder().withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_CHICKEN + SUPPLIER_DESC_CHICKEN"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + TAG_DESC_CHICKEN + QUANTITY_DESC_CHICKEN + SUPPLIER_DESC_CHICKEN + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + QUANTITY_DESC_DUCK + SUPPLIER_DESC_DUCK + TAG_DESC_DUCK;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withSupplier(VALID_SUPPLIER_DUCK).withTags(VALID_TAG_CHICKEN, VALID_TAG_DUCK)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_QUANTITY_DESC + QUANTITY_DESC_DUCK;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(VALID_QUANTITY_DUCK).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_QUANTITY_DESC + SUPPLIER_DESC_DUCK"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                + QUANTITY_DESC_DUCK;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withSupplier(VALID_SUPPLIER_DUCK).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemEditCommand expectedCommand \u003d new ItemEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 68,
      "halcon-blanco": 18,
      "-": 105,
      "zeranium97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itemparser/ItemFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPLIER_DESC_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemFindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.SupplierContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ItemFindCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private ItemFindCommandParser parser \u003d new ItemFindCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                ItemFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ItemFindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new ItemFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"CHICKEN\", \"DUCK\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN + \" \" + VALID_NAME_DUCK, expectedFindCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parse_validSupplierArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        ItemFindCommand expectedFindCommand \u003d new ItemFindCommand(new SupplierContainsKeywordsPredicate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Arrays.asList(\"GIANT\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, SUPPLIER_DESC_CHICKEN, expectedFindCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void parse_validTagArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        ItemFindCommand expectedFindCommand \u003d new ItemFindCommand(new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Arrays.asList(\"poultry\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CHICKEN, expectedFindCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 7,
      "-": 22,
      "zeranium97": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itemparser/ItemRemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.logic.parser.itemparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class ItemRemoveCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    private RemoveCommandParser parser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_DUCK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    Item item \u003d new ItemBuilder().withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    RemoveCommand expectedCommand \u003d new RemoveCommand(targetIndex, item.getQuantity());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    //    assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 20,
      "halcon-blanco": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/DeliveryModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.model.deliverymodel.DeliveryModel.PREDICATE_SHOW_ALL_DELIVERIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class DeliveryModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private DeliveryModelManager modelManager \u003d new DeliveryModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(new DeliveryBook(), new DeliveryBook(modelManager.getDeliveryBook()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userPrefs.setDeliveryBookFilePath(Paths.get(\"delivery/book/file/path\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        userPrefs.setDeliveryBookFilePath(Paths.get(\"new/delivery/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveryBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setDeliveryBookFilePath(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setDeliveryBookFilePath_validPath_setsDeliveryBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/book/file/path\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager.setDeliveryBookFilePath(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(path, modelManager.getDeliveryBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void getFilteredDeliveryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAndSortedDeliveryList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        DeliveryBook deliveryBook \u003d new DeliveryBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        DeliveryBook differentDeliveryBook \u003d new DeliveryBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager \u003d new DeliveryModelManager(deliveryBook, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        DeliveryModelManager modelManagerCopy \u003d new DeliveryModelManager(deliveryBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager.updateFilteredDeliveryList(PREDICATE_SHOW_ALL_DELIVERIES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        differentUserPrefs.setDeliveryBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(modelManager.equals(new DeliveryModelManager(deliveryBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 2,
      "xnoobftw": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InventoryModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.model.inventorymodel.InventoryModel.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.DUCK_WITH_MAX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.InventoryBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class InventoryModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private InventoryModelManager modelManager \u003d new InventoryModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(new InventoryBook(), new InventoryBook(modelManager.getInventoryBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        userPrefs.setInventoryBookFilePath(Paths.get(\"inventory/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        userPrefs.setInventoryBookFilePath(Paths.get(\"new/inventory/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setInventoryBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInventoryBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setInventoryBookFilePath_validPath_setsInventoryBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        modelManager.setInventoryBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(path, modelManager.getInventoryBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void hasItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasItem(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void hasItem_itemNotInInventoryBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(modelManager.hasItem(CHICKEN));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void hasItem_itemInInventoryBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager.addItem(CHICKEN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(modelManager.hasItem(CHICKEN));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void getFilteredItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAndSortedItemList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBook inventoryBook \u003d new InventoryBookBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withItem(CHICKEN).withItem(DUCK_WITH_MAX_QUANTITY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        InventoryBook differentInventoryBook \u003d new InventoryBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager \u003d new InventoryModelManager(inventoryBook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryModelManager modelManagerCopy \u003d new InventoryModelManager(inventoryBook, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different inventoryBook -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(modelManager.equals(new InventoryModelManager(differentInventoryBook, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String[] keywords \u003d CHICKEN.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        modelManager.updateItemListFilter(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(modelManager.equals(new InventoryModelManager(inventoryBook, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        modelManager.updateItemListFilter(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        differentUserPrefs.setInventoryBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(modelManager.equals(new InventoryModelManager(inventoryBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 29,
      "-": 91,
      "zeranium97": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelsManagerUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "class ModelsManagerUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void setStatesLimit_statesLimitIs0_assertionError() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Models models \u003d new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            models.setStatesLimit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            models.commit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new ModelsManager(), new ModelsManager());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new ModelsManager(makeTestInventoryModel(), new DeliveryModelManager()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ModelsManager(makeTestInventoryModel(), new DeliveryModelManager()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new ModelsManager(new InventoryModelManager(), makeTestDeliveryModel()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ModelsManager(new InventoryModelManager(), makeTestDeliveryModel()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        InventoryModel inventoryModel \u003d makeTestInventoryModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        DeliveryModel deliveryModel \u003d makeTestDeliveryModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(new ModelsManager(inventoryModel, deliveryModel),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ModelsManager(inventoryModel, deliveryModel));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertNotEquals(new Object(), new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertNotEquals(new ModelsManager(makeTestInventoryModel(), makeTestDeliveryModel()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                new ModelsManager(new InventoryModelManager(), new DeliveryModelManager()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private InventoryModel makeTestInventoryModel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new InventoryModelManager(getTypicalInventoryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private DeliveryModel makeTestDeliveryModel() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DeliveryModelManager(getTypicalDeliveryBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SupplierBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_CHICKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.CHICKEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class SupplierBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final InventoryBook inventoryBook \u003d new InventoryBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(Collections.emptyList(), inventoryBook.getItemList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventoryBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void resetData_withValidReadOnlyInventoryBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBook newData \u003d getTypicalInventoryBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(newData, inventoryBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void resetData_withDuplicateItem_throwsItemPersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedChicken \u003d new ItemBuilder(CHICKEN)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withSupplier(VALID_SUPPLIER_CHICKEN)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e newItems \u003d Arrays.asList(CHICKEN, editedChicken);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBookStub newData \u003d new InventoryBookStub(newItems);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e inventoryBook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void hasItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventoryBook.hasItem(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void hasItem_itemNotInInventoryBook_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(inventoryBook.hasItem(CHICKEN));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void hasItem_itemInInventoryBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryBook.addItem(CHICKEN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(inventoryBook.hasItem(CHICKEN));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void hasItem_itemWithSameIdentityFieldsInInventoryBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        inventoryBook.addItem(CHICKEN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedChicken \u003d new ItemBuilder(CHICKEN)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withSupplier(VALID_SUPPLIER_CHICKEN).withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(inventoryBook.hasItem(editedChicken));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void getItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e inventoryBook.getItemList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * A stub ReadOnlyInventoryBook whose items list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static class InventoryBookStub implements ReadOnlyInventoryBook {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        private final ObservableList\u003cItem\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        InventoryBookStub(Collection\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            this.items.setAll(items);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            return items;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 58,
      "-": 41,
      "zeranium97": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInventoryBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // null Address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // invalid Address"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // valid Address"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Address.isValidAddress(\"orchard road*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Address.isValidAddress(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Address.isValidAddress(\"blk 223\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Address.isValidAddress(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Address.isValidAddress(\"345 jln pagar\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Address.isValidAddress(\"BLK ORCHARD ROAD\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Address.isValidAddress(\"singapore blk jln burong kechil tanjong pajar street\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 13,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/DeliveryNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeliveryName(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DeliveryName(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DeliveryName.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DeliveryName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DeliveryName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DeliveryName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(DeliveryName.isValidName(\"damith*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(DeliveryName.isValidName(\"marissa\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(DeliveryName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(DeliveryName.isValidName(\"5th son of obama\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(DeliveryName.isValidName(\"TRUMP\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(DeliveryName.isValidName(\"hubert blaine wolfeschlegelsteinhausenbergerdorff sr\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/DeliveryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AARON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DAMITH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AARON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AARON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.KELVIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.MARCUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery kelvinCopy \u003d new DeliveryBuilder(KELVIN).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(KELVIN.equals(kelvinCopy));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(KELVIN.equals(KELVIN));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(KELVIN.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(KELVIN.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(KELVIN.equals(MARCUS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery editedKelvin \u003d new DeliveryBuilder(KELVIN).withName(VALID_NAME_DAMITH).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(KELVIN.equals(editedKelvin));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        editedKelvin \u003d new DeliveryBuilder(KELVIN).withAddress(VALID_ADDRESS_AARON).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(KELVIN.equals(editedKelvin));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        editedKelvin \u003d new DeliveryBuilder(KELVIN).withPhone(VALID_PHONE_AARON).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(KELVIN.equals(editedKelvin));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // different order -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        editedKelvin \u003d new DeliveryBuilder(KELVIN).withOrder(VALID_ORDER_AARON).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(KELVIN.equals(editedKelvin));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/OrderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Order(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void constructor_invalidOrder_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        String invalidOrder \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Order(invalidOrder));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void isValidOrder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(Order.isValidOrder(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(Order.isValidOrder(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Order.isValidOrder(\"char kway teow*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Order.isValidOrder(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Order.isValidOrder(\"mie goreng\")); // alphabets only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Order.isValidOrder(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Order.isValidOrder(\"fried rice x1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Order.isValidOrder(\"ICED KOPI\")); // with capital letters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // null phone"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"damith*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"5th son of obama\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"12\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        // valid phone"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"123\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 13,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/UniqueDeliveryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.model.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AARON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.KELVIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.MARCUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.exception.DeliveryNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class UniqueDeliveryListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private final UniqueDeliveryList uniqueDeliveryList \u003d new UniqueDeliveryList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void contains_nullDelivery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeliveryList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void contains_deliveryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertFalse(uniqueDeliveryList.contains(KELVIN));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void contains_deliveryInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.add(KELVIN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertTrue(uniqueDeliveryList.contains(KELVIN));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void contains_deliveryWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.add(KELVIN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery editedCopy \u003d new DeliveryBuilder(KELVIN)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .withOrder(VALID_ORDER_AARON)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(uniqueDeliveryList.contains(editedCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void add_nullDelivery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeliveryList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDelivery_nullTargetDelivery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeliveryList.setDelivery(null, KELVIN));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDelivery_nullEditedDelivery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeliveryList.setDelivery(KELVIN, null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDelivery_targetDeliveryNotInList_throwsDeliveryNotFoundException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(DeliveryNotFoundException.class, () -\u003e uniqueDeliveryList.setDelivery(KELVIN, KELVIN));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDelivery_editedDeliveryIsSameDelivery_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.add(KELVIN);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.setDelivery(KELVIN, KELVIN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        UniqueDeliveryList expectedUniqueDeliveryList \u003d new UniqueDeliveryList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedUniqueDeliveryList.add(KELVIN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(expectedUniqueDeliveryList, uniqueDeliveryList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDelivery_editedDeliveryHasSameIdentity_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.add(KELVIN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        Delivery editedKelvin \u003d new DeliveryBuilder(KELVIN).withOrder(VALID_ORDER_AARON)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.setDelivery(KELVIN, editedKelvin);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        UniqueDeliveryList expectedUniqueDeliveryList \u003d new UniqueDeliveryList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedUniqueDeliveryList.add(editedKelvin);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(expectedUniqueDeliveryList, uniqueDeliveryList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void remove_nullDelivery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeliveryList.remove(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void remove_deliveryDoesNotExist_throwsDeliveryNotFoundException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(DeliveryNotFoundException.class, () -\u003e uniqueDeliveryList.remove(KELVIN));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void remove_existingDelivery_removesDelivery() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.add(KELVIN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.remove(KELVIN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        UniqueDeliveryList expectedUniqueDeliveryList \u003d new UniqueDeliveryList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(expectedUniqueDeliveryList, uniqueDeliveryList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDelivery_nullUniqueDeliveryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeliveryList.setDelivery(null, null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDelivery_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeliveryList.setDelivery(null, null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void setDeliveries_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.add(KELVIN);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        List\u003cDelivery\u003e deliveryList \u003d Collections.singletonList(MARCUS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        uniqueDeliveryList.setDeliveries(deliveryList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        UniqueDeliveryList expectedUniqueDeliveryList \u003d new UniqueDeliveryList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        expectedUniqueDeliveryList.add(MARCUS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertEquals(expectedUniqueDeliveryList, uniqueDeliveryList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            -\u003e uniqueDeliveryList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 130,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/predicate/AddressContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class AddressContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicate \u003d new AddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        AddressContainsKeywordsPredicate secondPredicate \u003d new AddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicateCopy \u003d new AddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_addressContainsKeywordsPredicate_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new AddressContainsKeywordsPredicate(Collections.singletonList(\"Jln\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withAddress(\"Jln\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Jln buroh\", \"Jln kecil\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withAddress(\"Jln buroh kecil\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Jln buroh\", \"Jln kecil\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withAddress(\"Jln buroh\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Aaron\", \"Damith\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withAddress(\"Aaron Damith\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_addressDoesNotContainKeywordsPredicate_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withAddress(\"Jln besar\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Jln besar\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withAddress(\"Jln kecil\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/predicate/DeliveryNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class DeliveryNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryNameContainsKeywordsPredicate firstPredicate \u003d new DeliveryNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryNameContainsKeywordsPredicate secondPredicate \u003d new DeliveryNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryNameContainsKeywordsPredicate firstPredicateCopy \u003d new DeliveryNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new DeliveryNameContainsKeywordsPredicate(Collections.singletonList(\"Damith\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withName(\"Damith Aaron\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new DeliveryNameContainsKeywordsPredicate(Arrays.asList(\"Damith\", \"Aaron\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withName(\"Chicken Aaron\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new DeliveryNameContainsKeywordsPredicate(Arrays.asList(\"Damith\", \"Aaron\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withName(\"Aaron Lim\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new DeliveryNameContainsKeywordsPredicate(Arrays.asList(\"Aaron\", \"Damith\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withName(\"Aaron Damith\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryNameContainsKeywordsPredicate predicate \u003d new DeliveryNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withName(\"Damith\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new DeliveryNameContainsKeywordsPredicate(Arrays.asList(\"Wilson\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withName(\"Damith Sanjaya\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/predicate/OrderContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class OrderContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        OrderContainsKeywordsPredicate firstPredicate \u003d new OrderContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        OrderContainsKeywordsPredicate secondPredicate \u003d new OrderContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        OrderContainsKeywordsPredicate firstPredicateCopy \u003d new OrderContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_ordersContainsKeywordsPredicate_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new OrderContainsKeywordsPredicate(Collections.singletonList(\"nasi\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withOrder(\"nasi ayam\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"nasi lemak\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withOrder(\"nasi lemak\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_ordersDoesNotContainKeywordsPredicate_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d new OrderContainsKeywordsPredicate("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withOrder(\"meat\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"fish\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withOrder(\"meat\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Keywords match name and phone, but not order"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Kelvin\", \"fish\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withName(\"Kelvin\").withOrder(\"meat\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/delivery/predicate/PhoneContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.delivery.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.DeliveryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class PhoneContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        PhoneContainsKeywordsPredicate firstPredicate \u003d new PhoneContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        PhoneContainsKeywordsPredicate secondPredicate \u003d new PhoneContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d new PhoneContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_phoneContainsKeywordsPredicate_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"91231231\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new DeliveryBuilder().withPhone(\"91231231\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_phoneDoesNotContainKeywordsPredicate_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withPhone(\"91231231\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Damith\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withPhone(\"91234122\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Keywords match name and tag, but does not match supplier"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Damith\", \"Loh\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new DeliveryBuilder().withName(\"Damith\").withPhone(\"91278322\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_DUCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.DUCK_WITH_MAX_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item item \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e item.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void isSameItem() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(CHICKEN.isSameItem(CHICKEN));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.isSameItem(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different quantity -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedChicken \u003d new ItemBuilder(CHICKEN)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(CHICKEN.isSameItem(editedChicken));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new ItemBuilder(CHICKEN)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withName(VALID_NAME_DUCK)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.isSameItem(editedChicken));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same name, same quantity, different supplier -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new ItemBuilder(CHICKEN)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withSupplier(VALID_SUPPLIER_DUCK)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.isSameItem(editedChicken));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same name, same supplier, different quantity -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new ItemBuilder(CHICKEN)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(CHICKEN.isSameItem(editedChicken));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item chickenCopy \u003d new ItemBuilder(CHICKEN).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(CHICKEN.equals(chickenCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(CHICKEN.equals(CHICKEN));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.equals(DUCK_WITH_MAX_QUANTITY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedChicken \u003d new ItemBuilder(CHICKEN).withName(VALID_NAME_DUCK).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new ItemBuilder(CHICKEN).withQuantity(VALID_QUANTITY_DUCK).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different supplier -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new ItemBuilder(CHICKEN).withSupplier(VALID_SUPPLIER_DUCK).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        editedChicken \u003d new ItemBuilder(CHICKEN).withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(CHICKEN.equals(editedChicken));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 91,
      "zeranium97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Name.isValidName(\"chicken*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Name.isValidName(\"premium chicken\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Name.isValidName(\"5th grade waygu beef\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Name.isValidName(\"Kurobuta Pork\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Name.isValidName(\"Japanese 5th grade waygu beef\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "-": 34,
      "zeranium97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null Quantity number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid Quantity numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"Quantity\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"9p0\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"9 3\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // valid Quantity numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"1\")); // exactly 1 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"124293842033123\")); // long Quantity numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zeranium97": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/SupplierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class SupplierTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Supplier(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void constructor_invalidSupplier_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String invalidSupplier \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Supplier(invalidSupplier));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void isValidSupplier() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null Supplier"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Supplier.isValidSupplier(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // invalid Supplieres"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Supplier.isValidSupplier(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(Supplier.isValidSupplier(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // valid Supplieres"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Supplier.isValidSupplier(\"NTUC\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Supplier.isValidSupplier(\"No Supplier\")); // two character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(Supplier.isValidSupplier(\"Sheng Shong Supermarket\")); // long Supplier"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zeranium97": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/UniqueItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_CHICKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_DUCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.CHICKEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.DUCK_WITH_MAX_QUANTITY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private final UniqueItemList uniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void contains_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void contains_itemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertFalse(uniqueItemList.contains(CHICKEN));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void contains_itemInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(uniqueItemList.contains(CHICKEN));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedChicken \u003d new ItemBuilder(CHICKEN)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withSupplier(VALID_SUPPLIER_CHICKEN)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertTrue(uniqueItemList.contains(editedChicken));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void add_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void add_duplicateItem_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.add(CHICKEN));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem_nullTargetItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(null, CHICKEN));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem_nullEditedItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(CHICKEN, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem_targetItemNotInList_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.setItem(CHICKEN, CHICKEN));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem_editedItemIsSameItem_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.setItem(CHICKEN, CHICKEN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedUniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem_editedItemHasSameIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item editedChicken \u003d new ItemBuilder(CHICKEN).withSupplier(VALID_SUPPLIER_DUCK).withTags(VALID_TAG_DUCK)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.setItem(CHICKEN, editedChicken);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedUniqueItemList.add(editedChicken);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem_editedItemHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.setItem(CHICKEN, DUCK_WITH_MAX_QUANTITY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedUniqueItemList.add(DUCK_WITH_MAX_QUANTITY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItem_editedItemHasNonUniqueIdentity_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(DUCK_WITH_MAX_QUANTITY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItem(CHICKEN, DUCK_WITH_MAX_QUANTITY));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void remove_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void remove_itemDoesNotExist_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.remove(CHICKEN));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void remove_existingItem_removesItem() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.remove(CHICKEN);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setItems_nullUniqueItemList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((UniqueItemList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItems_uniqueItemList_replacesOwnListWithProvidedUniqueItemList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedUniqueItemList.add(DUCK_WITH_MAX_QUANTITY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.setItems(expectedUniqueItemList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void setItems_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((List\u003cItem\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItems_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e itemList \u003d Collections.singletonList(DUCK_WITH_MAX_QUANTITY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.setItems(itemList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedUniqueItemList.add(DUCK_WITH_MAX_QUANTITY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void setItems_listWithDuplicateItems_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e listWithDuplicateItems \u003d Arrays.asList(CHICKEN, CHICKEN);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItems(listWithDuplicateItems));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addOnExistingItem_itemDoesNotExist_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.addOnExistingItem(CHICKEN));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void addOnExistingItem_existingItem_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.add(CHICKEN);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        uniqueItemList.addOnExistingItem(CHICKEN);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Item item \u003d new ItemBuilder().withQuantity(\"24\").withSupplier(\"GIANT\").withTags(\"meat\").build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        expectedUniqueItemList.add(item);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            -\u003e uniqueItemList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 173,
      "halcon-blanco": 2,
      "zeranium97": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/predicate/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Chicken\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Chicken Duck\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"Duck\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Chicken Duck\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Duck\", \"Beef\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Chicken Beef\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"Duck\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Chicken Duck\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Chicken\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Beef\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Chicken Duck\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Keywords match quantity and supplier, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"23\", \"Sheng\", \"Siong\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Chicken\").withSupplier(\"23\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .withSupplier(\"Sheng Shiong\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "zeranium97": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/predicate/SupplierContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class SupplierContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        SupplierContainsKeywordsPredicate firstPredicate \u003d new SupplierContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        SupplierContainsKeywordsPredicate secondPredicate \u003d new SupplierContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        SupplierContainsKeywordsPredicate firstPredicateCopy \u003d new SupplierContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_supplierContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        SupplierContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new SupplierContainsKeywordsPredicate(Collections.singletonList(\"NTUC\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withSupplier(\"NTUC\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new SupplierContainsKeywordsPredicate(Arrays.asList(\"Sheng\", \"Siong\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withSupplier(\"Sheng Siong\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new SupplierContainsKeywordsPredicate(Arrays.asList(\"Sheng\", \"NTUC\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withSupplier(\"Sheng Siong\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new SupplierContainsKeywordsPredicate(Arrays.asList(\"Cold\", \"Storage\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withSupplier(\"Cold Storage\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_supplierDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        SupplierContainsKeywordsPredicate predicate \u003d new SupplierContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withSupplier(\"NTUC\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new SupplierContainsKeywordsPredicate(Arrays.asList(\"NTUC\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withSupplier(\"Cold Storage\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Keywords match name and tag, but does not match supplier"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new SupplierContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"meat\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Chicken\").withTags(\"meat\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/predicate/TagContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.model.item.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // different Item -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_tagsContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"meat\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withTags(\"meat\", \"premium\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"Meat\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withTags(\"meat\", \"premium\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void test_tagsDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withTags(\"meat\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"fish\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withTags(\"meat\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Keywords match name and supplier, but does not match tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"NTUC\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Chicken\").withSupplier(\"NTUC\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        userPrefs.setInventoryBookFilePath(Paths.get(\"inventorybook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "zeranium97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.delivery.JsonDeliveryBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.storage.item.JsonInventoryBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonInventoryBookStorage inventoryBookStorage \u003d new JsonInventoryBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonDeliveryBookStorage deliveryBookStorage \u003d new JsonDeliveryBookStorage(getTempFilePath(\"db\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        storageManager \u003d new StorageManager(inventoryBookStorage, deliveryBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void inventoryBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "         * {@link JsonInventoryBookStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "         * {@link JsonInventoryBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBook original \u003d getTypicalInventoryBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        storageManager.saveInventoryBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ReadOnlyInventoryBook retrieved \u003d storageManager.readInventoryBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(original, new InventoryBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void getInventoryBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertNotNull(storageManager.getInventoryBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 11,
      "-": 54,
      "zeranium97": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/delivery/JsonAdaptedDeliveryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.storage.delivery.JsonAdaptedDelivery.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.KELVIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonAdaptedDeliveryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_ORDER \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_NAME \u003d KELVIN.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_PHONE \u003d KELVIN.getPhone().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_ADDRESS \u003d KELVIN.getAddress().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String VALID_ORDER \u003d KELVIN.getOrder().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private static final String VALID_ENDTIME \u003d KELVIN.getTime().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_validDeliveryDetails_returnsDelivery() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d new JsonAdaptedDelivery(KELVIN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(KELVIN, delivery.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_ORDER, VALID_ENDTIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d DeliveryName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(null, VALID_PHONE, VALID_ADDRESS, VALID_ADDRESS, VALID_ENDTIME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeliveryName.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_ADDRESS, VALID_ENDTIME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(VALID_NAME, null, VALID_ADDRESS, VALID_ORDER, VALID_ENDTIME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_ORDER, VALID_ENDTIME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(VALID_NAME, VALID_PHONE, null, VALID_ORDER, VALID_ENDTIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_invalidOrder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(VALID_NAME, VALID_PHONE, VALID_ADDRESS, INVALID_ORDER, VALID_ENDTIME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d Order.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_nullOrder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedDelivery delivery \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                new JsonAdaptedDelivery(VALID_NAME, VALID_PHONE, VALID_ADDRESS, null, VALID_ENDTIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Order.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, delivery::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 13,
      "zeranium97": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/delivery/JsonDeliveryBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.AARON_MANUAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.DAMITH_MANUAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.MARCUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.TypicalDeliveries.getTypicalDeliveryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.ReadOnlyDeliveryBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonDeliveryBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonDeliveryBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void readDeliveryBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readDeliveryBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyDeliveryBook\u003e readDeliveryBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new JsonDeliveryBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .readDeliveryBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(readDeliveryBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readDeliveryBook(\"notJsonFormatDeliveryBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void readDeliveryBook_invalidDeliveryDeliveryBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readDeliveryBook(\"invalidDeliveryDeliveryBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void readDeliveryBook_invalidAndValidDeliveryDeliveryBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readDeliveryBook(\"invalidAndValidDeliveryDeliveryBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void readAndSaveDeliveryBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempDeliveryBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryBook original \u003d getTypicalDeliveryBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonDeliveryBookStorage jsonDeliveryBookStorage \u003d new JsonDeliveryBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        jsonDeliveryBookStorage.saveDeliveryBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        ReadOnlyDeliveryBook readBack \u003d jsonDeliveryBookStorage.readDeliveryBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(original, new DeliveryBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        original.addDelivery(DAMITH_MANUAL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        original.removeDelivery(MARCUS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        jsonDeliveryBookStorage.saveDeliveryBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        readBack \u003d jsonDeliveryBookStorage.readDeliveryBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(original, new DeliveryBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        original.addDelivery(AARON_MANUAL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        jsonDeliveryBookStorage.saveDeliveryBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        readBack \u003d jsonDeliveryBookStorage.readDeliveryBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(original, new DeliveryBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveDeliveryBook_nullDeliveryBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveDeliveryBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Saves {@code deliveryBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private void saveDeliveryBook(ReadOnlyDeliveryBook deliveryBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            new JsonDeliveryBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                    .saveDeliveryBook(deliveryBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveDeliveryBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveDeliveryBook(new DeliveryBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/delivery/JsonSerializableDeliveryBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.delivery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.testutil.TypicalDeliveries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonSerializableDeliveryBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableDeliveryBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path TYPICAL_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDeliveryDeliveryBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path INVALID_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDeliveryDeliveryBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path DUPLICATE_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateDeliveryDeliveryBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonSerializableDeliveryBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ITEMS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                JsonSerializableDeliveryBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryBook inventoryBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        DeliveryBook typicalPersonsDeliveryBook \u003d TypicalDeliveries.getTypicalDeliveryBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertEquals(inventoryBookFromFile, typicalPersonsDeliveryBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void toModelType_invalidDeliveryFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonSerializableDeliveryBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ITEM_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                JsonSerializableDeliveryBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeranium97": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/item/JsonAdaptedItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.storage.item.JsonAdaptedItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.DUCK_WITH_MAX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class JsonAdaptedItemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"+6\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String INVALID_SUPPLIER \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#FooD\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String INVALID_MAX_QUANTITY \u003d \"-3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private static final String INVALID_METRIC \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String VALID_NAME \u003d DUCK_WITH_MAX_QUANTITY.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String VALID_QUANTITY \u003d DUCK_WITH_MAX_QUANTITY.getQuantity().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String VALID_SUPPLIER \u003d DUCK_WITH_MAX_QUANTITY.getSupplier().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d DUCK_WITH_MAX_QUANTITY.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String VALID_MAX_QUANTITY \u003d DUCK_WITH_MAX_QUANTITY.getMaxQuantity().get().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private static final String VALID_METRIC \u003d DUCK_WITH_MAX_QUANTITY.getMetric().get().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_validItemDetails_returnsItem() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(DUCK_WITH_MAX_QUANTITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(DUCK_WITH_MAX_QUANTITY, item.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(INVALID_NAME, VALID_QUANTITY, VALID_SUPPLIER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, VALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(null, VALID_QUANTITY, VALID_SUPPLIER,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, VALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, INVALID_QUANTITY, VALID_SUPPLIER,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, VALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, null, VALID_SUPPLIER,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, VALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_invalidSupplier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, INVALID_SUPPLIER,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, VALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d Supplier.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_nullSupplier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, VALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Supplier.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, VALID_SUPPLIER,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                invalidTags, VALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, item::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_invalidMaxQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, VALID_SUPPLIER,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, INVALID_MAX_QUANTITY, VALID_METRIC);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public void toModelType_invalidMetric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, VALID_SUPPLIER,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "                VALID_TAGS, VALID_MAX_QUANTITY, INVALID_METRIC);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        String expectedMessage \u003d Metric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 24,
      "xnoobftw": 76,
      "-": 12,
      "zeranium97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/item/JsonInventoryBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.CHICKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.LAMB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.TUNA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalInventoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.ReadOnlyInventoryBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonInventoryBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonInventoryBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void readInventoryBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInventoryBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventoryBook\u003e readInventoryBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return new JsonInventoryBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                .readInventoryBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertFalse(readInventoryBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventoryBook(\"notJsonFormatInventoryBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void readInventoryBook_invalidItemInventoryBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventoryBook(\"invalidItemInventoryBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void readInventoryBook_invalidAndValidItemInventoryBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventoryBook(\"invalidAndValidItemInventoryBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void readAndSaveInventoryBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInventoryBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBook original \u003d getTypicalInventoryBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        JsonInventoryBookStorage jsonInventoryBookStorage \u003d new JsonInventoryBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        jsonInventoryBookStorage.saveInventoryBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        ReadOnlyInventoryBook readBack \u003d jsonInventoryBookStorage.readInventoryBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(original, new InventoryBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        original.addItem(TUNA);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        original.removeItem(CHICKEN);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        jsonInventoryBookStorage.saveInventoryBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        readBack \u003d jsonInventoryBookStorage.readInventoryBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(original, new InventoryBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        original.addItem(LAMB);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        jsonInventoryBookStorage.saveInventoryBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        readBack \u003d jsonInventoryBookStorage.readInventoryBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(original, new InventoryBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveInventoryBook_nullInventoryBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventoryBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Saves {@code inventoryBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private void saveInventoryBook(ReadOnlyInventoryBook inventoryBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            new JsonInventoryBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                    .saveInventoryBook(inventoryBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public void saveInventoryBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventoryBook(new InventoryBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 33,
      "zeranium97": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/item/JsonSerializableInventoryBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.storage.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class JsonSerializableInventoryBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableInventoryBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path TYPICAL_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalItemInventoryBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path INVALID_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidItemInventoryBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private static final Path DUPLICATE_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateItemInventoryBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_typicalItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        JsonSerializableInventoryBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ITEMS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                JsonSerializableInventoryBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBook inventoryBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        InventoryBook typicalPersonsInventoryBook \u003d TypicalItems.getTypicalInventoryBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        assertEquals(inventoryBookFromFile, typicalPersonsInventoryBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public void toModelType_invalidItemFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonSerializableInventoryBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ITEM_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                JsonSerializableInventoryBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        JsonSerializableInventoryBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ITEM_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "                JsonSerializableInventoryBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventoryBook.MESSAGE_DUPLICATE_ITEM,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 13,
      "-": 17,
      "zeranium97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliveryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * A utility class to help with building Delivery objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String DEFAULT_DELIVERY_NAME \u003d \"Damith\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"91231231\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"Jln Parang Tritis No. 92 Orchard Road\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final String DEFAULT_ORDER \u003d \"Fried Rice 1x, Iced Kopi less sugar x1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String DEFAULT_ENDTIME \u003d \"28 October 2020 00:00:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryName name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private Order order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Creates a {@code DeliveryBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        name \u003d new DeliveryName(DEFAULT_DELIVERY_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        order \u003d new Order(DEFAULT_ORDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        time \u003d new Time(\"0\", DEFAULT_ENDTIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Initializes the DeliveryBuilder with the data of {@code Delivery}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryBuilder(Delivery deliveryToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        name \u003d deliveryToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        phone \u003d deliveryToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        address \u003d deliveryToCopy.getAddress();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        order \u003d deliveryToCopy.getOrder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        time \u003d deliveryToCopy.getTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code Name} of the {@code Delivery} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.name \u003d new DeliveryName(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code Phone} of the {@code Delivery} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code Address} of the {@code Delivery} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code Order} of the {@code Delivery} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryBuilder withOrder(String order) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.order \u003d new Order(order);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Sets the {@code Time} of the {@code Delivery} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public DeliveryBuilder withTime(String time) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.time \u003d new Time(\"0\", time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public Delivery build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Delivery(name, phone, address, order, time);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 14,
      "Wincenttjoi": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliveryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * A utility class for Delivery."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class DeliveryUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Returns an add command string for adding the {@code delivery}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static String getAddCommand(Delivery delivery) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return DeliveryAddCommand.COMMAND_WORD + \" \" + getDeliveryDetails(delivery);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Returns the part of command string for the given {@code delivery}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static String getDeliveryDetails(Delivery delivery) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        sb.append(PREFIX_NAME + delivery.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        sb.append(PREFIX_PHONE + delivery.getPhone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        sb.append(PREFIX_ADDRESS + delivery.getAddress().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        sb.append(PREFIX_ORDER + delivery.getOrder().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Returns the part of command string for the given {@code EditDeliveryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static String getEditDeliveryDescriptorDetails(DeliveryEditCommand.EditDeliveryDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.getDeliveryName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.getOrder().ifPresent(order -\u003e sb.append(PREFIX_ORDER).append(order.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditDeliveryDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.logic.commands.deliverycommand.DeliveryEditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.DeliveryName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.delivery.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * A utility class to help with building EditDeliveryDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class EditDeliveryDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private DeliveryEditCommand.EditDeliveryDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public EditDeliveryDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor \u003d new DeliveryEditCommand.EditDeliveryDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public EditDeliveryDescriptorBuilder(DeliveryEditCommand.EditDeliveryDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        this.descriptor \u003d new DeliveryEditCommand.EditDeliveryDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Returns an {@code EditDeliveryDescriptor} with fields containing {@code Delivery}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public EditDeliveryDescriptorBuilder(Delivery delivery) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor \u003d new DeliveryEditCommand.EditDeliveryDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setDeliveryName(delivery.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setPhone(delivery.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setAddress(delivery.getAddress());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setOrder(delivery.getOrder());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code Name} of the {@code EditDeliveryDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public EditDeliveryDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setDeliveryName(new DeliveryName(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditDeliveryDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public EditDeliveryDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code Address} of the {@code EditDeliveryDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public EditDeliveryDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Sets the {@code order} of the {@code EditDeliveryDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public EditDeliveryDescriptorBuilder withOrder(String order) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        descriptor.setOrder(new Order(order));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Sets the {@code order} of the {@code EditDeliveryDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public EditDeliveryDescriptorBuilder withTime(String time) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        descriptor.setTime(new Time(\"0\", time));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wengfaing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public DeliveryEditCommand.EditDeliveryDescriptor build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 10,
      "Wincenttjoi": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditItemDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A utility class to help with building EditItemDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class EditItemDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private EditItemDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public EditItemDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        descriptor \u003d new ItemEditCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public EditItemDescriptorBuilder(ItemEditCommand.EditItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        this.descriptor \u003d new EditItemDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns an {@code EditItemDescriptor} with fields containing {@code item}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public EditItemDescriptorBuilder(Item item) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        descriptor \u003d new ItemEditCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor.setName(item.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor.setQuantity(item.getQuantity());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor.setSupplier(item.getSupplier());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor.setTags(item.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor.setMaxQuantity(item.getMaxQuantity().orElse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Sets the {@code Name} of the {@code EditItemDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public EditItemDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Sets the {@code Quantity} of the {@code EditItemDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public EditItemDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        descriptor.setQuantity(new Quantity(quantity));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Sets the {@code Supplier} of the {@code EditItemDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public EditItemDescriptorBuilder withSupplier(String supplier) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        descriptor.setSupplier(new Supplier(supplier));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditItemDescriptor}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public EditItemDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Sets the {@code maxQuantity} of the {@code EditItemDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public EditItemDescriptorBuilder withMaxQuantity(String maxQuantity) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        descriptor.setMaxQuantity(new Quantity(maxQuantity));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemEditCommand.EditItemDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 29,
      "-": 46,
      "halcon-blanco": 6,
      "zeranium97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InventoryBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " * A utility class to help with building Inventorybook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "public class InventoryBookBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    private InventoryBook inventoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public InventoryBookBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        inventoryBook \u003d new InventoryBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public InventoryBookBuilder(InventoryBook inventoryBook) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.inventoryBook \u003d inventoryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Adds a new {@code Item} to the {@code InventoryBook} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public InventoryBookBuilder withItem(Item item) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        inventoryBook.addItem(item);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public InventoryBook build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        return inventoryBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 1,
      "zeranium97": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "import seedu.address.model.item.Metric;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Supplier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class ItemBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Chicken\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final String DEFAULT_SUPPLIER \u003d \"NTUC\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public static final String DEFAULT_METRIC \u003d \"kg\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private Supplier supplier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Quantity maxQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    private Metric metric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Creates a {@code ItemBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ItemBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        supplier \u003d new Supplier(DEFAULT_SUPPLIER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        maxQuantity \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        metric \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Initializes the ItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        name \u003d itemToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        quantity \u003d itemToCopy.getQuantity();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        supplier \u003d itemToCopy.getSupplier();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(itemToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        maxQuantity \u003d itemToCopy.getMaxQuantity().orElse(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        metric \u003d itemToCopy.getMetric().orElse(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Sets the {@code Name} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public ItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Sets the {@code Supplier} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public ItemBuilder withSupplier(String supplier) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.supplier \u003d new Supplier(supplier);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the {@code quantity} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public ItemBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Sets the {@code maxQuantity} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ItemBuilder withMaxQuantity(String maxQuantity) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.maxQuantity \u003d new Quantity(maxQuantity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     * Sets the {@code Metric} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    public ItemBuilder withMetric(String metric) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        this.metric \u003d new Metric(metric);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "        return new Item(name, quantity, supplier, tags, maxQuantity, metric);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 12,
      "xnoobftw": 29,
      "-": 49,
      "halcon-blanco": 12,
      "zeranium97": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItemUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUPPLIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import seedu.address.logic.commands.itemcommand.ItemEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A utility class for Item."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class ItemUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns an add command string for adding the {@code item}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static String getAddCommand(Item item) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return ItemAddCommand.COMMAND_WORD + \" \" + getItemDetails(item);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the part of command string for the given {@code item}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static String getItemDetails(Item item) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        sb.append(PREFIX_NAME + item.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        sb.append(PREFIX_QUANTITY + item.getQuantity().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        sb.append(PREFIX_SUPPLIER + item.getSupplier().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        item.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the part of command string for the given {@code EditItemDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static String getEditItemDescriptorDetails(ItemEditCommand.EditItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        descriptor.getQuantity().ifPresent(quantity -\u003e sb.append(PREFIX_QUANTITY).append(quantity.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "        descriptor.getSupplier().ifPresent(supplier -\u003e sb.append(PREFIX_SUPPLIER).append(supplier.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 15,
      "-": 38,
      "halcon-blanco": 4,
      "zeranium97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the middle index of the item in the {@code model}\u0027s item list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static Index getMidIndex(InventoryModel inventoryModel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Index.fromOneBased(inventoryModel.getFilteredAndSortedItemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the last index of the item in the {@code model}\u0027s item list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static Index getLastIndex(InventoryModel inventoryModel) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return Index.fromOneBased(inventoryModel.getFilteredAndSortedItemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     * Returns the item in the {@code model}\u0027s item list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static Item getItem(InventoryModel inventoryModel, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return inventoryModel.getFilteredAndSortedItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDeliveries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AARON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_DAMITH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AARON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DAMITH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AARON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_DAMITH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AARON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_DAMITH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.delivery.Delivery;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "import seedu.address.model.deliverymodel.DeliveryBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " * A utility class containing a list of {@code Delivery} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "public class TypicalDeliveries {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final Delivery KELVIN \u003d new DeliveryBuilder().withName(\"Kelvin\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .withPhone(\"91234332\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .withAddress(\"Clementi Blk 235 #11-111\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .withOrder(\"Char Kway Teow\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            .withTime(\"28 October 2020 00:00:00\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static final Delivery MARCUS \u003d new DeliveryBuilder().withName(\"Marcus\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .withPhone(\"8198264\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .withAddress(\"Jurong Blk 231 #15-123\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .withOrder(\"Seafood Hor Fun x5\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            .withTime(\"28 October 2020 00:00:00\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    // Manually added - Delivery\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Delivery DAMITH_MANUAL \u003d new DeliveryBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withName(VALID_NAME_DAMITH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withPhone(VALID_PHONE_DAMITH)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withAddress(VALID_ADDRESS_DAMITH)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withOrder(VALID_ORDER_DAMITH)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            .withTime(\"28 October 2020 00:00:00\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Delivery AARON_MANUAL \u003d new DeliveryBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withPhone(VALID_PHONE_AARON)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withAddress(VALID_ADDRESS_AARON)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withOrder(VALID_ORDER_AARON)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            .withTime(\"28 October 2020 00:00:00\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeranium97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    private TypicalDeliveries() {} // prevents instantiation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     * Returns an {@code InventoryBook} with all the typical items."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static DeliveryBook getTypicalDeliveryBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        DeliveryBook deliveryBook \u003d new DeliveryBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        for (Delivery delivery : getTypicalDeliveries()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            deliveryBook.addDelivery(delivery);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return deliveryBook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    public static List\u003cDelivery\u003e getTypicalDeliveries() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(KELVIN, MARCUS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wengfaing": 4,
      "Wincenttjoi": 43,
      "zeranium97": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnoobftw": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CHICKEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DUCK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DUCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUPPLIER_DUCK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import static seedu.address.model.inventorymodel.InventoryModel.ITEM_COMPARATOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.inventorymodel.InventoryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "public class TypicalItems {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "    // Typical Inventory Item"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Item CHICKEN \u003d new ItemBuilder().withName(\"Chicken\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"Giant\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withQuantity(\"12\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withTags(\"meat\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Item DUCK_WITH_MAX_QUANTITY \u003d new ItemBuilder().withName(\"Duck\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"Cold Storage\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withQuantity(\"33\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            .withTags(\"meat\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            .withMaxQuantity(\"500\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            .withMetric(\"kg\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wengfaing"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Item SALMON \u003d new ItemBuilder().withName(\"Salmon\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"No Supplier\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withQuantity(\"5\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withTags(\"fish\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Item BROCCOLI \u003d new ItemBuilder().withName(\"Broccoli\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"Sheng Siong\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withQuantity(\"3\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withTags(\"vegetable\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Item CRAB \u003d new ItemBuilder().withName(\"Crab\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"NTUC\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withQuantity(\"7\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withTags(\"seafood\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Item BEEF \u003d new ItemBuilder().withName(\"Beef\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withSupplier(\"No Supplier\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withQuantity(\"41\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withTags(\"meat\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Item PORK \u003d new ItemBuilder().withName(\"Pork\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"Sheng Siong\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withQuantity(\"2\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withTags(\"meat\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Item TUNA \u003d new ItemBuilder().withName(\"Tuna\").withQuantity(\"10\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"No Supplier\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static final Item LAMB \u003d new ItemBuilder().withName(\"LAMB\").withQuantity(\"4\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "            .withSupplier(\"Sheng Siong\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    // Manually added - Item\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Item CHICKEN_MANUAL \u003d new ItemBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withName(VALID_NAME_CHICKEN)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withQuantity(VALID_QUANTITY_CHICKEN)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withSupplier(VALID_SUPPLIER_CHICKEN)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static final Item DUCK_MANUAL \u003d new ItemBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withName(VALID_NAME_DUCK)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withQuantity(VALID_QUANTITY_DUCK)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .withSupplier(VALID_SUPPLIER_DUCK)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    private TypicalItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "     * Returns an {@code InventoryBook} with all the typical items."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "    public static InventoryBook getTypicalInventoryBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        InventoryBook inventoryBook \u003d new InventoryBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        for (Item item : getTypicalItems()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "            inventoryBook.addItem(item);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": "        return inventoryBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    public static List\u003cItem\u003e getTypicalItems() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        List\u003cItem\u003e typicalItems \u003d new ArrayList\u003c\u003e(Arrays.asList(CHICKEN, SALMON, BROCCOLI,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "                CRAB, BEEF, PORK, DUCK_WITH_MAX_QUANTITY));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        typicalItems.sort(ITEM_COMPARATOR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "        return typicalItems;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnoobftw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wengfaing": 3,
      "xnoobftw": 69,
      "Wincenttjoi": 4,
      "halcon-blanco": 1,
      "zeranium97": 22
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wincenttjoi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wincenttjoi": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeranium97"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "zeranium97": 1
    }
  }
]
