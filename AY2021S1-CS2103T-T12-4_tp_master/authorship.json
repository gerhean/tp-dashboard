[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "# Nuudle :ramen:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-4/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Having a tough time keeping track of patients\u0027 appointment? No time for noodles because of the never-ending appointment calls?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Fret not, Nuudle is here to help!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Nuudle is a desktop application that empowers clinic nurses, allowing them to **manage patient records and clinical appointments** with ease."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is optimised for use via a **Command Line Interface (CLI)** and supports a beautiful Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "If you can type fast, Nuudle gets your appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in using Nuudle, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in developing Nuudle, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 18,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "You can reach us at the following emails:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Lim Jin Hao : `jinhao_lim@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Low Ming Lim : `m._.m@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Zhang Wanlin : `zhangwanlin@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Xin Zhe : `xinzhe0127@gmail.com`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Yang Yue : `e0376999@u.nus.edu`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Lim Jin Hao"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cimg src\u003d\"images/jinhao-l.png\" width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[[github](http://github.com/jinhao-l)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[[portfolio](team/jinhao-l.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Role: Team Lead "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Responsibilities: Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "### Low Ming Lim"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "\u003cimg src\u003d\"images/avalionnet.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "[[github](https://github.com/Avalionnet)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "[[portfolio](team/avalionnet.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Role: Software Engineer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Responsibilities: Testing + Scheduling and Tracking"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* In-charge of: Logic and Parsers "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Yang Yue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003cimg src\u003d\"images/yangyue128-helen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "[[github](https://github.com/YangYue128-helen)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "[[portfolio](team/yangyue128-helen.md)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Role: Developer \u0026 Code quality"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Responsibilities: Model - appointment"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Xin Zhe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "\u003cimg src\u003d\"images/xz0127.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "[[github](http://github.com/xz0127)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "[[portfolio](team/xz0127.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* Role: Software Engineer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* Responsibilities: Documentation + Integration"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* In-charge of: Patient Models"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Zhang Wanlin"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "\u003cimg src\u003d\"images/zhangwanlin98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "[[github](http://github.com/ZhangWanlin98)]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "[[portfolio](team/zhangwanlin98.md)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Role: Developer + Testing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 10,
      "ZhangWanlin98": 7,
      "Avalionnet": 7,
      "xz0127": 7,
      "-": 31,
      "YangYue128-helen": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a patient)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th patient in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new patient. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 4. The user now decides that adding the patient was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the patient being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Target user profile story**:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Namise is a hard working nurse working at a popular dental clinic situated in town and gets appointment calls on an hourly basis. Swarmed with incoming calls, Namise has to make new appointments for new and existing patients while keeping track of the doctor’s schedule at the same time😞. With the need to juggle multiple tasks at once, Namise is also prone to making careless mistakes in his work due to fatigue."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Being a tech-savvy nurse armed with a commendable experience in unix, Namise prefers to scribble down appointment schedules on paper while on call with his patients to maximise efficiency. This task is further exacerbated with the need to transfer these notes into an excel table manually later in the day."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Target user profile summary**:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Nurse working in a highly popular, small scale dental clinic"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Responsible for scheduling a large number of appointments daily"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Add new patients to the clinic records  "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Do not entertain walk-ins and only operate on an appointment-basis"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Required to multi-task (create appointment arrangements with patients over the phone)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prone to carelessness due to the sheer number of appointments to handle  "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Tech-savvy  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers typing \u0026 wants to get things done quickly"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Tired of transferring appointment details from paper notes to excel"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers desktop apps over other types"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Types fast"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Help nurses **handle and schedule dental appointments for patients** faster than a typical mouse/GUI driven app or excel scheduling"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​          | I want to …​                      | So that I can…​                                                      |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "| -------- | --------------------| -------------------------------------| ------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | new user            | see an overview of the commands that are available to me | familiarise myself with using the app command       |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | view the entire patient list         | assign them to their appointments                                       |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| add new patient into the system      | assign an appointment to them                                           |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| delete the patient information       | manage the patient list easily when it is needed                        |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| search for patient by IC             | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | create patient appointment           | assign patient to a time slot for their appointment                     |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | delete an appointment                | cancel an appointment                                                   |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | view the entire appointment list for the certain day| update my dentists of the itinerary for the day          |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | mark the appointment as complete if the patient completes his/her appointment| have an accurate representation of the remaining appointments|"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | add diagnosis to a completed appointment| have a record of the patient’s visit                                 |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | check the record of the patient      | view the appointment history of the patient easily                      |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| search for patient by phone number   | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| search for patient by name           | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| change the patient’s appointment if they call to postpone their appointment| update the appointment easily     |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| update patient’s details             | keep the information of patients up-to-date                             |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | add an event slot to indicate that the doctor is not available at that time period| avoid arranging an appointment to that time slot|"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | get the available time slots of a day| inform my patient of the available times for that day                   |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | get the next available time slot     | inform my patient of the next available timing should their original preferred choice be filled|"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | check the earliest available slot for the clinic| automatically assign patient who does not have any preference for a specific doctor|"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse handling multiple patient records| archive records of past appointments| review them in the future                             |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | check the patient’s drug allergy     | confirm if the medicines prescribed are not in the list                 |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xz0127"
        },
        "content": "(For all use cases below, the **System** is the `Nuudle` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC01 - Add a patient**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to add a patient to the list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle adds the patient."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "xz0127"
        },
        "content": "           "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC02 - Delete a patient**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1.  User requests to list patients."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2.  Nuudle shows a list of patients."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3.  User requests to delete a specific patient in the list."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4.  Nuudle deletes the patient."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC03 - Edit a patient**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to find a specific patient."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows the list of patients with the given name."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to edit the patient information."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle changes the patient information."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 3a. The given information for editing is invalid (including empty input)."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC04 - View patient record**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to find a patient by name."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of patients with the requested name."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User request to view patient record of a specific patient in the list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle shows the list of records for that patient."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC05 - Add an appointment**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to find an available time slot."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of available time slots."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to add an appointment to a specific time slot."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle adds the appointment to the list of appointment records."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 3a. The given time slot is invalid (including empty input)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC06 - Delete an appointment**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to list appointments."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of appointments."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests to delete a specific appointment in the list."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle deletes the appointment."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC07 - Change an appointment**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to list all appointments."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of appointments."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to find an available time slot."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle shows a list of available time slots."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xz0127"
        },
        "content": "5.  User requests to change a specific appointment to another time."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xz0127"
        },
        "content": "6.  Nuudle changes the appointment."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 2a. User has no current appointments."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 2a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 5a. The given time slot is invalid (including empty input)."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 5a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 5b. The given keywords are invalid."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * 5b1. Nuudle shows an error message."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xz0127"
        },
        "content": "       Use case ends."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC08 - Mark an appointment as complete**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to list appointments."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of appointments."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests to mark an appointment as done."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle marks the appointment as done."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC09 - View appointments for today**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests for the appointments scheduled for today."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of appointments scheduled for today."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1b. The given date is invalid."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1b1. Nuudle shows an error message."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC10 - Create an appointment for a new patient**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. User requests to create a \u003cu\u003enew patient (UC01)\u003c/u\u003e."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle creates the new patient."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests for an available time slot on a preferred day."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle shows the list of available time slots."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "5. User requests to add an appointment for the new patient."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "6. Nuudle creates the appointment."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 3a. The given date is invalid."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 4a. No more time slot is available for that day."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 4a1. Nuudle shows the next available time slot on the nearest day."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        * 4a1a. User uses the suggested time slot."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "          Use case resumes at step 5."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        * 4a1b. User does not use the suggested time slot."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "          Use case resumes at step 3."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2.  Should be able to hold up to 500 patients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "3.  Should be able to hold up to 1000 upcoming appointments without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Patient records**: The past records of the patient\u0027s visit to the clinic. May contain doctor\u0027s diagnosis (if any)."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Deleting a patient"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1. Deleting a patient while all patients are being shown"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "xz0127"
        },
        "content": "   1. Prerequisites: List all patients using the `list` command. Multiple patients in the list."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 53,
      "ZhangWanlin98": 95,
      "Avalionnet": 8,
      "xz0127": 135,
      "-": 342,
      "YangYue128-helen": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "## Quick start ( Coming Soon )"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. Download the latest `nuudle.jar` from **here** ( Coming Soon )."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for Nuddle."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try :"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`list`** : Lists all patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`add`**`add n/John Doe i/S9730284G p/98765432 a/John street, block 123, #01-01` : Adds a patient named `John Doe` to the Patient Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd patient shown in the current list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   * **`edit`**`1 n/Betsy Crower p/91234567 a/College Avenue 8` : Edits the name, phone number, and address of the 1st patient in the list to be `Betsy`, `91234567`, and `College Avenue 8` respectively."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   * **`find`**`alex david` : Returns `Alex Yeoh`, `David Li` if the two names are found in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`clear`** : Deletes all patients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Shows a message explaining how to access the help page of Nuudle."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "### Adding a patient : `add`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Adds a patient to the patient book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Format: `add n/NAME i/NRIC p/PHONE_NUMBER a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Tags are used to indicate a patient\u0027s underlying medical conditions. A patient can also have any number of tags (including 0)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `add n/John Doe i/S9730284G p/98765432 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `add n/Betsy Crowe i/S9123456G t/friend a/NUS Utown p/1234567 t/asthma`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Listing all patients : `list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Shows a list of all patients in the patient book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Editing a patient : `edit`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Edits an existing patient in the patient book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Format: `edit INDEX [n/NAME] [i/NRIC] [p/PHONE_NUMBER] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* You can remove all the patients\u0027 tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "*  `edit 1 p/91234567 a/College Avenue 8` Edits the phone number and email address of the 1st patient to be `91234567` and `College Avenue 8` respectively."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Locating patients by name : `find`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Finds patients whose names contain any of the given keywords."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Patients matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Deleting a patient : `delete`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Deletes the specified patient from the patient book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd patient in the patient book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Adding an appointment : `assign`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Assign the specified patient into the specified appointment date and time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Format: `assign INDEX d/DATE t/TIME`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Puts the patient at the specified INDEX into an appointment time slot."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The INDEX refers to the index number indicated in the patient list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The INDEX **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The `DATE` and `TIME` of the appointment must be included."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The timeslot indicated by `DATE` and `TIME` must be available."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The specified `DATE` and `TIME` must be in the future."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `assign 1 d/Sunday t/2am` books an appointment at the upcoming Sunday, 2am for the 1st patient in the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `assign 3 d/02-03-2021 t/1130` books an appointment on 02/03/2021, 11:30am for the 3rd patient in the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Canceling an appointment : `cancel`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Delete the specified appointment from the appointment book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Format `cancel APPT_ID`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Deletes the appointment at the specified `APPT_ID`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The `APPT_ID` must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The `APPT_ID` is a unique id containing information on the appointment date and time."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `cancel 202003081000` deletes the appointment happening on 08/03/2020 10am."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Listing upcoming appointments by date : `view`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Shows a list of all upcoming appointments entries or only the list of upcoming appointments happening on the specified date."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Format `view [d/DATE]`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Outputs the list of all upcoming appointments happening on the specified date according to their `APPT_ID` order."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `DATE` must be in the future."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If `DATE` is not included, outputs the list of all upcoming appointments according to their `APPT_ID` order."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `view` shows the list of all upcoming appointments in chronological order."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `view d/4-Aug-2020` shows the list of appointments happening on 04/08/2020."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Mark an appointment as done : `done`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Marks a specific appointment in the patient book as done."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Format: `done APPT_ID`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Marks the appointment with the specified `APPT_ID` as done."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* The `APPT_ID` must be a positive integer."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* The `APPT_ID` is a unique id containing information on the appointment date and time."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `done 202010101300` marks the appointment happening on 10/10/2020 1pm as done."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Clearing all appointment entries : `clear`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Clears all appointment entries from the appointment book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Exits Nuudle."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Patients and appointments data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "### Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Upon starting up the app, past appointments will be automatically archived and saved into separate files. The data files are organised by months for future references."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Nuudle home folder."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Q**: What are the acceptable date time format?\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**A**: Nuudle supports multiple date time formats as well as natural date time language :"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Date Formats | Time Formats | Natural Date | Natural Time"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ":---------------:|:----------------:|:----------------:|:----------------:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02/12/2020 | 2300 | Today | Morning (8AM)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-12-2020 | 11:00PM | Tomorrow | Noon (12PM)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "12/02/2020 | 11PM | Yesterday | Evening (7PM)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "12-02-2020 | | Upcoming day\u003cbr\u003eof the week | Night (10PM)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2020/12/02 | | | Midnight (11:59PM)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2020-12-02 |"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-Dec-2020 | "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-December-2020 | "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Add** | `add n/NAME i/NRIC p/PHONE_NUMBER a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho i/S9712345G p/22224444 a/123, Clementi Rd, 1234665 t/asthma t/`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [i/NRIC] [a/ADDRESS] [t/TAG]…`\u003cbr\u003e e.g.,`edit 2 n/James Lee a/College Avenue 8`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Assign** | `assign INDEX d/DATE t/TIME`\u003cbr\u003e e.g., `assign 3 d/tomorrow t/3pm`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Cancel** | `cancel APPT_ID`\u003cbr\u003e e.g., `cancel 202003081000`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**View** | `view [d/DATE]`\u003cbr\u003e e.g., `view d/today`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Done** | `done APPT_ID`\u003cbr\u003e e.g., `done 202003081000`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 60,
      "ZhangWanlin98": 16,
      "Avalionnet": 19,
      "xz0127": 4,
      "-": 135,
      "YangYue128-helen": 23
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "title: Nuudle"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Nuudle is a desktop application that empowers clinic nurses, allowing them to handle patient\u0027s appointment quickly and efficiently.**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in using Nuudle, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested about developing Nuudle, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 8,
      "-": 13
    }
  },
  {
    "path": "docs/team/avalionnet.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "title: Low Ming Lim\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Wrote the introduction for Nuddle: [\\#41]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Added cosmetic changes to Quick Start: [\\#41]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Added documentation for the features `add` and `delete` [\\#41]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Authored the User Profile and Value Proposition segment [\\#43]()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 33
    }
  },
  {
    "path": "docs/team/jinhao-l.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "title: Lim Jin Hao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments**. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is optimised for use via a Command Line Interface (CLI), and has a Graphical User Interface (GUI) built with javafx.   "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **New Feature**: (to be added) "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djinhao-l\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Managed releases `v...` - `v...` on GitHub"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * README: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Update README to stay updated to current Nuudle project details [\\#40](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/40)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added documentation for the features `assign` and `cancel` [\\#42](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/42)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added documentation on archiving data [\\#42](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/42)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added details on the Nuudle\u0027s supported date time format [\\#49](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/49)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Authored the non-functional requirements and glossary segment [\\#50](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/50)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): none "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Contributed to forum discussions "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  (examples: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/99#issuecomment-683256251),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/94#issuecomment-692407535))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 41
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "## Project: -"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "- is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 45
    }
  },
  {
    "path": "docs/team/xz0127.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "title: Xin Zhe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * Added documentation for the features `clear`, `find` and `help` [\\#57]()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * Authored the `Use cases` segment [\\#59]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xz0127": 34
    }
  },
  {
    "path": "docs/team/yangyue128-helen.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "title: Yang Yue\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Nuudle is a desktop application used for managing patient records and clinic appointments. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    * Added documentation for the features `view` and `done` [\\#53]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    * Added user stories segment.[\\#56]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 28
    }
  },
  {
    "path": "docs/team/zhangwanlin98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "title: Zhang Wanlin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "via a Command Line Interface**(CLI) while still having the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "If you can type fast, Nuudle can get your patient and appointment management tasks done faster than traditional GUI apps. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **New Feature**: (to be added soon)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * Added documentation for the features `list`, `edit`and `find` [\\#47]()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * Added Use Cases."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (examples: [\\#12](), [\\#32](), [\\#19](), [\\#42]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        //TODO: to be changed after finishing storage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        ReadOnlyAppointmentBook initAppointmentData \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return new ModelManager(initialData, initAppointmentData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 182,
      "YangYue128-helen": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients\" + \" listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 1,
      "xz0127": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 3,
      "Avalionnet": 6,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Adds a patient to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_NRIC + \"S1234567G \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public AddCommand(Patient patient) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 3,
      "xz0127": 13,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Assigns an appointment to an existing patient."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns an appointment to an existing patient. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"PATIENT INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + PREFIX_TIME + \"TIME \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + PREFIX_DATE + \"12-Dec-2021 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + PREFIX_TIME + \"4:00PM\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Appointment added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String ASSIGNMENT_OVERLAP \u003d \"This time slot is occupied\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String DATE_MISSING \u003d \"The date of appointment is missing\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String TIME_MISSING \u003d \"The time of appointment is missing\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final DateTimeLoader dateTimeLoader;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Creates an AssignCommand to add a new {@code Appointment}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @param targetIndex index of the patient in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @param dateTimeLoader details of an appointment."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public AssignCommand(Index targetIndex, DateTimeLoader dateTimeLoader) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireAllNonNull(targetIndex, dateTimeLoader);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.dateTimeLoader \u003d new DateTimeLoader(dateTimeLoader);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    // todo"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        List\u003cPatient\u003e lastShownPatientList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownPatientList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Patient patient \u003d lastShownPatientList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d createAppointment(patient, dateTimeLoader);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (model.hasAppointment(appointment)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new CommandException(ASSIGNMENT_OVERLAP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, appointment));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Creates and returns an {@code Appointment} with merged details of {@code patient}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * and {@code assignAppointmentBuilder}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private static Appointment createAppointment(Patient patient,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            DateTimeLoader dateTimeLoader) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assert patient !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assert dateTimeLoader.getDate().isPresent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assert dateTimeLoader.getTime().isPresent();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Date assignedDate \u003d dateTimeLoader.getDate().get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time assignedTime \u003d dateTimeLoader.getTime().get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // Id is currently the name of patient."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Nric assignedPatientId \u003d patient.getNric();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new Appointment(assignedDate, assignedTime, assignedPatientId);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                || (other instanceof AssignCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AssignCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Stores the details to the appointment to be assigned."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Each non\u003dempty field value will replace the corresponding field value of the Appointment."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static class DateTimeLoader {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public DateTimeLoader() {}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public DateTimeLoader(DateTimeLoader toCopy) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            setAppointmentDate(toCopy.date);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            setAppointmentTime(toCopy.time);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Sets {@code date} of this AssignAppointmentBuilder object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void setAppointmentDate(Date date) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Gets {@code date} of this AssignAppointmentBuilder object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Sets {@code time} of this AssignAppointmentBuilder object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void setAppointmentTime(Time time) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Gets {@code time} of this AssignAppointmentBuilder object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            if (!(other instanceof DateTimeLoader)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            DateTimeLoader loader \u003d (DateTimeLoader) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return getDate().equals(loader.getDate())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                    \u0026\u0026 getTime().equals(loader.getTime());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "ZhangWanlin98": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Edits the details of an existing patient in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            + \"by the index number used in the displayed patient list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(editPatientDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPatientDescriptor.getTags().orElse(patientToEdit.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Nric updatedNric \u003d editPatientDescriptor.getNric().orElse(patientToEdit.getNric());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new Patient(updatedName, updatedPhone, updatedAddress, updatedTags, updatedNric);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, address, tags, nric);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 10,
      "xz0127": 46,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Finds and lists all patients in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 5,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Lists all Patients in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all Patients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        PREFIX_TAG, PREFIX_NRIC);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_NRIC)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d new Patient(name, phone, address, tagList, nric);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new AddCommand(patient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 3,
      "xz0127": 9,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 4,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DateTimeLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Parses input arguments and creates a new AssignCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * and returns an AssignCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public AssignCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireNonNull(arg);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                ArgumentTokenizer.tokenize(arg, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(AssignCommand.DATE_MISSING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(AssignCommand.TIME_MISSING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader dateTimeLoader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        dateTimeLoader.setAppointmentDate(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        dateTimeLoader.setAppointmentTime(time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new AssignCommand(index, dateTimeLoader);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "ZhangWanlin98": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 2,
      "Avalionnet": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DateParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.NaturalDay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Contains utility methods used for parsing date strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Helper class for {@link ParserUtil#parseDate(String)}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should contains a properly formatted date \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"or a recognised natural date language.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"An example of a properly formatted date includes (but not limited to): 02 Aug 2020\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"An example of a natural date language is \u0027today\u0027 or \u0027wednesday\u0027(any day of the week)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * List of known date formats that parser accepts."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e KNOWN_DATE_FORMATS \u003d createDateFormats();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates the list of formatter that accepts a specified list of known date patterns."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This method should only be used once to initialise the formatters used by the parser."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return list of DateTimeFormatter with acceptable date format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static List\u003cDateTimeFormatter\u003e createDateFormats() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // List of acceptable date format with optional year/month"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cString\u003e knownDatePatterns \u003d Arrays.asList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"d[/][-]M[[/][-]uuuu]\", \"M[/][-]d[[/][-]uuuu]\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"uuuu[/][-]M[/][-]d\", \"d[-][ ]MMM[[-][ ]uuuu]\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"d[-][ ]MMMM[[-][ ]uuuu]\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate currTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cDateTimeFormatter\u003e knownFormats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Create a formatter for each known patterns to be used for parsing dates"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c knownDatePatterns.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            knownFormats.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseCaseInsensitive()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .appendPattern(knownDatePatterns.get(i))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseDefaulting(ChronoField.YEAR, currTime.getYear())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .toFormatter()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return knownFormats;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses the {@code String dateString} into the implied {@code LocalDate}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the string containing a date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalDate} indicated by the string, null if no date is indicated."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code dateString} is invalid (cannot be parsed)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static LocalDate parse(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return parse(dateString, LocalDate.now());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Similar to {@link #parse(String)}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Used to inject a {@code LocalDate currDate} as \u0027today\u0027s date\u0027."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate the current date to be referenced against. Usually contains {@code LocalDate.now()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalDate parse(String dateString, LocalDate currDate) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(dateString, currDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate formattedDate \u003d parseByDateFormat(dateString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (formattedDate !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate naturalDate \u003d parseByNaturalDay(dateString, currDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (naturalDate !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return naturalDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String dateString} by checking with predefined date formats."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the date to match one of the formatter in {@code KNOWN_DATE_FORMATS}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If the {@code String dateString} can be inferred as 2 different dates, best effort"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * parsing is used and the most probable formatter is used (in order of priority)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * For example, \"2-3-2014\" could mean 2 Mar 2014 or 3 Feb 2014, in this case 2 Mar 2014"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * will be used."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the string containing a date."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalDate} that is represented in the string, or null if"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known natural date language."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalDate parseByDateFormat(String dateString) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c KNOWN_DATE_FORMATS.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return LocalDate.parse(dateString, KNOWN_DATE_FORMATS.get(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // Ignore exception, fallthrough expected"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String dateString} by checking with known natural date language."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the time to match one of the date language defined in {@code NaturalDay}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * {@code LocalDate currDate} is used for injecting the current {@code LocalDate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the string containing a date."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate   the current date to be referenced against. Usually contains {@code LocalDate.now()}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalDate} that is represented in the string, or null if"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known natural date language."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalDate parseByNaturalDay(String dateString, LocalDate currDate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(dateString, currDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Parse for natural date"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        NaturalDay day \u003d NaturalDay.parse(dateString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case TODAY:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case TOMORROW:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.plusDays(1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case SATURDAY:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case SUNDAY:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        PREFIX_TAG, PREFIX_NRIC);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new EditCommand(index, editPatientDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 3,
      "xz0127": 10,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @throws ParseException if the given {@code Nric} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Leading and trailing whitespace will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Parses the date into a LocalDate"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate parsedDate \u003d DateParserUtil.parse(trimmedDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!Date.isValidAppointmentDate(parsedDate)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Date(parsedDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Leading and trailing whitespace will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime parsedTime \u003d TimeParserUtil.parse(trimmedTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!Time.isValidStartTime(parsedTime)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Time(parsedTime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 42,
      "xz0127": 4,
      "Avalionnet": 15,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimeParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.NaturalDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Contains utility methods used for parsing time strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Helper class for {@link ParserUtil#parseTime(String)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TimeParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should contains a properly formatted time \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"or a recognised natural time language.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"An example of a properly formatted time includes (but not limited to): 2 PM\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"An example of a natural time language is \u0027morning\u0027 (8am) or \u0027evening\u0027 (7pm)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * List of known time formats that parser accepts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e KNOWN_TIME_FORMATS \u003d createTimeFormats();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates the list of formatter that accepts a specified list of known time patterns."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This method should only be used once to initialise the formatters used by the parser."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return list of DateTimeFormatter with acceptable time format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static List\u003cDateTimeFormatter\u003e createTimeFormats() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // List of acceptable date format with optional year/month"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cString\u003e knownTimePatterns \u003d Arrays.asList(\"HHmm\", \"h:mm[ ]a\", \"h[ ]a\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cDateTimeFormatter\u003e knownFormats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Create a formatter for each known patterns to be used for parsing dates"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c knownTimePatterns.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            knownFormats.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseCaseInsensitive()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .appendPattern(knownTimePatterns.get(i))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .toFormatter()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return knownFormats;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String timeString} into the implied {@code LocalTime}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param timeString the string containing a time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalTime} indicated by the string, or null if no time is indicated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code timeString} is invalid (cannot be parsed)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static LocalTime parse(String timeString) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime formattedTime \u003d parseByTimeFormat(timeString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (formattedTime !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return formattedTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime naturalTime \u003d parseByNaturalTime(timeString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (naturalTime !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return naturalTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String timeString} by checking with predefined time formats."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the time to match one of the formatter in {@code KNOWN_TIME_FORMATS}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param timeString the string containing a time."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalTime} that is represented in the string, or null if"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalTime parseByTimeFormat(String timeString) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c KNOWN_TIME_FORMATS.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return LocalTime.parse(timeString, KNOWN_TIME_FORMATS.get(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // Ignore exception, fallthrough expected"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String timeString} by checking with known natural time language."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the time to match one of the time language defined in {@code NaturalDay}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param timeString the string containing a time."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalTime} that is represented by the user, or null if"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known natural time language."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalTime parseByNaturalTime(String timeString) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Parse for natural time"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        NaturalDay time \u003d NaturalDay.parse(timeString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        switch (time) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case MORNING:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 8am"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case NOON:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 12pm"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(12, 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case EVENING:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 7pm"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(19, 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case NIGHT:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 10pm"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(22, 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case MIDNIGHT:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 11:59pm/ 2359"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates an AddressBook using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Adds a patient to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 patients.equals(((AddressBook) other).patients));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 33,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AppointmentBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Wraps all data at the appointment-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Overlaps are not allowed (by .isOverlapping comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentBook implements ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final UniqueAppointmentList appointments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointments \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Creates an AppointmentBook using the Appointments in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBook(ReadOnlyAppointmentBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces the contents of the appointments list with {@code appointments}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code appointments} must not contain overlapping appointments."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.appointments.setAppointments(appointments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Resets the existing data of this {@code AppointmentBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void resetData(ReadOnlyAppointmentBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        setAppointments(newData.getAppointmentList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //// appointment-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Adds an appointment to the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The appointment must not overlap with appointments in the appointment book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void addAppointment(Appointment a) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointments.add(a);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Checks if an appointment overlaps with {@code appointments}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean isAppointmentOverlapped(Appointment a) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return appointments.overlaps(a);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.asUnmodifiableObservableList().size() + \" appointments\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                || (other instanceof AppointmentBook // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 appointments.equals(((AppointmentBook) other).appointments));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 7,
      "YangYue128-helen": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Returns true if the time slot of an appointment overlaps {@code appointment} in the appointment book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    boolean hasAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient must exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code patient} must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Adds the given appointment."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * {@code appointment} must not already exist in the appointment book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    void addAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /** Returns an unmodifiable view of the filtered patient list */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces appointment book data with the data in {@code appointmentBook}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /** Returns the AppointmentBook */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    ReadOnlyAppointmentBook getAppointmentBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /** Returns an unmodifiable view of the filtered appointment list */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 15,
      "xz0127": 18,
      "-": 73,
      "YangYue128-helen": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final AppointmentBook appointmentBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyAppointmentBook appointmentBook,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and appointment book\" + appointmentBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.appointmentBook \u003d new AppointmentBook(appointmentBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(this.addressBook.getPatientList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentBook.getAppointmentList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this(new AddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return addressBook.hasPatient(patient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        addressBook.removePatient(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        addressBook.addPatient(patient);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        addressBook.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return appointmentBook.isAppointmentOverlapped(appointment);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        appointmentBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code versionedAppointmentBook}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return filteredAppointments;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        filteredAppointments.setPredicate(predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 appointmentBook.equals(other.appointmentBook)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 17,
      "xz0127": 21,
      "-": 127,
      "YangYue128-helen": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an unmodifiable view of the patients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This list will not contain any duplicate patients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAppointmentBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Unmodifiable view of an appointment book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public interface ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns an unmodifiable view of the appointments list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * This list will not contain any overlapping appointments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    ObservableList\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an Appointment in the appointment book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Duration of an appointment in hours"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Duration DEFAULT_DURATION \u003d Duration.ofHours(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // todo: add more support for appointmentId"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AppointmentId appointmentId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final Nric patientId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public Appointment(Date date, Time startTime, Nric patientId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(date, startTime, patientId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.endTime \u003d new Time(startTime.getTime().plus(DEFAULT_DURATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert startTime.isBefore(endTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.appointmentId \u003d new AppointmentId(date, startTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.patientId \u003d patientId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentId getAppointmentId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public Nric getPatientId() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return patientId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if both appointments have overlapping appointment time slot."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This defines a weaker notion of equality between two appointments"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isOverlapping(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (otherAppointment \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!otherAppointment.getDate().equals(getDate())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Assumption: start1 \u003c end1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // overlap if end1 \u003e start2 and end2 \u003e start1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return (getEndTime().isAfter(otherAppointment.getStartTime()))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndTime().isAfter(getStartTime());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if this appointment comes before the given appointment input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param otherAppointment the appointment to check against."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if this appointment comes before, false otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getDate().isBefore(otherAppointment.getDate())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (getDate().equals(otherAppointment.getDate())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u0026\u0026 !(getEndTime().isAfter(otherAppointment.getStartTime()))); // End1 \u003c\u003d Start2"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if this appointment comes after the given appointment input."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param otherAppointment the appointment to check against."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if this appointment comes after, false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getDate().isAfter(otherAppointment.getDate())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (getDate().equals(otherAppointment.getDate())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u0026\u0026 !(otherAppointment.getEndTime().isAfter(getStartTime()))); // End2 \u003c\u003d Start1"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if both appointments have the same identity and data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return otherAppointment.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getDate().equals(getDate())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getAppointmentId().equals(getAppointmentId())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatientId().equals(getPatientId());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Objects.hash(startTime, endTime, date, appointmentId, patientId);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getAppointmentId() + \"\\nDate: \" + getDate()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \" Time: from \" + getStartTime() + \" to \" + getEndTime()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"\\nPatient IC: \" + getPatientId();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 140,
      "ZhangWanlin98": 6,
      "xz0127": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the {@code Comparator} class for Appointment."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentComparator implements Comparator\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int compare(Appointment a1, Appointment a2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(a1, a2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (a1.isBefore(a2)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (a1.isAfter(a2)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert a1.isOverlapping(a2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentId {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"uuuuMMdd\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    AppointmentId(Date date, Time time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(date, time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d date.getDate().format(DATE_FORMAT) + time.getTime().format(TIME_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof AppointmentId // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((AppointmentId) other).value)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an upcoming appointment date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The formatter to convert the Date into the desired form for presentation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEEE, MMM dd uuuu\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The date should be a future date or a current date.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create a {@code Date} that represents the date of an appointment."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param date the {@code LocalDate} containing the date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given {@code LocalDate date} is a valid appointment date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@code LocalDate} is valid if it is not a past date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param date the LocalDate to check."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isValidAppointmentDate(LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return isValidAppointmentDate(date, LocalDate.now());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Similar to {@link #isValidAppointmentDate(LocalDate)}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate the current {@code LocalDate} to inject"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static boolean isValidAppointmentDate(LocalDate date, LocalDate currDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return !(date.isBefore(currDate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment date comes before the input {@code Date}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputDate the input date to be checked against"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment date comes before the input date, false otherwise"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Date inputDate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isBefore(inputDate.value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment date comes after the input {@code Date}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputDate the input date to be checked against"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment date comes after the input date, false otherwise"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Date inputDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isAfter(inputDate.value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a date string based on the currDate."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate the current {@code LocalDate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the string representation of the appointment {@code Date}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected String toStringBasedOn(LocalDate currDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (value.isEqual(currDate)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Simplify date to \"Today\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return \"Today\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.format(DATE_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Format appointment date as text for viewing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return toStringBasedOn(LocalDate.now());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/NaturalDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the natural days that are recognised by Nuudle."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public enum NaturalDay {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Days of Week"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MONDAY(\"MON\", \"MONDAY\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TUESDAY(\"TUE\", \"TUESDAY\", \"TUES\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    WEDNESDAY(\"WED\", \"WEDNESDAY\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    THURSDAY(\"THU\", \"THURSDAY\", \"THURS\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    FRIDAY(\"FRI\", \"FRIDAY\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    SATURDAY(\"SAT\", \"SATURDAY\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    SUNDAY(\"SUN\", \"SUNDAY\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Other date language"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TODAY(\"TDY\", \"TODAY\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TOMORROW(\"TMR\", \"TOMORROW\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    YESTERDAY(\"YESTERDAY\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Time grammar"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MIDNIGHT(\"MIDNIGHT\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NOON(\"NOON\", \"AFTERNOON\", \"AFTER-NOON\", \"LUNCH\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MORNING(\"MORNING\", \"SUNRISE\", \"BREAKFAST\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    EVENING(\"EVENING\", \"EVE\", \"DINNER\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NIGHT(\"NIGHT\", \"BEDTIME\", \"BED-TIME\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The string of words that is linked to the NaturalDay"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String[] words;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NaturalDay(String... words) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the word given indicate the respective {@code NaturalDay}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param wordToCheck the string to check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the word implies the corresponding {@code NaturalDay}, false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean contains(String wordToCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Arrays.stream(words)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .anyMatch(word -\u003e word.equalsIgnoreCase(wordToCheck));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the string input for any natural date or time grammar that is used."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the date or time input string with a possible natural day reference."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code NaturalDay} that corresponds to the date or time grammar, or null if no match is found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static NaturalDay parse(String dateString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        dateString \u003d dateString.strip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        NaturalDay[] days \u003d NaturalDay.values();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c days.length; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (days[i].contains(dateString)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return days[i];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.model.appointment.Appointment.DEFAULT_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an appointment time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The formatter to convert the Time into the desired form for presentation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Opens at 8am"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime OPENING_TIME \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Closes at 10pm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime CLOSING_TIME \u003d LocalTime.of(22, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The appointment time period should fall within \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"the opening hours: from \" + OPENING_TIME.format(TIME_FORMAT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \" to \" + CLOSING_TIME.format(TIME_FORMAT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"\\nThe appointment duration of \" + DEFAULT_DURATION.toHours() + \"hour should also be considered.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create a {@code Time} that represents the time of an appointment."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param time the LocalTime containing the time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time(LocalTime time) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given {@code LocalTime} is valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@code LocalTime} is valid if it falls within the opening and closing time (inclusive)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param test the LocalTime to test."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isValidTime(LocalTime test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return !(test.isBefore(OPENING_TIME) || test.isAfter(CLOSING_TIME));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given {@code LocalTime} is a valid start time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@code LocalTime} is valid if it falls within the opening and closing time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@link Appointment#DEFAULT_DURATION} is also considered"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param test the LocalTime to test."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if is valid start time, false otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isValidStartTime(LocalTime test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return !(test.isBefore(OPENING_TIME)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || test.isAfter(CLOSING_TIME.minus(DEFAULT_DURATION)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment time comes before the input {@code Time}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputTime the input time to be checked against"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment time comes before the input time, false otherwise"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Time inputTime) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isBefore(inputTime.value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment time comes after the input {@code Time}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputTime the input time to be checked against"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment time comes after the input time, false otherwise"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Time inputTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isAfter(inputTime.value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Format appointment time as text for viewing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.format(TIME_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.exceptions.OverlappingAppointmentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A list of appointments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * An appointment is considered unique by comparing using {@code Appointment#isOverlapping(Appointment)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * As such, adding and updating of appointment uses Appointment#isOverlapping(Appointment) for equality so as"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * to ensure that the appointment being added or updated is unique in terms of identity in the UniqueAppointmentList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * However, the removal of a patient uses Appointment#equals(Object) so as to ensure that the patient with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * @see Appointment#isOverlapping(Appointment)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class UniqueAppointmentList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList.sorted(new AppointmentComparator()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns true if the list has an overlapping appointment"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean overlaps(Appointment toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isOverlapping);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Adds an appointment to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The appointment must not overlap with existing appointments in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void add(Appointment toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (overlaps(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new OverlappingAppointmentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces the contents of this list with {@code appointments}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code appointments} must not contain overlapping appointments."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireAllNonNull(appointments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (!appointmentsAreNotOverlapping(appointments)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new OverlappingAppointmentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        internalList.setAll(appointments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                || (other instanceof UniqueAppointmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns true if {@code appointments} contains only non-overlapping appointments."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private boolean appointmentsAreNotOverlapping(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                if (appointments.get(i).isOverlapping(appointments.get(j))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 23,
      "xz0127": 1,
      "YangYue128-helen": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/OverlappingAppointmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Signals that the operation will result in overlapping appointments (Appointments are considered overlapped if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * have the overlapping time slot)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class OverlappingAppointmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public OverlappingAppointmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        super(\"Operation would result in overlapping appointments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Represents a Patient\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Represents a Patient\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Nric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Represents a Patient\u0027s Nric in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            \"Nric should only contain 7 numbers leading and ending with an alphabet in caps\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[STFG]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param nric A valid Nric."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        value \u003d nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns true if a given string is a valid Nric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 value.equals(((Nric) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "xz0127": 2,
      "Avalionnet": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Represents a Patient in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public Patient(Name name, Phone phone, Address address, Set\u003cTag\u003e tags, Nric nric) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(name, phone, address, tags, nric);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if both patients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getNric().equals(getNric())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 (otherPatient.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getTags().equals(getTags())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getNric().equals(getNric());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return Objects.hash(name, phone, address, tags, nric);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\"\\nPhone: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "xz0127": 24,
      "Avalionnet": 8,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Represents a Patient\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/UniquePatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * updating of patients uses Patient#isSamePatient(Patient) for equality so as to ensure that the patient being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * or updated is unique in terms of identity in the UniquePatientList. However, the removal of a patient uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Patient#equals(Object) so as to ensure that the patient with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                getTagSet(\"friends\"), new Nric(\"S9234567Q\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Nric(\"S9345678P\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                getTagSet(\"neighbours\"), new Nric(\"S9456789L\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                getTagSet(\"family\"), new Nric(\"T1234567V\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                getTagSet(\"classmates\"), new Nric(\"T0034567Q\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                getTagSet(\"colleagues\"), new Nric(\"T0934567Q\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (Patient samplePatient : getSamplePatients()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            sampleAb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 15,
      "Avalionnet": 6,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                              @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"nric\") String nric) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        nric \u003d source.getNric().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final List\u003cTag\u003e patientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            patientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(patientTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new Patient(modelName, modelPhone, modelAddress, modelTags, modelNric);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 21,
      "Avalionnet": 9,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            if (addressBook.hasPatient(patient)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            addressBook.addPatient(patient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 6,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates a {@code PatientCode} with the given {@code Patient} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        nric.setText(\"NRIC: \" + patient.getNric().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        phone.setText(\"Phone: \" + patient.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        address.setText(\"Address: \" + patient.getAddress().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patient.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "xz0127": 15,
      "Avalionnet": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private ListView\u003cPatient\u003e patientListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListView.setItems(patientList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    class PatientListViewCell extends ListCell\u003cPatient\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        protected void updateItem(Patient patient, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            super.updateItem(patient, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            if (empty || patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 49
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        \u003cVBox fx:id\u003d\"patientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "          \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 10,
      "Avalionnet": 2,
      "-": 149,
      "YangYue128-helen": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPatient), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientInList \u003d model.getAddressBook().getPatientList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(new AddCommand(patientInList), model, AddCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 11,
      "-": 32,
      "YangYue128-helen": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 11,
      "xz0127": 41,
      "-": 159,
      "YangYue128-helen": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AssignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OVERLAP_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SAME_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DateTimeLoader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.TimeParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.AppointmentBookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader dateTimeLoader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignCommand(null, dateTimeLoader));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void constructor_nullBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index index \u003d Index.fromZeroBased(10);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignCommand(index, null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void constructor_nullIndexAndBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignCommand(null, null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_appointmentAcceptedByModel_assignSuccessful() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, loader);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointment \u003d new Appointment(loader.getDate().get(), loader.getTime().get(), ALICE.getNric());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_SUCCESS, appointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AppointmentBook expectedAppointmentBook \u003d new AppointmentBookBuilder().withAppointment(appointment).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                expectedAppointmentBook, new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_appointmentRejectedDueToOverSizedIndex_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index overSizedIndex \u003d Index.fromOneBased(getTypicalPatients().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(overSizedIndex, loader);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(assignCommand, model, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_sameAppointmentRejectedDueToOverlap_failure() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, loader);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d new Appointment("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                loader.getDate().get(), new Time(TimeParserUtil.parse(SAME_TIME)), ALICE.getNric()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(assignCommand, model, AssignCommand.ASSIGNMENT_OVERLAP);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_differentAppointmentRejectedDueToOverlap_failure() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, loader);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d new Appointment("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                loader.getDate().get(), new Time(TimeParserUtil.parse(OVERLAP_TIME)), ALICE.getNric()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(assignCommand, model, AssignCommand.ASSIGNMENT_OVERLAP);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 7,
      "ZhangWanlin98": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 29,
      "YangYue128-helen": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S1234567J\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"T0034567P\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String VALID_DATE \u003d \"20 Nov 2035\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String DIFF_DATE \u003d \"03 August 2035\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String VALID_TIME \u003d \"12pm\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String SAME_TIME \u003d \"Afternoon\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String OVERLAP_TIME \u003d \"12:01 pm\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String ASSIGN_DATE_TIME \u003d \" \" + PREFIX_DATE + VALID_DATE + \" \" + PREFIX_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String ASSIGN_TIME \u003d \" \" + PREFIX_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String ASSIGN_DATE \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"q1234567k\"; // lower caps not allowed in Nric"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"20201202\"; // not a recognised date format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_DATE_DESC_EXPIRED \u003d \" \" + PREFIX_DATE + \"20/12/2010\"; // date is in the past"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"2530\"; // not a proper 24h time format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_TIME_DESC_CLOSED \u003d \" \" + PREFIX_TIME + \"2359\"; // not during opening hours"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final AssignCommand.DateTimeLoader LOADER;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final AssignCommand.DateTimeLoader LOADER_TIME;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final AssignCommand.DateTimeLoader LOADER_DATE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        LOADER \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        LOADER_TIME \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(OVERLAP_TIME).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        LOADER_DATE \u003d new DateTimeLoaderBuilder().withDate(DIFF_DATE).withTime(OVERLAP_TIME).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * - the address book, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 14,
      "ZhangWanlin98": 10,
      "Avalionnet": 7,
      "xz0127": 19,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DateTimeLoaderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOADER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOADER_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOADER_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DateTimeLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DateTimeLoaderTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoader(LOADER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(LOADER.equals(loader));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(LOADER.equals(LOADER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(LOADER_DATE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(LOADER_TIME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showNoPatient(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPatientList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 10,
      "xz0127": 18,
      "-": 79,
      "YangYue128-helen": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, new EditPatientDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PATIENT, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // edit patient in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientInList \u003d model.getAddressBook().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPatientList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PATIENT, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PATIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PATIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 58,
      "-": 110,
      "YangYue128-helen": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPatientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class EditPatientDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 8,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_zeroKeywords_noPatientFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_multipleKeywords_multiplePatientsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 15,
      "-": 66,
      "YangYue128-helen": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 4,
      "-": 33,
      "YangYue128-helen": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatientMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // multiple nric - last nric accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        + ADDRESS_DESC_AMY + NRIC_DESC_AMY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 15,
      "xz0127": 36,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + INDEX_FIRST_PATIENT.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PATIENT, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 16,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AssignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC_EXPIRED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC_CLOSED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DateTimeLoader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AssignCommandParser parser \u003d new AssignCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, ASSIGN_DATE_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // no date specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1\" + ASSIGN_TIME, AssignCommand.DATE_MISSING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // no time specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1\" + ASSIGN_DATE, AssignCommand.TIME_MISSING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // no index and no date or time specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"-5\" + ASSIGN_DATE_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"0\" + ASSIGN_DATE_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // invalid prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1 o/\" + VALID_DATE + ASSIGN_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + ASSIGN_TIME, DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC_EXPIRED + ASSIGN_TIME, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + ASSIGN_DATE, TimeParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC_CLOSED + ASSIGN_DATE, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC_CLOSED + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + INVALID_DATE_DESC_EXPIRED,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC_CLOSED + INVALID_DATE_DESC_EXPIRED,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ASSIGN_DATE + ASSIGN_TIME;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AssignCommand expectedCommand \u003d new AssignCommand(targetIndex, loader);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 45,
      "ZhangWanlin98": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DateParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final int currYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Default/now --\u003e Monday"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate currDate \u003d LocalDate.of(2020, 9, 7);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse_invalidDateString_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, DateParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e DateParserUtil.parse(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parse(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parse(null, currDate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // formatted date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parse(\"12/08\", currDate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // natural date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 14), DateParserUtil.parse(\"monday\", currDate));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByDateFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // dependent on current year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parseByDateFormat(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d[/][-]M[[/][-]uuuu] --\u003e d/M[/uuuu]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12/08\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12/08/2019\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 25), DateParserUtil.parseByDateFormat(\"25/8\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 25), DateParserUtil.parseByDateFormat(\"25/8/2019\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d[/][-]M[[/][-]uuuu] --\u003e d-M[-uuuu]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-08\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-08-2019\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-8\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-8-2019\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // M[/][-]d[[/][-]uuuu] --\u003e M/d[/uuuu]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Must use an obvious month to differentiate month from dayOfMonth"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 12, 25), DateParserUtil.parseByDateFormat(\"12/25\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 12, 25), DateParserUtil.parseByDateFormat(\"12/25/2019\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // If month is not differentiable from dayOfMonth"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 5, 12), DateParserUtil.parseByDateFormat(\"12/5\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 12), DateParserUtil.parseByDateFormat(\"12/5/2019\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // M[/][-]d[[/][-]uuuu] --\u003e M-d[-uuuu]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Must use an obvious month to differentiate month from dayOfMonth"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 12, 25), DateParserUtil.parseByDateFormat(\"12-25\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 12, 25), DateParserUtil.parseByDateFormat(\"12-25-2019\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // If month is not differentiable from dayOfMonth"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 5, 12), DateParserUtil.parseByDateFormat(\"12-5\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 12), DateParserUtil.parseByDateFormat(\"12-5-2019\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // uuuu[/][-]M[/][-]d --\u003e uuuu/M/d (compulsory year)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 25), DateParserUtil.parseByDateFormat(\"2019/05/25\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 5, 25), DateParserUtil.parseByDateFormat(\"2020/5/25\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // uuuu[/][-]M[/][-]d --\u003e uuuu-M-d (compulsory year)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 25), DateParserUtil.parseByDateFormat(\"2019-05-25\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 5, 25), DateParserUtil.parseByDateFormat(\"2020-5-25\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d-MMM[-uuuu] (Short month)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-Aug\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-Aug-2019\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Insensitive case"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 2, 12), DateParserUtil.parseByDateFormat(\"12-FEB\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 3, 12), DateParserUtil.parseByDateFormat(\"12-mAR-2019\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d-MMMM[-uuuu] (Long month)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-August\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-August-2019\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Insensitive case"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 2, 12), DateParserUtil.parseByDateFormat(\"12-FEBruarY\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 3, 12), DateParserUtil.parseByDateFormat(\"12-mARCh-2019\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(DateParserUtil.parseByDateFormat(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByNaturalDay() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parseByNaturalDay(null, currDate));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // today"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 7), DateParserUtil.parseByNaturalDay(\"tdy\", currDate));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 7), DateParserUtil.parseByNaturalDay(\"today\", currDate));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, DateParserUtil.parseByNaturalDay(\"TODAY\", currDate).compareTo(currDate));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // tomorrow"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tmr\", currDate));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tomorrow\", currDate));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, DateParserUtil.parseByNaturalDay(\"TOMORROW\", currDate).compareTo(currDate));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // day of weeks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 14), DateParserUtil.parseByNaturalDay(\"mon\", currDate));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 14), DateParserUtil.parseByNaturalDay(\"MONDAY\", currDate));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.MONDAY, DateParserUtil.parseByNaturalDay(\"MONDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"Tues\", currDate));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tue\", currDate));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tuesday\", currDate));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.TUESDAY, DateParserUtil.parseByNaturalDay(\"TUESDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 9), DateParserUtil.parseByNaturalDay(\"weD\", currDate));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 9), DateParserUtil.parseByNaturalDay(\"wednesday\", currDate));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.WEDNESDAY, DateParserUtil.parseByNaturalDay(\"WEDNESDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 10), DateParserUtil.parseByNaturalDay(\"tHu\", currDate));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 10), DateParserUtil.parseByNaturalDay(\"Thurs\", currDate));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 10), DateParserUtil.parseByNaturalDay(\"thursday\", currDate));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.THURSDAY, DateParserUtil.parseByNaturalDay(\"THURSDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 11), DateParserUtil.parseByNaturalDay(\"fri\", currDate));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 11), DateParserUtil.parseByNaturalDay(\"friday\", currDate));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.FRIDAY, DateParserUtil.parseByNaturalDay(\"FRIDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 12), DateParserUtil.parseByNaturalDay(\"sat\", currDate));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 12), DateParserUtil.parseByNaturalDay(\"saturday\", currDate));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.SATURDAY, DateParserUtil.parseByNaturalDay(\"SATURDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 13), DateParserUtil.parseByNaturalDay(\"sun\", currDate));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 13), DateParserUtil.parseByNaturalDay(\"sundaY\", currDate));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.SUNDAY, DateParserUtil.parseByNaturalDay(\"SUNDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(DateParserUtil.parseByNaturalDay(\"\", currDate));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, \"1 o/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY + INVALID_NRIC_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                + TAG_DESC_FRIEND + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // nric"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 12,
      "xz0127": 40,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"S12347B\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_DATE_1 \u003d \"20-Aug-2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_DATE_2 \u003d \"1-1-1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_TIME_1 \u003d \"midnight\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_TIME_2 \u003d \"2359am\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String VALID_DATE \u003d \"20-AUG-2035\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String VALID_TIME \u003d \"noon\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, Date.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e ParserUtil.parseDate(INVALID_DATE_1));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, DateParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e ParserUtil.parseDate(INVALID_DATE_2));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date expectedDate \u003d new Date(LocalDate.of(2035, 8, 20));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date expectedDate \u003d new Date(LocalDate.of(2035, 8, 20));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime(null));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, Time.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e ParserUtil.parseTime(INVALID_TIME_1));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, TimeParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e ParserUtil.parseTime(INVALID_TIME_2));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time expectedTime \u003d new Time(LocalTime.of(12, 0));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time expectedTime \u003d new Time(LocalTime.of(12, 0));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 76,
      "xz0127": 6,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TimeParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TimeParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse_invalidTimeString_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, TimeParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e TimeParserUtil.parse(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeParserUtil.parse(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // formatted time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(14, 45), TimeParserUtil.parse(\"02:45PM\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // natural time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parse(\"morning\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByTimeFormat() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeParserUtil.parseByTimeFormat(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // 24h format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(23, 59), TimeParserUtil.parseByTimeFormat(\"2359\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(2, 11), TimeParserUtil.parseByTimeFormat(\"0211\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // 12h time format with min"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(0, 55), TimeParserUtil.parseByTimeFormat(\"12:55am\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 55), TimeParserUtil.parseByTimeFormat(\"12:55pm\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(2, 35), TimeParserUtil.parseByTimeFormat(\"02:35AM\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(14, 35), TimeParserUtil.parseByTimeFormat(\"2:35PM\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // with spacing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(0, 55), TimeParserUtil.parseByTimeFormat(\"12:55 am\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(2, 35), TimeParserUtil.parseByTimeFormat(\"02:35 AM\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // 12h time format with no min given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(3, 0), TimeParserUtil.parseByTimeFormat(\"3am\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(15, 0), TimeParserUtil.parseByTimeFormat(\"3pM\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(10, 0), TimeParserUtil.parseByTimeFormat(\"10AM\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByTimeFormat(\"10PM\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // with spacing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(10, 0), TimeParserUtil.parseByTimeFormat(\"10 AM\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByTimeFormat(\"10 PM\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(TimeParserUtil.parseByNaturalTime(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByNaturalTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeParserUtil.parseByNaturalTime(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Morning"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parseByNaturalTime(\"morning\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parseByNaturalTime(\"sunrise\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parseByNaturalTime(\"breakfast\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Noon"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"NOON\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"afterNoon\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"after-noon\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"lunch\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Evening"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(19, 0), TimeParserUtil.parseByNaturalTime(\"eve\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(19, 0), TimeParserUtil.parseByNaturalTime(\"eVeNiNg\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(19, 0), TimeParserUtil.parseByNaturalTime(\"dinner\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Night"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByNaturalTime(\"night\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByNaturalTime(\"bedTime\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByNaturalTime(\"Bed-Time\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Midnight"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(23, 59), TimeParserUtil.parseByNaturalTime(\"midnight\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(TimeParserUtil.parseByNaturalTime(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPatientList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPatients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPatient(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_patientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(addressBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_patientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(addressBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(addressBook.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPatientList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * A stub ReadOnlyAddressBook whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddressBookStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 31,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AppointmentBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.exceptions.OverlappingAppointmentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentBookTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final AppointmentBook appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(Collections.emptyList(), appointmentBook.getAppointmentList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appointmentBook.resetData(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //  Wait for assign command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //        AppointmentBook newData \u003d getTypicalAppointmentBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //        appointmentBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //        assertEquals(newData, appointmentBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void resetData_withOverlappingAppointments_throwsOverlappingAppointmentException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment editedAppointmentOne \u003d new AppointmentBuilder(APPOINTMENT_ONE).withStartTime(LocalTime.of(9, 30))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(APPOINTMENT_ONE, editedAppointmentOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBookStub newData \u003d new AppointmentBookStub(newAppointments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertThrows(OverlappingAppointmentException.class, () -\u003e appointmentBook.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e appointmentBook.hasPatient(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //    public void hasPatient_patientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //        assertFalse(addressBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //    public void hasPatient_patientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //        assertTrue(addressBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //    public void hasPatient_patientWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //        addressBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //        assertTrue(addressBook.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e appointmentBook.getAppointmentList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * A stub ReadOnlyAppointmentBook whose appointments list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private static class AppointmentBookStub implements ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AppointmentBookStub(Collection\u003cAppointment\u003e patients) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            this.appointments.setAll(patients);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return appointments;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 14,
      "YangYue128-helen": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_TWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.testutil.AppointmentBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(new AppointmentBook(), new AppointmentBook(modelManager.getAppointmentBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_patientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_patientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBookBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withAppointment(APPOINTMENT_ONE).withAppointment(APPOINTMENT_TWO).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBook differentAppointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, appointmentBook, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, appointmentBook, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, appointmentBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // different appointmentBook -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentAppointmentBook, userPrefs)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, appointmentBook, userPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, appointmentBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 16,
      "-": 111,
      "YangYue128-helen": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AppointmentComparator comparator \u003d new AppointmentComparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsBefore_returnNegative() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 2)).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 3)).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(-1, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, same date (not overlapping)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(9, 0)).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 30)).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(-1, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsAfter_returnPositive() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 3)).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 2)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, same date (not overlapping)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 30)).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(9, 0)).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsOverlapping_returnZero() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, but overlapping"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 0)).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 30)).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, but overlapping"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same appointment time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentAfter, appointmentAfter));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentBefore, appointmentBefore));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentIdTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date testDate \u003d new Date(LocalDate.of(2020, 2, 2));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date testDate1 \u003d new Date(LocalDate.of(2019, 11, 24));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time testTime2 \u003d new Time(LocalTime.of(13, 30));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AppointmentId(null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_correctValue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"202002021200\", new AppointmentId(testDate, testTime).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"201911241200\", new AppointmentId(testDate1, testTime).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"202002021330\", new AppointmentId(testDate, testTime2).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"201911241330\", new AppointmentId(testDate1, testTime2).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentId appointmentIdTest \u003d new AppointmentId(testDate, testTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentId appointmentIdTestCopy \u003d new AppointmentId(testDate, testTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentIdTest.equals(appointmentIdTestCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentIdTest.equals(appointmentIdTest));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate1, testTime)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate, testTime2)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate1, testTime2)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isOverlapping() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e APPOINTMENT_ONE.isOverlapping(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2019, 12, 20)).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2019, 12, 20))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(13, 30)).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same date, same time, different patient id -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withPatientId(new Nric(\"T0134567B\")).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later date -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e APPOINTMENT_ONE.isBefore(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same start time and same date, different patientId -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withPatientId(new Nric(\"T0134567B\")).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e APPOINTMENT_ONE.isAfter(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same start time and same date, different patientId -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withPatientId(new Nric(\"T0134567B\")).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentOneCopy \u003d new AppointmentBuilder(APPOINTMENT_ONE).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.equals(appointmentOneCopy));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.equals(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(null));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(5));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different Appointment -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(APPOINTMENT_TWO));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2010, 10, 10)).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(editedOne));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(15, 15)).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(editedOne));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withPatientId(new Nric(\"T0134567B\")).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(editedOne));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 212,
      "ZhangWanlin98": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate currDate \u003d LocalDate.of(2020, 5, 5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidAppointmentDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidAppointmentDate(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Date.isValidAppointmentDate(currDate.minusDays(5), currDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Date.isValidAppointmentDate(currDate.minusMonths(1), currDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Date.isValidAppointmentDate(currDate, currDate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Date.isValidAppointmentDate(currDate.plusDays(5), currDate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Date.isValidAppointmentDate(currDate.plusMonths(1), currDate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toStringBasedOn() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate testDate \u003d LocalDate.of(2020, 6, 6);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"Saturday, Jun 06 2020\", new Date(testDate).toStringBasedOn(currDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"Today\", new Date(testDate).toStringBasedOn(testDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date testDate \u003d new Date(LocalDate.of(2020, 6, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testDate.isBefore(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is before input --\u003e true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isBefore(new Date(LocalDate.of(2020, 7, 6))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isBefore(new Date(LocalDate.of(2020, 6, 7))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is same as input --\u003e false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(testDate));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(LocalDate.of(2020, 6, 6))));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is after input --\u003e false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(LocalDate.of(2020, 5, 6))));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(LocalDate.of(2020, 6, 5))));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date testDate \u003d new Date(LocalDate.of(2020, 6, 6));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testDate.isAfter(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is after input --\u003e true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isAfter(new Date(LocalDate.of(2020, 5, 6))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isAfter(new Date(LocalDate.of(2020, 6, 5))));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is same as input --\u003e false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(testDate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(LocalDate.of(2020, 6, 6))));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is before input --\u003e false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(LocalDate.of(2020, 7, 6))));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(LocalDate.of(2020, 6, 7))));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date dateTest \u003d new Date(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date dateTestCopy \u003d new Date(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(dateTest.equals(dateTestCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(dateTest.equals(dateTest));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(5));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(new Date(LocalDate.of(2020, 6, 6))));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/NaturalDayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class NaturalDayTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MONDAY.contains(\"Monday\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TUESDAY.contains(\"Tues\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.WEDNESDAY.contains(\"Wed\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.THURSDAY.contains(\"Thursday\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.FRIDAY.contains(\"friDay\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.SATURDAY.contains(\"SATURDAY\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.SUNDAY.contains(\"sun\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TODAY.contains(\"tdy\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TOMORROW.contains(\"tmr\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.YESTERDAY.contains(\"yesterday\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MIDNIGHT.contains(\"midnight\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.NOON.contains(\"Noon\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MORNING.contains(\"breakfast\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.EVENING.contains(\"eve\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.NIGHT.contains(\"night\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.MIDNIGHT.contains(\"Monday\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.EVENING.contains(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.FRIDAY.contains(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.WEDNESDAY.contains(\"123\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NaturalDay.parse(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // natural day found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MONDAY, NaturalDay.parse(\"Monday\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TUESDAY, NaturalDay.parse(\"Tues\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.WEDNESDAY, NaturalDay.parse(\"Wed\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.THURSDAY, NaturalDay.parse(\"Thursday\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.FRIDAY, NaturalDay.parse(\"friDay\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.SATURDAY, NaturalDay.parse(\"SATURDAY\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.SUNDAY, NaturalDay.parse(\"sun\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TODAY, NaturalDay.parse(\"tdy\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TOMORROW, NaturalDay.parse(\"tmr\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.YESTERDAY, NaturalDay.parse(\"yesterday\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MIDNIGHT, NaturalDay.parse(\"midnight\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.NOON, NaturalDay.parse(\"Noon\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MORNING, NaturalDay.parse(\"breakfast\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.EVENING, NaturalDay.parse(\"eve\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.NIGHT, NaturalDay.parse(\"night\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // no natural day found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(NaturalDay.parse(\"\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(NaturalDay.parse(\"123\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // valid local times"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourBeforeOpening \u003d Time.OPENING_TIME.minusHours(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourAfterClosing \u003d Time.CLOSING_TIME.plusHours(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // invalid local times"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourAfterOpening \u003d Time.OPENING_TIME.plusHours(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourBeforeClosing \u003d Time.CLOSING_TIME.minusHours(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(oneHourBeforeOpening));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(oneHourAfterClosing));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(oneHourBeforeOpening));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(oneHourAfterClosing));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(LocalTime.MIDNIGHT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // valid times"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(LocalTime.NOON));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(oneHourAfterOpening));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(oneHourBeforeClosing));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidStartTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidStartTime(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(oneHourBeforeOpening));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(oneHourAfterClosing));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(Time.CLOSING_TIME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(LocalTime.MIDNIGHT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // valid times"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidStartTime(LocalTime.NOON));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidStartTime(oneHourAfterOpening));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidStartTime(oneHourBeforeClosing));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testTime.isBefore(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is before input --\u003e true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isBefore(new Time(LocalTime.of(15, 0))));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isBefore(new Time(oneHourBeforeClosing)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is equal to input --\u003e false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(LocalTime.NOON)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is after input --\u003e false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(LocalTime.of(11, 0))));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(oneHourAfterOpening)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testTime.isAfter(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is after input --\u003e true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isAfter(new Time(LocalTime.of(11, 0))));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isAfter(new Time(oneHourAfterOpening)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is equal to input --\u003e false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(LocalTime.NOON)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is before input --\u003e false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(LocalTime.of(15, 0))));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(oneHourBeforeClosing)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time timeTest \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time timeTestCopy \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(timeTest.equals(timeTestCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(timeTest.equals(timeTest));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(new Time(LocalTime.of(13, 0))));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 12,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void isSamePatient() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 23,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"a1234567G\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_TAGS, VALID_NRIC);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                VALID_NRIC);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        VALID_NRIC);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                VALID_NRIC);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        VALID_NRIC);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_TAGS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                VALID_NRIC);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ADDRESS, invalidTags,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        VALID_NRIC);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 27,
      "Avalionnet": 8,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void readAddressBook_invalidPatientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPatientAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void readAddressBook_invalidAndValidPatientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPatientAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddressBook typicalPatientsAddressBook \u003d TypicalPatients.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPatientsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Adds a new {@code Patient} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public AddressBookBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        addressBook.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppointmentBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * A utility class to help with building AppointmentBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " *     {@code AppointmentBook ab \u003d new AppointmentBookBuilder().withAppointment(appointment_1\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private AppointmentBook appointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBookBuilder(AppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.appointmentBook \u003d appointmentBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Adds a new {@code Patient} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBookBuilder withAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointmentBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "YangYue128-helen": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppointmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class to help with building Appointment objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.of(2020, 12, 23);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Nric DEFAULT_PATIENT_IC \u003d new Nric(\"S1234567A\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private Nric patientId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an {@code AppointmentBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        startTime \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        patientId \u003d DEFAULT_PATIENT_IC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder(Appointment appointmentToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date \u003d appointmentToCopy.getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        startTime \u003d appointmentToCopy.getStartTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patientId \u003d appointmentToCopy.getPatientId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code Date} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withDate(LocalDate date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the start time of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withStartTime(LocalTime time) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.startTime \u003d new Time(time);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the patient\u0027s {@code IC} for the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public AppointmentBuilder withPatientId(Nric patientId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.patientId \u003d patientId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Appointment(date, startTime, patientId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 65,
      "ZhangWanlin98": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DateTimeLoaderBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DateTimeLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.DateParserUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.TimeParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class to help with building DateTimeLoader objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DateTimeLoaderBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final DateTimeLoader loader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder(DateTimeLoader loader) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.loader \u003d new DateTimeLoader(loader);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Returns an {@code DateTimeLoaderBuilder} with fields containing {@code appointment}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder(Appointment appointment) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentDate(appointment.getDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentTime(appointment.getStartTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code date} of the {@code DateTimeLoader} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder withDate(String date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            loader.setAppointmentDate(new Date(DateParserUtil.parse(date)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // ignore, fallthrough expected"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code time} of the {@code DateTimeLoader} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder withTime(String time) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            loader.setAppointmentTime(new Time(TimeParserUtil.parse(time)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // ignore, fallthrough expected"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoader build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return loader;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 17,
      "ZhangWanlin98": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.descriptor \u003d new EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setAddress(patient.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setTags(patient.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setNric(patient.getNric());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Nric} of the {@code Nric} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1234567U\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        address \u003d patientToCopy.getAddress();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        nric \u003d patientToCopy.getNric();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Address} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Nric} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new Patient(name, phone, address, tags, nric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an add command string for adding the {@code patient}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static String getAddCommand(Patient patient) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the part of command string for the given {@code patient}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_NRIC + patient.getNric().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patient.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 2,
      "xz0127": 16,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAppointments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class containing a list of {@code Appointment} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TypicalAppointments {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_ONE \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 1, 1))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(9, 0))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            .withPatientId(new Nric(\"S9234567A\")).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_TWO \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 5, 12))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(11, 30))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            .withPatientId(new Nric(\"T0034567B\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_THREE \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 1, 1))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(20, 0))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            .withPatientId(new Nric(\"S9734567H\")).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_FOUR \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 5, 22))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(14, 0))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            .withPatientId(new Nric(\"T0234567K\")).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_FIVE \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 5, 22))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(15, 0))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            .withPatientId(new Nric(\"S9234567A\")).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_SIX \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 4, 1))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(11, 30))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            .withPatientId(new Nric(\"T0034567B\")).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private TypicalAppointments() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //     /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //      * Returns an {@code AppointmentBook} with all the typical Appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //      */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //     public static AppointmentBook getTypicalAppointmentBook() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //         AppointmentBook ab \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //         for (Appointment Appointment : getTypicalAppointments()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //             ab.addAppointment(Appointment);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //         }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //         return ab;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static List\u003cAppointment\u003e getTypicalAppointments() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                APPOINTMENT_ONE, APPOINTMENT_TWO, APPOINTMENT_THREE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                APPOINTMENT_FOUR, APPOINTMENT_FIVE, APPOINTMENT_SIX));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 52,
      "ZhangWanlin98": 7,
      "YangYue128-helen": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withPhone(\"94351253\").withNric(\"S1234567I\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withNric(\"S1234567O\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"S1234567P\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"S1234567L\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"T1234567P\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"T0234567P\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"T0034567P\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical patients."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            ab.addPatient(patient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 6,
      "xz0127": 32,
      "-": 41
    }
  }
]
