[
  {
    "path": "ClassDesignDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "abstract class AbstractList"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "abstract AbstractCollection"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface List"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface Collection"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "List \u003c|-- AbstractList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Collection \u003c|-- AbstractCollection"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Collection \u003c|- List"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AbstractCollection \u003c|- AbstractList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AbstractList \u003c|-- ArrayList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class ArrayList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Object[] elementData"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "size()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "enum TimeUnit {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "DAYS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "HOURS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "MINUTES"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 26
    }
  },
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions in one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "For detailed documentation of this project, refer to the [StudyBananas Website](https://ay2021s1-cs2103t-f12-2.github.io/tp/)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "For details on our project team members, do check out the [AboutUs](https://github.com/AY2021S1-CS2103T-F12-2/tp/blob/master/docs/AboutUs.md) page."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Curious to know how to use StudyBananas? We\u0027ve got you! You may refer to the [User Guide](https://github.com/AY2021S1-CS2103T-F12-2/tp/blob/master/docs/UserGuide.md) for more details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## Developer Guide"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "If you would like to contribute to this project, do head over to [Developer Guide](https://github.com/AY2021S1-CS2103T-F12-2/tp/blob/master/docs/DeveloperGuide.md) to get started!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This project is morphed from the AddressBook-Level3 project, created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 16,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "mainClassName \u003d \u0027seedu.studybananas.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jdk8\u0027, version: \u00272.12.0-rc1\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    archiveName \u003d \u0027StudyBananas.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "run {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 1,
      "chuyiting": 1,
      "bowei-yu": 5,
      "-": 69
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "You may reach us through the following email addresses:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Joe Teddy Yosua Sanjaya: joe.teddy@u.nus.edu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Yu Bowei: e0425419@u.nus.edu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Eddy Chu: e0418218@u.nus.edu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Ngo Duc Binh: e0271216@u.nus.edu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Petrick Jerico Gustendi: e0425802@u.nus.edu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Joe Teddy Yosua Sanjaya"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/cupofjoee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "[[github](https://github.com/cupofjoee)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "[[portfolio](team/joeteddy.md)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* Responsibilities: Dev Ops"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### Yu Bowei"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/bowei-yu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[[github](http://github.com/bowei-yu)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[[portfolio](team/bowei-yu.md)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "### Eddy Chu"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/chuyiting.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "[[github](http://github.com/chuyiting)] "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "[[portfolio](team/eddychu.md)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### Ngo Duc Binh"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/ducbinh2611.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "[[github](http://github.com/ducbinh2611)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "[[portfolio](team/ducbinh2611.md)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "### Petrick Jerico Gustendi"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cimg src\u003d\"images/petrickjerico.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[[github](http://github.com/petrickjerico)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[[portfolio](team/petrickjerico.md)]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "petrickjerico": 9,
      "cupofjoee": 9,
      "bowei-yu": 6,
      "chuyiting": 3,
      "-": 36
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "## **StudyBananas Architecture**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "StudyBananas is an integration of 4 systems, namely AddressBook3(AB3), Schedule, Quiz, Flashcard. Structure-wise, our team decided to stick to the original architecture of the AB3 (see architecture diagram above). Nonetheless, this decision incurs strong couplings between systems in each components. Therefore, we introduce layers of abstraction for each components to reduce the couplings. This section describes how we implement each component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![architectureDiagram](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "### Model"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Reasoning"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "In the original implementation of AB3, `ModelManager` which implements `Model` interface serves as the API to interact with other components. We preserve the convention and leave `ModelManager` as our **\"one and only\"** API for Model component. This decision has brought about the following pros and cons."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Pros: It simplifies the system, as `Model` contains every methods that other components need. It makes cooperation easier and vastly reduces the time that other developers need to spend on understanding multiple APIs and makes the code cleaner when working with other components.  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Cons: "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    1. It breaks Single Responsibility Principle, for `Model`is no longer only responsible for the AB3, it holds accountable for 4 systems at the same time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    2. It breaks Interface Segregation Principle when writing ModelStubs for the unit tests and incur tons of conflicts when 4 systems are developed at the same time. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Hugely fond of the great advantage of single API Model system, our team built a structure which segregates the Model API into the 4 systems but at the same time integrates all Models with the **\"one and only one\"** API class ModelManager. The following is the step by step guide of how we create the structure and can be followed to integrate more systems to StudyBananas."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step1. Create XYZModel interfaces for each system which can be viewed as 4 APIs for 4 SystemModel, and have our API `Model` interface extends from all of them to make sure that `Model` still contains all the methods that other components require."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step1](images/ModelStructure-Step1.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step2. Create XYZModelManagers which implement the XYZModel and handles the real \"operations\" for XYZModels."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step2](images/ModelStructure-Step2.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step3. Create system-level Models (Addressbook, Schedule, Flashcard, Quiz) which are the \"real\" Models. (**Note:** XYZModelManagers are APIs for these system-level Models.) Then, have XYZModelManagers depend on these system-level Models. (**Note:** system-level models represents the persistence layer for each system and system-level is relative to lower level Models e.g. Address, Tag, Title...)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step3](images/ModelStructure-Step3.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step4. Finally, create our **\"one and only one\"** Model component API class - `ModelManager` which implements the `Model` interface and contains all the ModelManagers. In this way, although the `ModelManager` still contains all the methods from 4 individual systems. It can be viewed as a dummy class which does not contain any implementation. All implementations are in the ModelManagers. Therefore, during the unit tests, we create XYZModelStubs which contains only methods that are related to the SUT."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step4](images/ModelArchitectureDiagram.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Analysis"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Pros: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    1. It preserves the advantage of easier and faster cooperation from the reasoning section."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    2. It solves the second disadvantage in the reasoning section by one more layer of segregation."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    3. Although adding new systems still requires adding methods in the Model interface, it makes sure, there is no need to modify the old codes or modify the test case implementation. Therefore, it meets the Open-Closed Principle."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Cons: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    1. It still breaks the Single Responsibility Principle, for `Model`is no longer only responsible for the AB3, it holds accountable for 4 systems at the same time."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### [Proposed] Flashcard"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "The proposed mechanisms to manage is facilitated by `FlashcardBank`. The `FlashcardBank` contains a list of `FlashcardSet`. Each `FlashcardSet` contains a list of `Flashcard`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "![Flashcard Class Diagram](diagrams/FlashcardClassDiagram.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### Edit Task feature"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "The edit mechanism is facilitated by `Schedule`, which contains a `UniqueTaskList` such that each task\u0027s information can be modified "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "after its creation and addition into the `UniqueTaskList`. It implements this following feature:  "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* `Schedule#setTask()` — Replaces an existing task in the `UniqueTaskList` with a new task."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "These operations are exposed in the `ScheduleModel` interface as `ScheduleModel#setTask()`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Given below is the example usage scenario and how the edit task mechanism behaves at each step."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Step 1. The user launches the application. The `Schedule` is initialized with the user\u0027s saved Schedule, which is saved in the JSON file `schedule.json` locally."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "For example, the user already has 3 tasks in the beginning."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![EditCommand0](images/EditCommand0.png) "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Step 2. The user executes `add task T: CS2100 d: Tutorial 8 homework`, adding a new task with a title \"CS2100\", the description \"Tutorial 8 homework\" with the unspecified date into the schedule. This task is assigned the index 4 in the `Schedule`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![EditCommand1](images/EditCommand1.png) "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Step 3. The user now knows what is the due date of the currently added task, and decides to edit the relevant time information of the task by executing the `edit task 4 t: 2020-10-21 10:00`. The `edit task` command calls `ScheduleEditCommand#execute()`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " to generate a new task, containing the updated information, for the fields that is not specified in the `edit task` command, such as `title` or `description` in the example, the new task "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " copies the existing fields of the to-be-replaced task. It is followed by calling `ScheduleModelManager#setTask()` to replace the to-be-replaced task at index 4 with the new edited task."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " ![EditCommand2](images/EditCommand2.png) "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** `ScheduleEditCommand#execute()` creates a new task sharing some of the overlapped fields with the to-be-replaced task. Then `ScheduleModelManager#setTask()` sets the to-be-replaced task with the newly created task at index 4 of the `Schedule`.  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "The following sequence diagram shows how the edit task operation works:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " ![EditTaskSeqDiagram](images/EditTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "##### Aspect: How edit task executes"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Alternative 1 (current choice):** Creates the new edited task object to replace the to-be-replaced task object."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Pros: Update the Schedule consistently throughout the program so that side-effects, such as there are 2 versions of Schedule, can be avoided."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage as the replaced task object still remains in the memory."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Alternative 2:** Mutate the task object itself in the Schedule at the corresponding index."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Pros: Will use less memory as there is no new creation of task object."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Cons: May result in side-effects such as there are out-of-dated versions of Schedule throughout the program."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### \\[Proposed\\] Quiz with storage of answers feature"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The proposed quiz with storage of answers mechanism is facilitated by `Quiz` and `QuizModelManager`, which implements the `QuizModel` interface. "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "It makes use of an array of answer strings as an attribute, stored within a `Quiz` object as `userAnswers`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Additionally, it implements the following core operations with `Quiz`, which is called by `QuizModelManager`:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#start(Quiz quiz)` — Starts the quiz by initiating the quiz object in the model, "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "iterating through the associated flashcard set and showing the first question in the flashcard set."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The presence of at most one quiz object ensures that at most one quiz running at a time."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#hasStarted()` — Checks if a quiz has started. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This prevents multiple quizzes from running concurrently."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#tallyScore(boolean isCorrect)` — Tallies the score after each answer is shown, "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "depending on user\u0027s judgement of correctness."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#getQuestion()` — Obtains the question of the next flashcard in the flashcard set."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#getAnswer()` — Obtains the answer of the next flashcard in the flashcard set."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#stopQuiz()` — Stops the quiz. This method is called at the end of the flashcard set iteration. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#cancelQuiz()` — Cancels the quiz. "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This method is called when the user cancels the quiz before reaching the end of the flashcard set."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#getQuizRecords(FlashcardSetName name)` — Fetches the quiz score based on the associated flashcard set\u0027s name. "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The score includes: "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * the number of correct answers out of the total score within the flashcard set, and percentage scored."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * the set of questions, the corresponding correct answers and the answers provided by the user"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * whether each question was answered correctly."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "These operations are as exactly written in the `QuizModel` and `Model` interface."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Given below is an example usage scenario and how the quiz with storage of answers mechanism behaves at each step."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 1"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The user launches the application and starts the quiz for a non-empty, valid flashcard set. "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "As a result, it creates a `QuizModelManager` object and a `StartCommand` object."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Assume the flashcard set contains only two flashcards for simplicity."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The call to `StartCommand#execute()` will allow the `Quiz` to be initialized with the initial quiz state with default values for score, "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "the `currentIndex` pointing to the index of the first flashcard, "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "and the current command result being the first question through the call of `Quiz#getQuestion()`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The `Quiz` is saved into the `QuizModelManager`object as an attribute named `quiz`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![StartQuizClassDiagram](images/StartQuizClassDiagram.png)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![StartQuiz](images/StartQuiz.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 2"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The user executes `ans:\u003canswer\u003e` command to submit their answer to the question. "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The `AnswerCommand` object created calls `Quiz#saveAnswer()`, "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "storing their answer into the `userAnswers` array attribute in Quiz "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "for the question before moving on to the correct answer through the call of `Quiz#getAnswer()`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The `currentIndex` attribute is incremented at this stage to point to the next flashcard."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![StoreAnswerClassDiagram](images/StoreAnswerClassDiagram.png)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 3"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "After viewing the answer, the user executes either `c` or `w` to indicate whether the question is answered correctly. "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This creates either a `CorrectCommand` or `WrongCommand` object. "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "In the case of the `CorrectCommand` class below, the call to `CorrectCommand#execute()`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "calls the `Quiz:tallyScore()` method through the interaction with `QuizModel`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This increments the `pointsScored` attribute in quiz."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The following sequence diagram shows how this step works:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![UpdateScoreSequenceDiagram](images/UpdateScoreSequenceDiagram.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The object created will check if the `currentIndex` (updated in the previous step) "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "is within bounds to obtain the next flashcard."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If there are no flashcards left, the quiz exits."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "In the current scenario, the question of the next flashcard is fetched and displayed"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "by calling the `Quiz:getQuestion()` method,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "through `QuizModelManager`, during the execution of `CorrectCommand:execute()`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![NextQuestion](images/NextQuestion.png)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 4"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Assume that the user has reached the end of the flashcards as shown below:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![OutOfIndex](images/OutOfIndex.png)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "From the `CorrectCommand:execute()` / `WrongCommand:execute()` operation, "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "the `QuizModelManager:stopQuiz()` operation will be called."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This stops the quiz by removing the `Quiz` object stored in the `quiz` "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "attribute of `QuizModelManager`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This leads to also calling the `Quiz:toString()` operation to show the quiz score and statistics."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![CommitActivityDiagram](images/QuizStorageActivityDiagram.png)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Aspect: How quiz with storage of answers executes"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Current choice** ."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "### Sidebar view"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "The implementation of the Sidebar view is designed using the Singleton pattern and the Observer Pattern. Global Ui state which stores the UiState is designed to be singleton - `SingletonUiState`. The `SingletonUiState` is created when the application is launched, and `SingletonUiState` implements `Observable` interface, making it observable to other ui components. `MainWindow` and `SidebarTab` implements the `Observer` interface and subscribe to the change of `SingletonUiState` to achieve the sidebar effect."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observable#register(Observer o)` — Register a certain Observer to an Observable object, after registration, the observer object will be notified on any update of the Observable object."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observable#inform()` — When the observable object is modified, use this method to inform all the subscribed observers."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observer#subscribe(Observable o)` — Help the Observer class subscribes to an Observable Object."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observer#update()` — This is the API for the Observer object to modify the Observable object and further helps inform all the subscribers."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "The concrete implementation of these methods lies in the `MainWindow`, `SidebarTab`, and `SingletonUiState`, with `MainWindow` and `SidebarTab` being `Observer` and `SingletonUiState` being Observable"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Given below is an example usage scenario and how the sidebar view mechanism behaves at each step."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 1. The user launches the application for the first time. The `MainWindow` will initialize the `SingletonUiState` with the default state `Schedule` which represents the view of Schedule system, and then subscribe to it."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep1](images/SidebarStep1.png)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 2. When the `Sidebar` is initiated, the `SidebarTab`s contained will subscribe to the changes of SingleUiState. "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep2](images/SidebarStep2.png)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 3. When a user click on any `SidebarTab`, `SidebarTab` would update the `SingletonUiState`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep3](images/SidebarStep3.png)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 4. After the `SingletonUiState` is updated, it will then go ahead to update all the observers and change the view."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep4](images/SidebarStep4.png)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "The following sequence diagram shows how the switching between tabs works, the example clicks the schedule tab:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![UndoSequenceDiagram](images/SidebarSequenceDiagram.png)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* Multiple Ui components rely on the Global UiState, therefore, Singleton makes sense here."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* Many components would be affected by the change of UiState, it makes sense to build it using Observer pattern."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* is a student, at upper secondary or tertiary education level"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* has a need to keep track of study tasks and test their understanding of what is learnt"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* manage study tasks and test learnt knowledge faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* centralize all study tasks and set up focused study sessions in one place"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| Priority | As a …                                                         | I want to …                                                                                 | So that I can…                                                                     |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| -------- | -------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student                                                        | take advantage of the flashcard learning technique                                          | memorize important facts/parts of the notes more efficiently and organizedly.      |"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Learner who takes advantage of flashcard learning              | be able to create custom flashcards                                                         | store my notes in the form of flashcards which optimises my flashcard learning.    |"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | User                                                           | delete my flashcards which are no longer in use                                             | manage my own flashcards.                                                          |"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who learns by tests                                    | test myself                                                                                 | learn more effectively.                                                            |"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Hard-working flashcard-learning user                           | create tests with the flashcard notes created by myself                                     | see how good my learning outcome is.                                               |"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | User who learns by quizzing his/herself a lot                  | look back on my quiz attempts                                                               | evaluate how much more efforts I need to put in the section.                       |"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who regularly revises my concepts using flashcards     | see the detailed answering history for my past quiz attempts                                | evaluate which concepts are still unclear to me and spend more time on those.      |"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who regularly revises my concepts using flashcards     | see my quiz statistics                                                                      | know which part I do well and where I need improvement on in an objective manner.  |"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who has tons of homework and exams                     | have a to-do list that organizes my study plan                                              | plan my schedule more effectively.                                                 |"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who has a lot of homework and assignments              | create a homework to-do list                                                                | keep track of what tasks I need to complete.                                       |"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who frequently forgets my own homework and assignments | list out all the homework                                                                   | view what to do.                                                                   |"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| `* * *`  | Student who wants to look up certain homework and assignments  | search or filter the list of homeworks and assignments                                      | see the information for a specific homework.                                       |"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Savvy learner who wishes to track my study sessions            | schedule my study plan                                                                      | play myself more effectively.                                                      |"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Savvy learner who wishes to track my study sessions            | put my todo task in my schedule                                                             | plan my todo tasks more organizedly without missing any deadlines.                 |"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Extremely organised learner                                    | have a timer which runs during the scheduled period of time                                 | make the best use of my time                                                       |"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Student who organises the schedule carefully                   | leave feedback for each of my study session                                                 | know my learning efficiency during each session and make my new plans based on it. |"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `*`      | Super busy student                                             | have AI to schedule my todo lists based on my past studying statistics automatically for me | rely on the AI to make the best use of my time.                                    |"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "(For all use cases below, the **System** is the `StudyBananas` and the **Actor** is the `user`, unless specified otherwise)  "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC01 Create a set of flashcards"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. User adds a new empty set of flashcards with a given name."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "2. User \u003cins\u003e UC02 create and add an individual flashcard into a set \u003c/ins\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3. Repeat 2 until all flashcards for the set are added.  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 1a. Missing parameter - empty set name. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   * a1. StudyBananas shows a missing parameter error message.  "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Use case: UC02 Create and add an individual flashcard into a set"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. User defines the question and answer of the flashcard."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. User \u003cins\u003e UC03 see all existing flashcard sets \u003c/ins\u003e."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. User adds the flashcard to the set using the flashcard set index.  "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 1a. Missing parameter - question, answer or index of the flashcard set."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. Shows missing parameter error message.  "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC03 See all existing flashcard sets"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User requests for the list of flashcards."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. StudyBananas shows the list of flashcards.  "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC04 Delete a flashcard set"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User \u003cins\u003e UC03 see all existing flashcard sets. \u003c/ins\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. User enters the index to delete the set.  "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 1a. There are no existing flashcard sets.  "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. Invalid index"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * a1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC05 See all flashcards in a flashcard set"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User \u003cins\u003e UC03 see all existing flashcard sets \u003c/ins\u003e."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. User requests for the list of flashcards using a given flashcard set index."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. StudyBananas shows the list of flashcards for the requested flashcard set.  "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 1a. Flashcard set is not present at entered index."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    * a1. StudyBananas shows an error to indicate the invalid index.  "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC06 Delete an individual flashcard from a set    "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "1. User \u003cins\u003e UC05 see all flashcards in a set. \u003c/ins\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. User enter the index of the set and the individual flashcard to delete it.  "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 1a. The list is empty.  "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    * a1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   Use case resumes at step 2."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC07 Quiz of flashcard set (no storage of answer)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User requests a quiz of a given flashcard set."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. StudyBananas shows the first question in the flashcard set."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. User manually answers the question."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "4. User flips the flashcard to check the answer."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "5. User indicates whether the input answer is correct or incorrect."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "6. StudyBananas loads the next flashcard.  "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   Step 2 - 6 are repeated until reaching the end of the flashcard set, or the User wants to stop the quiz halfway.  "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends.  "
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 2a. The flashcard set is empty.  "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 2b. The flashcard set does not exist.  "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 2b1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  User case ends."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 5a. The answer indicator is invalid.  "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 5a1. StudyBananas shows an error message.   "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  User case resumes at step 5."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. At any time, User chooses to cancel the quiz."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * *a1. StudyBananas requests to confirm the cancellation."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * *a2. User confirms the cancellation.  "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC08 Quiz of flashcard set (with storage of answer)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1.  User requests a quiz of a given flashcard set."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2.  StudyBananas shows the first question in the flashcard set."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3.  User keys in their answer to the question."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "4.  User flips the flashcard to check the answer."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "5.  User indicates whether the input answer is correct or incorrect."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "6.  StudyBananas stores the answer to each question and whether the answer was correct."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "7.  StudyBananas loads the next flashcard.  "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Step 2 - 6 are repeated until reaching the end of the flashcard set, or the User wants to stop the quiz halfway.  "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. The flashcard set is empty.  "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2b. The flashcard set does not exist."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 2b1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 5a. The answer indicator is invalid  "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 5a1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  User case resumes at step 5."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. At any time, User chooses to cancel the quiz."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * *a1. StudyBananas requests to confirm the cancellation."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * *a2. User confirms the cancellation.  "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC09 Add a task to the task list"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1.  User requests to add a new task to the list."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2.  StudyBananas asks for confirmation."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3.  User confirms it."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "4.  StudyBananas adds the task to the task list.  "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. User disconfirms the request."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. StudyBananas stops the process.  "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. Cancellation"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. User asks for cancellation of current command.  "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    "
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC10 Delete a task"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. The user requests to delete a certain task."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. The system asks for confirmation."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3. The user confirms it."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "4. The system deletes the task.  "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. Disconfirmation"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * 2a1. User disconfirms it."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * 2a2. System stops implementation.  "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 3a. Invalid task specified"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    * 3a1. System signals to the user that the task is invalid.  "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. Cancellation"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. User asks for cancellation of current command.  "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC11 Search for tasks"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. The user requests to search for tasks."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. The system asks for query key."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3. The user types in the query key."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "4. The system replies with all the tasks that matched the query key.  "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. Cancellation"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * *a1. User asks for cancellation of current command.  "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC12 View all tasks"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User requests to view all the tasks."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. StudyBananas shows all the tasks.  "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC13 View quiz score and past attempt"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "1. User requests to \u003cins\u003e UC03 see all available flashcard sets \u003c/ins\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. User requests for the score and past attempt of a quiz regarding a flashcard set using a given flashcard set index"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. StudyBananas shows the score and most recent past attempt for the requested flashcard set.  "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. Flashcard set is not present at entered index"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. StudyBananas shows an error to indicate the invalid index  "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case resumes at step 2."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 3a. Flashcard set has not been quizzed yet"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. StudyBananas shows an error to indicate that flashcard set has not been quizzed  "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2.  Should work without requiring an installer."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3.  The system should work on a 64-bit environment."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "4.  The system should start up in no more than 2 seconds."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "5.  The system should response to user input in less than 1 second."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "6.  The product should be for a single user."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "7.  The product should be usable by a student who has little to much experience in using computer."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "8.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "9.  The data should be stored locally and should be in a human editable text file. "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **CLI**: Command Line Interface"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **GUI**: Graphical User Interface"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Flashcard**: An object containing a question and the corresponding answer."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Flashcard Set**: A set of flashcards relevant to a specific topic. "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 141,
      "cupofjoee": 8,
      "petrickjerico": 2,
      "chuyiting": 117,
      "bowei-yu": 210,
      "-": 333
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   1. Run the `seedu.studybananas.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   e.g. `seedu.studybananas.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   e.g. `seedu.studybananas.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   e.g. `seedu.studybananas.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Are you a student of secondary to tertiary education level,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "who is a fan of **using flashcards to understand concepts**, "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "use your laptop often,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "and would like to **schedule your study sessions efficiently**?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "If so, we have the product just for you!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**StudyBananas** is a desktop study companion app that **helps you centralize your study tasks, "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "and caters to your recap needs through flashcard-quizzes**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "It is optimized for use via a Command Line Interface (CLI) while still "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This user guide aims to equip you with all necessary understanding to use StudyBananas effectively."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**Quick start**](#quick-start)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**Features**](#features)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Add a flashcard set: `add flset`](#add-a-flashcard-set-add-flset)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Delete a flashcard set: `delete flset`](#delete-a-flashcard-set-delete-flset)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [List flashcards in a flashcard set: `list fl`](#list-flashcards-in-a-flashcard-set-list-fl)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Add a flashcard into a flashcard set: `add fl`](#add-a-flashcard-into-a-flashcard-set-add-fl)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Delete a flashcard in a flashcard set: `delete fl`](#delete-a-flashcard-in-a-flashcard-set-delete-fl)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Quiz of flashcard set: `quiz flset`](#quiz-of-flashcard-set-quiz-flset)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [View last quiz attempt: `quiz score flset`](#view-last-quiz-attempt-quiz-score-flset)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Add a task: `add task`](#add-a-task-add-task)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  * [View the details of your task](#view-the-details-of-your-task)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [List tasks: `list task`](#list-tasks-list-task)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Delete a task: `delete task`](#delete-a-task-delete-task)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Search for a task: `search task`](#search-for-a-task-search-task)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Edit a task: `edit task`](#edit-a-task-edit-task)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  * [View all the available commands](#view-all-the-available-commands)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  * [Exit program: `exit`](#exit-program-exit)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**FAQ**](#faq)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**Command summary**](#command-summary)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [General commands](#general-commands)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Flashcard commands](#flashcard-commands)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Quiz commands](#quiz-commands)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Task list commands](#task-list-commands)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "2. Download the latest `study-bananas.jar` from [here](https://github.com/AY2021S1-CS2103T-F12-2/tp/releases)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your StudyBananas."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "5. Type the command in the command box and press `Enter` to execute it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   * **`list`**`flset` : Lists all flashcard sets"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * **`add`**`flset name:Chemistry` : Add a new empty set with name `Chemistry`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * **`delete`**`flset 3` : Deletes the 3rd flashcard set in the current list of flashcard sets."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   * **`add`**`task T:CS2100 d: Pipeline tutorial t:2020-10-10 11:00` : Adds Doing CS2100 task to the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "**Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* Words wrapped with angled brackets `\u003c\u003e` are compulsory parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  e.g. in `add \u003cflset:setname\u003e`, `setname` is a parameter which can be used as `add flset:Chemistry`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* Words wrapped with square brackets `[]` are optional parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  e.g. in `add task \u003cT:title\u003e [d:description]` can be used as `add task T: CS2103T d: Post-lecture quiz` or as `add taskT: CS2103T`. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  e.g. if the command specifies `\u003cflset:setindex\u003e \u003cq:question\u003e \u003ca:answer\u003e`, `\u003ca:answer\u003e \u003cq:question\u003e \u003cflset:setindex\u003e` is also acceptable."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Add a flashcard set**: `add flset`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Creates a new flashcard set with your customary name, which can then serve as folder to store and categorize your flashcards."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `add flset name:\u003csetname\u003e​`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetname\u003e` can accept names separated with spaces."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- if `\u003csetname\u003e` is already used, the app will request a new `\u003csetname\u003e`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add flset name:Japanese`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add flset name:Economics – Micro`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Delete a flashcard set**: `delete flset`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Deletes an existing flashcard set and all flashcards that it contains."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `delete flset \u003csetindex\u003e`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003csetindex\u003e` will throw an error if `setindex` does not exist."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `delete flset 1`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `delete flset 2`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **List flashcards in a flashcard set**: `list fl`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Shows the list of flashcards with details: question, answer and index."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `list fl \u003csetindex\u003e`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003csetindex\u003e` will throw an error if `setindex` does not exist."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `list fl 1`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `list fl 2`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Alternatively, you can double-click on the flashcard set."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Add a flashcard into a flashcard set**: `add fl`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Adds a single flashcard with a question and an answer in a specified flashcard set."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format:` add fl flset:\u003csetindex\u003e q:\u003cquestion\u003e a:\u003canswer\u003e`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003cquestion\u003e`, `\u003canswer\u003e` and `\u003csetindex\u003e` fields are compulsory."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003cquestion\u003e` and `\u003canswer\u003e` can accept strings that are capitalized or separated with spaces."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003csetindex\u003e` will throw an error if `setindex` does not exist."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add fl flset:1 q:konnichiwa a:hello `"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add fl flset:2 q:Is earth flat? a:Maybe!`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Delete a flashcard in a flashcard set**: `delete fl`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Deletes a single flashcard in a specified flashcard set."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `delete fl flset:\u003csetindex\u003e fl:\u003cindex\u003e`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` and `\u003cindex\u003e` fields are compulsory."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` and `\u003cindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` and `\u003cindex\u003e` will throw an error if either does not exist."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `delete fl flset:1 fl:3`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Quiz of flashcard set**: `quiz flset`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Shows the questions of the specific flashcard set. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Depending on the command you enter, it stores the answers "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "and whether they are correct for your reference. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "It is required for you to enter follow-up commands "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "to continue with the quiz."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Format: `quiz \u003cflset:setindex\u003e`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "`quiz flset:2`, `quiz flset:3`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Alternatively, if you have a quiz task scheduled, "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "you may double-click the bright-colored `Quiz:\u003cquizname\u003e` label "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "contained in the description of the task as shown below "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "(see 3) of [Add a task: `add task`](#add-a-task-add-task))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![TaskQuizLabel](images/TaskQuizLabel.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Note: When the quiz has started, you may only key in commands available in quiz mode at appropriate times.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Such commands are `flip`, `ans:\u003canswer\u003e`, `c`, `w`, `cancel` or `refresh`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Step 1"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "When the quiz starts, as seen below, the question "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "of the first flashcard within the selected flashcard set appears, "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "as well as an Instruction prompt to type in the next command, `flip`, `ans:\u003canswer\u003e`, `refresh` or `cancel`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![FirstQuestion](images/FirstQuestion.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `flip`: Does not store your answer. Displays the answer to the flashcard question."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "(You may opt to remember your answer for evaluation against the correct answer later)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `ans:\u003canswer\u003e`: Stores your answer. Also, displays the answer to the flashcard question."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `refresh`: Shows the current state of the quiz - Question, Answer and Instruction"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "(the question, current answer if applicable and prompt instruction)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `cancel`: Stops the quiz "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Step 2"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "If the command entered is `flip` or `ans:\u003canswer\u003e`, "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "the correct answer will be displayed, "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "and there will be the Instruction prompt to enter the next command, `c`, `w`, `refresh` or `cancel`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The image below shows the result when `ans:improves code quality and reduces bugs` is entered:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![AnswerShown](images/AnswerShown.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Based on the correct answer displayed, you may evaluate the answer provided. "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "If you think the question is answered correctly, type `c`. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Else, type `w`. Your response will be taken into account when tabulating the quiz score."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `c`: Indicates that the question on the flashcard is answered correctly."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `w`: Indicates that the question is answered wrongly."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `refresh`: Shows the current state of the quiz - Question, Answer and Instruction"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "(the question, current answer if applicable and prompt instruction)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `cancel`: Stops the quiz"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Step 3"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The next question of the next flashcard will be displayed. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Steps 1-2 are repeated until all flashcards in the set are displayed and answered."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Once the quiz stops, the score statistics will be displayed. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This score can also be viewed when viewing the last attempt of the flashcard set."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "(see [View last quiz attempt: `quiz score flset`](#view-last-quiz-attempt-quiz-score-flset))"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### **View last quiz attempt**: `quiz score flset`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Shows the last attempt of a specific flashcard set."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "It contains the following information:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- Score (percentage out of 100%), and"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- List of questions each followed by answers from the last attempt"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- Indicators of whether the question is answered correctly (shown as tick and cross)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![ViewScore](images/ViewScore.png)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Format: `quiz score \u003cflset:setindex\u003e`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "`quiz score flset:9`, `quiz score flset:16`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Add a task**: `add task`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "If you would like to add a study task to your schedule, this command allows you to create a task and saves it to the "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "schedule, while specifying the `\u003ctitle\u003e`, `[description]`, `[time]` and `[duration]` of the task.  "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "After you add a new task to `StudyBananas`, the task information will be saved in the `schedule.json` file."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "You can also add a `quiz` as a valid `task` by entering the `quiz flset:\u003cindex\u003e` command in the `description` field. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `add task: \u003cT:title\u003e [d:description] [t:time] [dur: duration]`  "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `add task T: CS2100 d: Pipeline tutorial dur: 45`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `add task T: CS2103T d: iP submission t: 2020-09-17 23:59`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `add Task T: CS2105 d: quiz flset:2 t: Saturday, Oct 31 2020 13:00 dur: 120`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `title` can accept strings that are capitalized or separated with spaces."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `time` should be written in the format `t: yyyy-MM-dd HH:mm` or `t: EEEE, MMM-dd-yyyy HH:mm`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- The hours and minutes in `time` is optional. If you do not specify it, the time will be set to 12:00 by default."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- You cannot add a task such that it results in duplicated task, which are tasks having the same title, description, time and "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "duration."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- You cannot add a task such that its time range coincides with the time range of existing tasks."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "For example, you would like to add a `task` to your schedule with the title **CS2100**, description **Lab 8**, date time "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "**2020-10-29 10:00** and duration of **60** minutes."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Entering the command `add task T: CS2100 d: Lab 8 t: 2020-10-29 10:00 dur: 60` while on `Schedule` tab will add the `task` "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "to your schedule."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1)Enter the `add task` command, including the specific information of the `task`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![addTask1](images/addTask1.png)  "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e Figure __. Using `add task` command\u003c/div\u003e  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2)After using the `add task` command, the new `task` will be added to your schedule and displayed at the end of the "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "schedule."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![addTask2](images/addTask2.png)  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Result of `add task` command\u003c/div\u003e    "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Now, if you would like to add a `quiz` of flashcard set 1 as a `task` to your schedule."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Entering the command `add task T: CS2040S d: quiz flset:1 dur: 30` while on `Schedule` tab will ad the `task` containing"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "the `quiz` to your schedule."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1)Enter the `add task` command, including the specific information of the `task`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![addTaskWithQuiz1](images/addTaskWithQuiz1.png)  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Using `add task` command integrate with `quiz`\u003c/div\u003e  "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2)After using the `add task` command, the new `task` containing the `quiz` will be added to your schedule and displayed at the "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "end of the schedule."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![addTaskWithQuiz2](images/addTaskWithQuiz2.png)  "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Result of `add task` command integrating with `quiz`\u003c/div\u003e    "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3)Click on the `Quiz CS2040` box in the `Description` of the task will redirect you to the `quiz` tab and start the `quiz` immediately for you.  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![addTaskWithQuiz3](images/addTaskWithQuiz3.png)  "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Result of clicking on the `Quiz CS2040` box\u003c/div\u003e  "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "### **View the details of your task**: "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "There are several panels in our user interface that provides the details of your task. "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- Firstly, the time scale lists out all of your study sessions which are tasks with start time and duration, you can click on your study session on the time scale to view the detail on the top right panel."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- Secondly, the list panel located at the bottom right corner of the schedule tab lists all of your tasks, you can scroll down to view the details of your task or takes advantage of our search feature (please refer to [search task section](#search-for-a-task)) to quickly a specific task."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- In the following user guide, we would time scale to refer to the middle panel of schedule tab, and uses task lists to refer to the bottom right panel."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![TaskDetailPanels](images/TaskDetailPanels.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **List tasks**: `list task`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "If you  would like to view your full `schedule`, this command displays the full `schedule` that you have in both time scale and the task list.  "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Format: `list task`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `list task`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected Outcome:  "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1)Enter the command `list task`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![listTask1](images/listTask1.png)  "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Using `list task` command on `Schedule` tab\u003c/div\u003e    "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2)After using the `list task` command, you can see the full `schedule`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![listTask2](images/listTask2.png)  "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Result of `list task` command\u003c/div\u003e  "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Delete a task**: `delete task`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "If you complete a task and would like to remove that task from your `schedule`, this command will remove the task"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "at the specified `index`.  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Upon deletion of the `task`, the saved information of the task will be deleted.  "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `delete task \u003cindex\u003e`  "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `delete task 2`  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- The index refers to the index number shown in the fully displayed `schedule`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- The index must be a positive integer 1, 2, 3, …​ and within range of the task in your `schedule`.  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected Outcome:  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "For example, you just finished the `task` at index 4, **CS2100 Lab** and you "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "would like to delete that `task` from your `schedule`.  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1)Enter the command `delete task 4`.  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![deleteTask1](images/deleteTask1.jpg)  "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Using `delete task` command\u003c/div\u003e  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2)After using the `delete task` command, the specified task is removed from your `schedule`.  "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![deleteTask1](images/deleteTask2.png)  "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Result of `delete task` command\u003c/div\u003e  "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Search for a task**: `search task`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "If you would like to search for a specific task using a certain **keyword(s)**, this command displays any `task` that its `title`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "contains *any* of the given **keyword(s)** or its `description` and `time` contains *all* of the given **keyword(s)**. "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `search task \u003ckeywords\u003e`  "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `search task CS2103T`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `search task Assignment`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `search task 2020-10-30`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- The search is case-insensitive. For instance, `homework` matches `Homework`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected Outcome:  "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "For example, you would like to search for a `task` in the `schedule` with the **keyword** *Lab 8*. StudyBananas "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "searches for all tasks containing *Lab 8* in their `title`, `description` and `time` and displays all matching tasks."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1)Enter the command `search task Lab 8` to search for tasks with the **keyword** *Lab 8*.  "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![searchTask1](images/searchTask1.png)  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Using `search task` command  \u003c/div\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2)After using the `search task` command, StudyBananas displays all the tasks with the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "specified **keyword**  "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![searchTask2](images/searchTask2.png)  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Result of `search task` command \u003c/div\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Edit a task**: `edit task`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "If you would like to update some task details, this command allows you to edit the details of a trip at a specified `index` in the `schedule`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "You can edit a task\u0027s `title`, `description`, `time` and `duration`.  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `edit task \u003cindex\u003e [T:title] [d:description] [t:time] [dur:duration]`  "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 1 T: Internship`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 2 d: Pipleline Tutorial homework dur: 60`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 5 6 T: CS2103T d: Post-lecture quiz t: 2020-10-31 13:00 dur: 60`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 2 d: Pipleline Tutorial homework dur: 60 d: Assignment Cache`  "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- The index refers to the index number shown in the fully displayed `schedule`."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- The index must be a positive integer 1, 2, 3, …​ and within range of the task in your `schedule`. "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- You can key in multiple `\u003cindex\u003e`, but only the task at the first `index` will be edited."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `[title]`, `[description]`, `[time]` and `[duration]` are optional but you need to include at least one of them in the command."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `[title]`, `[description]`, `[time]` and `[duration]` still need to conform to its respective expected format.  "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- You can key in multiple `[title]`, `[description]`, `[time]` and `[duration]`, but only the last information of each field is by the task.  "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected Outcome:  "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "For example, you previously add a `task`: *CS2100 Lab 8 on Thursday, Oct 29 2020 10:00 with duration 60 minutes*, which has "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "the index of `7` in the `schedule`. Later on, you want to edit the time to 11:00 instead."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1)Enter the command `edit task 7 t: Thursday, Oct 29 2020 11:00` to edit the task.  "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![editTask1](images/editTask1.jpg)  "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Using `edit task` command \u003c/div\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2)After using the `edit task` command, the details of the `task` are updated accordingly."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![editTask2](images/editTask2.jpg)  "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003eFigure __. Result of `edit task` command, the task at index `7` is updated \u003c/div\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Saving the data**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "StudyBananas data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### **View all the available commands**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Click on the help button located at the bottom of the sidebar to view all the available commands."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![HelpButton](images/HelpButton.png)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The help window shows most of the available CLI commands. "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- The green part is the name of the command "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- The purple part lists all the arguments that can be adjust in a customary manner. "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- Please refer to the description below for more details in each command."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![HelpWindow](images/HelpWindow.png)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### **Exit program**: `exit`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Format: click on `Exit` button at the bottom left of the application."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous StudyBananas home folder."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Flashcard commands"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| Action                                 | Format, Examples                                                                                        |"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| -------------------------------------- | ------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Add flashcard set**                  | `add flset name:\u003csetname\u003e` \u003cbr\u003e e.g., `add flset name:Japanese`                                         |"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Delete flashcard set**               | `delete flset \u003csetindex\u003e` \u003cbr\u003e  e.g., `delete flset 1`                                                  |"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **List flashcards in a specified set** | `list fl \u003csetindex\u003e` \u003cbr\u003e  e.g., `list fl 1`                                                            |"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Add flashcard in a specified set**   | `add fl flset:\u003csetindex\u003e q:\u003cquestion\u003e a:\u003canswer\u003e` \u003cbr\u003e e.g., `add fl flset:2 q:Is earth flat? a:Maybe!` |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Delete flashcard in specified set**  | `delete fl flset:\u003csetindex\u003e fl:\u003cindex\u003e` \u003cbr\u003e e.g., `delete fl flset:1 fl:1`                             |"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Quiz commands"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| Action                           | Format, Examples                                                                                                                          |"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "| -------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "| **Quiz flset**                   | `quiz \u003cflset:setindex\u003e` e.g., `quiz flset:7`. \u003cbr\u003e Available only in quiz mode: `flip`, `ans:\u003canswer\u003e`, `c`, `w`, `cancel`, `refresh`   |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "| **Quiz score flset**             | `quiz score \u003cflset:setindex\u003e` \u003cbr\u003e  e.g., `quiz score flset:6`                                                                            |"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Task list commands"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| Action              | Format, Examples                                                                                                                           |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Add task**        | `add task \u003cT:titile\u003e [d:description] [t:time]` \u003cbr\u003e e.g., `add task T:CS2100 d: Pipeline tutorial`, `add task T:CS2103T d:iP submission t: 2020-09-17 23:59` |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **List tasks**      | `list task` \u003cbr\u003e                                                                                                                           |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Delete task**     | `delete task \u003cindex\u003e` \u003cbr\u003e  e.g., `delete task 6`                                                                                          |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Search for task** | `search task \u003ckeywords\u003e` \u003cbr\u003e e.g., `search task CS2103T`                                     |"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Edit task**       | `edit task \u003cindex\u003e [T:title] [d:description] [t:time] [dur:duration]` \u003cbr\u003e e.g., `edit task 2 T: CS2103T`, `edit task 1 d: Debug remaining errors dur: 60` |"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 204,
      "cupofjoee": 76,
      "petrickjerico": 3,
      "bowei-yu": 124,
      "chuyiting": 24,
      "-": 97
    }
  },
  {
    "path": "docs/diagrams/CorrectCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "participant \":StudyBananasParser\" as StudyBananasParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "participant \":QuizParser\" as QuizParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "participant \":CorrectCommandParser\" as CorrectCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "participant \"c:CorrectCommand\" as CorrectCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "box QuizModel MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "participant \":QuizModel\" as QuizModel MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[-\u003e LogicManager : execute(\"c\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "LogicManager -\u003e StudyBananasParser : parseCommand(\"c\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate StudyBananasParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "StudyBananasParser -\u003e QuizParser : parseCommand(\"c\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate QuizParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "create CorrectCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "QuizParser -\u003e CorrectCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate CorrectCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CorrectCommandParser --\u003e QuizParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate CorrectCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "QuizParser -\u003e CorrectCommandParser : parse(\"c\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate CorrectCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "create CorrectCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CorrectCommandParser -\u003e CorrectCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate CorrectCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CorrectCommand --\u003e CorrectCommandParser : c"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate CorrectCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CorrectCommandParser --\u003e QuizParser : c"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate CorrectCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "destroy CorrectCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "QuizParser --\u003e StudyBananasParser : c"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate QuizParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "StudyBananasParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate StudyBananasParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "LogicManager -\u003e CorrectCommand : execute()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate CorrectCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CorrectCommand -\u003e QuizModel : tallyScore(true)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate QuizModel"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "QuizModel --\u003e CorrectCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate QuizModel"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CorrectCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CommandResult --\u003e CorrectCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "CorrectCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate CorrectCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 74
    }
  },
  {
    "path": "docs/diagrams/ModelArchitectureDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface Model"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface AddressBookModel"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class AddressBookModelManager"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface ScheduleModel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class ScheduleModelManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface FlashcardModel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class FlashcardModelManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface QuizModel"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class QuizModelManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class AddressBook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class Schedule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class FlashcardBank"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class Quiz"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Model --|\u003e AddressBookModel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Model --|\u003e ScheduleModel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Model --|\u003e FlashcardModel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Model --|\u003e QuizModel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel \u003c|.. AddressBookModelManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel \u003c|.. ScheduleModelManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel \u003c|.. FlashcardModelManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel \u003c|.. QuizModelManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModelManager ..\u003e AddressBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModelManager ..\u003e Schedule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModelManager ..\u003e FlashcardBank"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModelManager ..\u003e Quiz"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ModelManager ..\u003e AddressBookModelManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ModelManager ..\u003e ScheduleModelManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ModelManager ..\u003e FlashcardModelManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ModelManager ..\u003e QuizModelManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Model \u003c|-- ModelManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel : ReadOnlyAddressBook getAddressBook()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel : void setAddressBook(ReadOnlyAddressBook addressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel : boolean hasPerson()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel : void deletePerson(Person p)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel : void addPerson(Person person)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel : void setPerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel :  ObservableList\u003cPerson\u003e getFilteredPersonList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "AddressBookModel : void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel : ReadOnlySchedule getSchedule()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel : boolean hasTask(Task task)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel : void deleteTask(Task target)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel : void addTask(Task task)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel : void setTask(Task target, Task editedTask)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel : ObservableList\u003cTask\u003e getFilteredTaskList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ScheduleModel : void updateFilteredTaskList(Predicate\u003cTask\u003e predicate)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : ReadOnlyFlashcardBank getFlashcardBank()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : boolean hasFlashcardSet(FlashcardSet flashcardSet)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : void deleteFlashcardSet(FlashcardSet target)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : void addFlashcardSet(FlashcardSet flashcardSet)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : ObservableList\u003cFlashcardSet\u003e getFlashcardSetList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : void addFlashcard(Flashcard flashcard, Index flashcardSetIndex)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "FlashcardModel : FlashcardSet getFlashcardSet(int index)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel : Question start(Quiz quiz)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel : boolean hasStarted()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel : void tallyScore(boolean isCorrect)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel : Question getQuestion()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel : Answer getAnswer()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel : double stopQuiz()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "QuizModel : String getQuizRecords(int index)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 78
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 56
    }
  },
  {
    "path": "docs/diagrams/NextQuestion.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "title Quiz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package FlashcardSet {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    class State1 as \"__flashcard1:Flashcard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    class State2 as \"__flashcard2:Flashcard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class Pointer as \"Current Index\" #FFFFF"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 15
    }
  },
  {
    "path": "docs/diagrams/OutOfIndex.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "title Quiz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package FlashcardSet {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    class State1 as \"__flashcard1:Flashcard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    class State2 as \"__flashcard2:Flashcard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    class State3 as \"__flashcard3:Flashcard__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class Pointer as \"Current Index\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 18
    }
  },
  {
    "path": "docs/diagrams/QuizStorageActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ":User executes start quiz command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "repeat :System shows question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  :User answers question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  :System stores answer to question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  :System shows the correct answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  if () then ([correct user answer])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      :User marks answer as right;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      :System increments points scored;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      :User marks answer as wrong;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  :System stores correctness response to question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "repeat while () is ([quiz end not reached]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ":System shows quiz score and statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 19
    }
  },
  {
    "path": "docs/diagrams/SidebarSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "box Ui LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "participant \"Schedule:SidebarTab\" as SidebarTab1 LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "participant \":SingletoUiState\" as UiState LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "participant \":MainWindow\" as MainWindow LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "participant \"View\" as View LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "[-\u003e SidebarTab1 : handleTabPressed()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "activate SidebarTab1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SidebarTab1 -\u003e UiState : updateState(SCHEDULE)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "activate UiState"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "UiState -\u003e UiState : inform()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "UiState -\u003e MainWindow : update(SCHEDULE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "MainWindow -\u003e MainWindow : handleStateChanged(SCHEDULE)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "MainWindow -\u003e View : changeView"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "View --\u003e MainWindow"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "MainWindow --\u003e UiState"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "UiState -\u003e SidebarTab1 : update(SCHEDULE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SidebarTab1 -\u003e View : changeView"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "View --\u003e SidebarTab1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SidebarTab1 --\u003e UiState"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "UiState --\u003e SidebarTab1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "deactivate UiState"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "deactivate SidebarTab1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 45
    }
  },
  {
    "path": "docs/diagrams/SidebarState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface Observer"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface Observable"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class MainWindow"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Observable \u003c|-- SingleUiState"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Observer \u003c|-- MainWindow"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "MainWindow ..\u003e SingleUiState : subscribe"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface Observer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "subscribe(Observable o)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "update(UiStateType state)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "interface Observable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "register(Observer o)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "inform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Schedule (the default state)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 32
    }
  },
  {
    "path": "docs/diagrams/SidebarState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class MainWindow"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SidebarTab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SingleUiState \u003c.. MainWindow : subscribe"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SingleUiState \u003c.. SidebarTab : subscribe"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Schedule (the default state)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 17
    }
  },
  {
    "path": "docs/diagrams/SidebarState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SidebarTab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SingleUiState \u003c-- SidebarTab : update"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "NewState"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 15
    }
  },
  {
    "path": "docs/diagrams/SidebarState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class MainWindow"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SidebarTab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SingleUiState --\u003e MainWindow : inform"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "SingleUiState --\u003e SidebarTab : inform"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "class SingleUiState {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "NewState"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 17
    }
  },
  {
    "path": "docs/diagrams/StartQuiz.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "title Quiz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package FlashcardSet {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    class State1 as \"__flashcard1:Flashcard__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    class State2 as \"__flashcard2:Flashcard__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class Pointer as \"Current Index\" #FFFFF"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 15
    }
  },
  {
    "path": "docs/diagrams/StartQuizClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Class StartCommand {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " + execute()"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class QuizModelManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "+getQuestion()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class Quiz {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "-flashcardSet:FlashcardSet"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "-totalScore:int \u003d flashcardSetSize"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "-pointsScored:int \u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "-currentIndex:int \u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "+getQuestion()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "QuizModelManager -\u003e \"0..1\" Quiz"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "StartCommand --\u003e Quiz"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "StartCommand .\u003e QuizModelManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 23
    }
  },
  {
    "path": "docs/diagrams/StoreAnswerClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class AnswerCommand {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " - userAnswer:String"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " + execute()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class QuizModelManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "+saveAnswer()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "+getAnswer()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "class Quiz {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "-userAnswers:String[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "+saveAnswer()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "+getAnswer()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "AnswerCommand .\u003e QuizModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "QuizModelManager -\u003e \"0..1\" Quiz"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 22
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "title: StudyBananas"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F12-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**StudyBananas is a desktop study companion app that helps students centralize all their study tasks and set up focused study sessions in one place**. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* If you are interested in using StudyBananas, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* If you are interested about developing StudyBananas, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "**Acknowledgments**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* This project is morphed from the AddressBook-Level3 project, created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 5,
      "bowei-yu": 4,
      "-": 12
    }
  },
  {
    "path": "docs/team/bowei-yu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "title: Yu Bowei\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## Project: StudyBananas"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions into one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Given below are my contributions to the project (to be updated)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 24
    }
  },
  {
    "path": "docs/team/ducbinh2611.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "title: Ngo Duc Binh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "## Project: StudyBananas"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions into one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Given below are my contributions to the project (to be updated)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 24
    }
  },
  {
    "path": "docs/team/eddychu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "title: Chu Yi-Ting\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "## Project: StudyBananas"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions into one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Given below are my contributions to the project (to be updated)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 24
    }
  },
  {
    "path": "docs/team/joeteddy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "title: Joe Teddy Yosua Sanjaya\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "## Project: StudyBananas"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions into one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Given below are my contributions to the project (to be updated)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 24
    }
  },
  {
    "path": "docs/team/petrickjerico.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "title: Petrick Jerico\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "## Project: StudyBananas"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions into one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "  * JavaFX"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 8,
      "-": 18
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.studybananas.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Create a new `Remark` in `seedu.studybananas.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Simply add the following to [`seedu.studybananas.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 6,
      "-": 388
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.studybananas.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 102
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.studybananas.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 249
    }
  },
  {
    "path": "gradle.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "org.gradle.parallel\u003dfalse"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "org.gradle.jvmargs\u003d-XX:MaxMetaspaceSize\u003d512m -XX:+HeapDumpOnOutOfMemoryError -Xmx1024m -Dfile.encoding\u003dutf-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# TODO: This is a workaround for a JDK11 bug which causes test coverage upload to fail."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Remove it when https://bugs.openjdk.java.net/browse/JDK-8221253 is fixed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "systemProp.jdk.tls.client.protocols\u003d\"TLSv1,TLSv1.1,TLSv1.2\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chuyiting": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.FlashcardBankStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.JsonFlashcardBankStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.quizstorage.JsonQuizRecordsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.quizstorage.QuizRecordsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.schedulestorage.JsonScheduleStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.schedulestorage.ScheduleStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing StudyBananas ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(userPrefs.getScheduleFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBankStorage flashcardBankStorage \u003d new JsonFlashcardBankStorage(userPrefs.getFlashcardBankFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecordsStorage quizRecordsStorage \u003d new JsonQuizRecordsStorage(userPrefs.getQuizRecordsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        storage \u003d new StorageManager(scheduleStorage, flashcardBankStorage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                quizRecordsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The data from the sample storages will be used instead if {@code storage}\u0027s is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * or an empty storages will be used instead if errors occur when reading {@code storage}\u0027s."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Optional\u003cReadOnlySchedule\u003e scheduleOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Optional\u003cReadOnlyFlashcardBank\u003e flashcardBankOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Optional\u003cReadOnlyQuizRecords\u003e quizRecordsOptional;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ReadOnlySchedule initialScheduleData;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ReadOnlyFlashcardBank initialFlashcardBankData;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ReadOnlyQuizRecords initialQuizRecordsData;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            scheduleOptional \u003d storage.readSchedule();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            if (scheduleOptional.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                logger.info(\"Schedule data file not found. Will be starting with a sample Schedule\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialScheduleData \u003d scheduleOptional.orElseGet(SampleDataUtil::getSampleSchedule);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Schedule\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialScheduleData \u003d new Schedule();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Schedule\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialScheduleData \u003d new Schedule();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            flashcardBankOptional \u003d storage.readFlashcardBank();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            if (flashcardBankOptional.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                logger.info(\"FlashcardBank data file not found. Will be starting with a sample FlashcardBank\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            initialFlashcardBankData \u003d flashcardBankOptional.orElseGet(SampleDataUtil::getSampleFlashcardBank);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FlashcardBank\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            initialFlashcardBankData \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashcardBank\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            initialFlashcardBankData \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizRecordsOptional \u003d storage.readQuizRecords();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            if (quizRecordsOptional.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                logger.info(\"Quiz Records data file not found. Will be starting with a sample FlashcardBank\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            initialQuizRecordsData \u003d quizRecordsOptional.orElseGet(SampleDataUtil::getSampleQuizRecords);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Quiz Record\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            initialQuizRecordsData \u003d new QuizRecords();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Quiz Record\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            initialQuizRecordsData \u003d new QuizRecords();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new ModelManager(userPrefs, initialScheduleData,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                initialFlashcardBankData, initialQuizRecordsData);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StudyBananas\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.info(\"Starting Study Bananas \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Study Bananas ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 59,
      "chuyiting": 22,
      "bowei-yu": 24,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 650;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "bowei-yu": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String LOG_FILE \u003d \"studybananas.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "bowei-yu": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_TASK \u003d \"This task already exists in the schedule\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_OVERLAP_TASK \u003d \"The duration of this task overlaps with other \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"task in the schedule\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"The flashcard set index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_INDEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_HAS_STARTED \u003d \"A quiz is ongoing, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"no non-quiz commands are allowed.\\nKey `refresh\u0027 \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"to continue with quiz or \u0027cancel\u0027 to stop quiz.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 4,
      "cupofjoee": 3,
      "petrickjerico": 2,
      "bowei-yu": 4,
      "chuyiting": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return String.valueOf(zeroBasedIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper().registerModule(new Jdk8Module())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .findAndRegisterModules()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String myCheck \u003d toJsonString(objectToSerialize);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "chuyiting": 4,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static String getStringNoPunctuation(String sentence) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String punctuationRegex \u003d \"[\\\\p{Punct}\u0026\u0026[^-:]]+\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String stringNoPunctuation \u003d sentence.replaceAll(punctuationRegex, \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return stringNoPunctuation;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5,
      "cupofjoee": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Executes the command without parsing commandText."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    CommandResult execute(Command command) throws CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parse command without executing it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param commandText"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return the result of the command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Command parse(String commandText) throws ParseException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Get {@Code FlashcardSet} by {@Code Index}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param idx index of the flashcardSet."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    FlashcardSet getFlashcardSetFromIndex(Index idx);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the Schedule."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @see Model#getSchedule()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ReadOnlySchedule getSchedule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getUpcomingTaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the user prefs\u0027 schedule file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Returns the Flashcard Bank."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @see Model#getFlashcardBank() ()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ReadOnlyFlashcardBank getFlashcardBank();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcard sets */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Returns the user prefs\u0027 flashcard bank file path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns the selected flashcards to view */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardSetToView();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Sets the flashcardset to the view observable list**/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setFlashcardSetToView(FlashcardSet flashcardSet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the quiz queried."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Quiz getQuizRecordsToView();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 8,
      "petrickjerico": 25,
      "chuyiting": 48,
      "bowei-yu": 7,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.StudyBananasParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final StudyBananasParser studyBananasParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        studyBananasParser \u003d new StudyBananasParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Command\u003c? super Model\u003e command \u003d studyBananasParser.parseCommand(commandText, model.hasStarted());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            storage.saveSchedule(model.getSchedule());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            storage.saveFlashcardBank(model.getFlashcardBank());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            storage.saveQuizRecords(model.getAllQuizRecords());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(Command command) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + command + \"]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            storage.saveSchedule(model.getSchedule());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            storage.saveFlashcardBank(model.getFlashcardBank());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            storage.saveQuizRecords(model.getAllQuizRecords());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public FlashcardSet getFlashcardSetFromIndex(Index idx) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getFlashcardSet(idx);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command parse(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return studyBananasParser.parseCommand(commandText, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getSchedule();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getUpcomingTaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getScheduleFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFlashcardBank();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardSetToView() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFlashcardSetToView();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.setFlashcardSetToView(flashcardSet);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuizRecordsToView() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return model.getQuizRecordsToView();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 14,
      "petrickjerico": 21,
      "chuyiting": 60,
      "bowei-yu": 8,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public abstract CommandResult execute(T model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/ExampleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Example command for parser structure."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ExampleCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "chuyiting": 12
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class HelpCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"TODO: INSERT HELP DETAILS HERE\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 14,
      "chuyiting": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/commandresults/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public abstract class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    protected final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public abstract UiStateType getCommandResultType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 6,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/commandresults/FlashcardCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public FlashcardCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public FlashcardCommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UiStateType getCommandResultType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return UiStateType.FLASHCARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 19
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/commandresults/QuizCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class QuizCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Quiz quiz;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private QuizCommandResultType commandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Initializes a {@code QuizCommandResult}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param feedbackToUser Feedback displayed to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Initializes a {@code QuizCommandResult}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param feedbackToUser Feedback displayed to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param showHelp Whether to show help."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param exit Whether to exit the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizCommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a {@code QuizCommandResult}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param feedbackToUser Feedback displayed to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param commandType Command Type of the command that this result is generated from."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizCommandResult(String feedbackToUser, QuizCommandResultType commandType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Initializes a {@code QuizCommandResult}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param feedbackToUser Feedback displayed to the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param showHelp Whether to show help."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param exit Whether to exit the app."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param commandType Command Type of the command that this result is generated from."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizCommandResult(String feedbackToUser, boolean showHelp, boolean exit, QuizCommandResultType commandType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Initializes a {@code QuizCommandResult}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param feedbackToUser Feedback displayed to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param showHelp Whether to show help."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param exit Whether to exit the app."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param quiz Quiz object to be stored in the CommandResult."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param commandType Command Type of the command that this result is generated from."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizCommandResult(String feedbackToUser, boolean showHelp, boolean exit, Quiz quiz,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                             QuizCommandResultType commandType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a {@code QuizCommandResult}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param feedbackToUser Feedback displayed to the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param quiz Quiz object to be stored in the CommandResult."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param commandType Command Type of the command that this result is generated from."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizCommandResult(String feedbackToUser, Quiz quiz, QuizCommandResultType commandType) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Quiz getQuiz() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this.quiz;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizCommandResultType getCommandType() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UiStateType getCommandResultType() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return UiStateType.QUIZ;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return quiz !\u003d null ? quiz.getQuizName() : \"empty quiz\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(o instanceof QuizCommandResult)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return super.equals(o);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 32,
      "chuyiting": 86
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/commandresults/QuizCommandResultType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Types for {@Code QuizCommandResultType}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public enum QuizCommandResultType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ANSWER, CANCEL, CORRECT, FLIP, REFRESH, START, VIEW_SCORE, WRONG, ERROR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 8
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/commandresults/QuizErrorCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.ERROR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class QuizErrorCommandResult extends QuizCommandResult {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizErrorCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser, ERROR);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 11
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/commandresults/ScheduleCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleCommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UiStateType getCommandResultType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return UiStateType.SCHEDULE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 20
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/flashcardcommands/AddFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that adds a {@code Flashcard}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * to a {@code FlashcardSet}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class AddFlashcardCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add fl\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \"This flashcard already exists in the given flashcard set.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to a flashcard set. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"\u003cflashcardsetindex\u003e \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_QUESTION + \"\u003cquestion\u003e \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_ANSWER + \"\u003canswer\u003e \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_QUESTION + \"Is earth flat?\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_ANSWER + \"Maybe!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Index flashcardSetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to add a {@code Flashcard}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * in the specified {@code FlashcardSet}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public AddFlashcardCommand(Flashcard flashcard, Index targetIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            FlashcardSet flashcardSet \u003d model.getFlashcardSet(flashcardSetIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            if (model.hasFlashcard(flashcardSet, toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                model.setFlashcardSetToView(flashcardSetIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            model.addFlashcard(flashcardSet, toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            model.setFlashcardSetToView(flashcardSetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new FlashcardCommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof AddFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFlashcardCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 52,
      "petrickjerico": 15,
      "chuyiting": 5,
      "bowei-yu": 5
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/flashcardcommands/AddFlashcardSetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that adds a {@code FlashcardSet}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class AddFlashcardSetCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add flset\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard set added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD_SET \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \"This flashcard set already exists in the flashcard bank.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard set to the flashcard bank.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_FLASHCARDSET_NAME + \"\u003cname\u003e\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_FLASHCARDSET_NAME + \"Japanese\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final FlashcardSet toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to add the specified {@code FlashcardSet}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public AddFlashcardSetCommand(FlashcardSet toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || (other instanceof AddFlashcardSetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFlashcardSetCommand) other).toAdd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (model.hasFlashcardSet(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD_SET);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        model.addFlashcardSet(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new FlashcardCommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 10,
      "petrickjerico": 42,
      "chuyiting": 3,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/flashcardcommands/DeleteFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that deletes a {@code Flashcard}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * from a {@code FlashcardSet}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class DeleteFlashcardCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete fl\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted flashcard: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \": Deletes a single flashcard in a specified flashcard set.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"identified by the index number used in the displayed flashcard set list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"\u003cindex (positive integer)\u003e\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARD + \"\u003cindex (positive integer)\u003e\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARD + \"3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Index targetFlashcardSetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Index targetFlashcardIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to delete a specified {@code Flashcard}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * from a specified {@code FlashcardSet}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public DeleteFlashcardCommand(Index targetFlashcardSetIndex, Index targetFlashcardIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.targetFlashcardSetIndex \u003d targetFlashcardSetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.targetFlashcardIndex \u003d targetFlashcardIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || (other instanceof DeleteFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 targetFlashcardIndex.equals(((DeleteFlashcardCommand) other).targetFlashcardIndex) // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 targetFlashcardSetIndex.equals(((DeleteFlashcardCommand) other).targetFlashcardSetIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        List\u003cFlashcardSet\u003e lastShownFlashcardSetList \u003d model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (targetFlashcardSetIndex.getZeroBased() \u003e\u003d lastShownFlashcardSetList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSet flashcardSet \u003d model.getFlashcardSet(targetFlashcardSetIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (targetFlashcardIndex.getZeroBased() \u003e\u003d flashcardSet.getSize()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            model.setFlashcardSetToView(targetFlashcardSetIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFlashcard(flashcardSet, targetFlashcardIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        model.deleteFlashcard(flashcardSet, targetFlashcardIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        model.setFlashcardSetToView(targetFlashcardSetIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new FlashcardCommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 13,
      "petrickjerico": 63,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/flashcardcommands/DeleteFlashcardSetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that deletes a {@code FlashcardSet}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class DeleteFlashcardSetCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete flset\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flashcard set deleted: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a flashcard set.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"\u003cflashcardsetindex\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Index flashcardSetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to delete a {@code FlashcardSet}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with the specified {@code Index}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public DeleteFlashcardSetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        List\u003cFlashcardSet\u003e flashcardSets \u003d model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (flashcardSetIndex.getZeroBased() \u003e\u003d flashcardSets.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet flashcardSetToDelete \u003d flashcardSets.get(flashcardSetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        model.deleteFlashcardSet(flashcardSetToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new FlashcardCommandResult(String.format(MESSAGE_SUCCESS, flashcardSetToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof DeleteFlashcardSetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 flashcardSetIndex.equals(((DeleteFlashcardSetCommand) other).flashcardSetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 44,
      "petrickjerico": 9,
      "chuyiting": 5
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/flashcardcommands/ListFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Regulates the behaviour of a {@code Command} that lists down"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * {@code Flashcard}s of a {@code FlashcardSet}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class ListFlashcardCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list fl\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcard in the selected flashcard set\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists flashcards in a flashcard set.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"\u003cflashcardsetindex\u003e\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Index flashcardSetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Creates a {@code Command} to list all {@code Flashcard}s"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * of a {@code FlashcardSet} with a specified {@code Index}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ListFlashcardCommand(Index flashcardSetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardSetIndex \u003d flashcardSetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        model.updateFilteredFlashcardSetList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        List\u003cFlashcardSet\u003e flashcardSets \u003d model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (flashcardSetIndex.getZeroBased() \u003e\u003d flashcardSets.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        model.setFlashcardSetToView(flashcardSetIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet flashcardSet \u003d model.getFlashcardSet(flashcardSetIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new FlashcardCommandResult(String.format("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                MESSAGE_SUCCESS + \"\\n\" + \"There are %d flashcards in the set %s.\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                flashcardSet.getSize(), flashcardSet.getName().name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof ListFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 flashcardSetIndex.equals(((ListFlashcardCommand) other).flashcardSetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 67
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/AnswerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.ui.quizui.QuizCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AnswerCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ans:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final int STARTING_INDEX_OF_ANSWER \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_QUESTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public AnswerCommand(String answer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommandUtil.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_UNAVAIL_ON_ANSWER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.saveAnswer(answer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        QuizCard.setQuestion(model.getQuestion());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String userAnswerToShow \u003d \"Your answer: \" + answer + \"\\n\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer \u003d model.getAnswer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String answerStringToShow \u003d userAnswerToShow + \"\\nCorrect answer: \" + answer.toString()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.SPECIAL_LITERAL"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.MESSAGE_AVAIL_ON_ANSWER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.updateCommandResult(answerStringToShow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new QuizCommandResult(answerStringToShow, model.getQuiz(), ANSWER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                || (other instanceof AnswerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 answer.equals(((AnswerCommand) other).answer)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 6,
      "cupofjoee": 5,
      "bowei-yu": 44,
      "chuyiting": 4
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/CancelCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.CANCEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.ui.quizui.QuizCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CancelCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Quiz cancelled! \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"Don\u0027t worry, your cancelled quiz scores are not recorded.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                throw new CommandException(QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.cancelQuiz();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            QuizCard.setQuestion(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.updateCommandResult(QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(MESSAGE_SUCCESS, CANCEL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(MESSAGE_SUCCESS, CANCEL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other instanceof CancelCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 6,
      "cupofjoee": 4,
      "bowei-yu": 25,
      "chuyiting": 7
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/CorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.CORRECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.ui.quizui.QuizCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CorrectCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_ANSWER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommandUtil.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_UNAVAIL_ON_QUESTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.tallyScore(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            QuizCard.setQuestion(model.getQuestion());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            String questionStringToShow \u003d QuizCommandUtil.MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.updateCommandResult(questionStringToShow);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(questionStringToShow, model.getQuiz(), CORRECT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.updateCommandResult(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.setQuizRecordsToView(model.getQuiz().getFlsetName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(model.stopQuiz(), CORRECT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other instanceof CorrectCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "cupofjoee": 4,
      "bowei-yu": 38,
      "chuyiting": 7
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/FlipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.FLIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.ui.quizui.QuizCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlipCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"flip\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_QUESTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommandUtil.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_UNAVAIL_ON_ANSWER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        QuizCard.setQuestion(model.getQuestion());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer \u003d model.getAnswer();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String answerStringToShow \u003d \"Correct answer: \" + answer.toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.SPECIAL_LITERAL"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.MESSAGE_AVAIL_ON_ANSWER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.updateCommandResult(answerStringToShow);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new QuizCommandResult(answerStringToShow, model.getQuiz(), FLIP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other instanceof FlipCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 5,
      "bowei-yu": 33,
      "chuyiting": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/QuizCommandUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public abstract class QuizCommandUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String SPECIAL_LITERAL \u003d \"STUDYBANANAS\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_NEVER_STARTED \u003d \"There are currently no ongoing quizzes\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_UNAVAIL_ON_ANSWER \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"This command is not available now. Type \u0027c\u0027, \u0027w\u0027, \u0027refresh\u0027 or \u0027cancel\u0027 to continue\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_UNAVAIL_ON_QUESTION \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"This command is not available now. Type \u0027flip\u0027, \u0027ans:\u003canswer\u003e\u0027, \u0027refresh\u0027 or \u0027cancel\u0027 to continue\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_AVAIL_ON_ANSWER \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"The available next commands are \u0027c\u0027, \u0027w\u0027, \u0027refresh\u0027 or `cancel`\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_AVAIL_ON_QUESTION \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"The available next commands are \u0027flip\u0027, \u0027ans:\u003canswer\u003e\u0027, \u0027refresh\u0027 or \u0027cancel\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static Status status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static String currentCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static Status getStatus() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void setStatus(Status state) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        status \u003d state;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Updates the current command result string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param commandResult provided after execution of quiz command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void updateCommandResult(String commandResult) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (commandResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            currentCommandResult \u003d MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        currentCommandResult \u003d commandResult;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static String getCurrentCommandResult() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (currentCommandResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            currentCommandResult \u003d MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return currentCommandResult;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 1,
      "bowei-yu": 38
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/RefreshCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.REFRESH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class RefreshCommand extends Command\u003cFlashcardQuizModel\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"refresh\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The quiz is refreshed.\\n You can proceed on your quiz now!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(FlashcardQuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new QuizCommandResult(MESSAGE_SUCCESS, REFRESH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other instanceof RefreshCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 8,
      "bowei-yu": 18,
      "chuyiting": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.START;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.ui.quizui.QuizCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class StartCommand extends Command\u003cFlashcardQuizModel\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz flset:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_IN_PROGRESS \u003d \"A quiz is already in progress! \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"Key \u0027refresh\u0027 to see current question/answer. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"To stop the current quiz, key \u0027cancel\u0027.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_SET_NONEXISTENT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"Flashcard set does not exist\\nPlease provide a valid index\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_SET_EMPTY \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"Flashcard set is empty\\nPlease fill it with flashcards\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private FlashcardQuizModel model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public StartCommand(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(FlashcardQuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (model.hasStarted()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_QUIZ_IN_PROGRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            Index indexWrapper \u003d Index.fromOneBased(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            FlashcardSet flashcardSet \u003d model.getFlashcardSet(indexWrapper);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            if (flashcardSet.getSize() \u003d\u003d 0) { // check for empty flashcard set"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                throw new CommandException(MESSAGE_FLASHCARD_SET_EMPTY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Quiz quiz \u003d new Quiz(this.index, flashcardSet);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Question firstQuestion \u003d model.start(quiz);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            QuizCard.setQuestion(firstQuestion);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            String feedback \u003d QuizCommandUtil.MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.updateCommandResult(feedback);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(feedback, quiz, START);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_FLASHCARD_SET_NONEXISTENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                || (other instanceof StartCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 index \u003d\u003d (((StartCommand) other).index)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Get the {@Code Index} of the flashcardSet for the quiz."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Index getQuizIndex() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return Index.fromOneBased(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 6,
      "cupofjoee": 11,
      "petrickjerico": 2,
      "bowei-yu": 50,
      "chuyiting": 15
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    ON_ANSWER, ON_QUESTION"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/ViewScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.VIEW_SCORE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class ViewScoreCommand extends Command\u003cFlashcardQuizModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz score flset:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_VIEW \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"Unable to view score as quiz is in progress. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"Cancel or finish the quiz to view recent quiz score.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_NONEXISTENT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"Quiz records for this flashcard set does not exist.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_DELETED \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"Unable to view score as flashcard set has deleted flashcard(s) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"since the last quiz. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"Do start a new quiz to update the score.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ViewScoreCommand(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(FlashcardQuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (model.hasStarted()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_TO_VIEW);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FlashcardSetName name \u003d model.getFlashcardSet(Index.fromOneBased(index)).getFlashcardSetName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.setQuizRecordsToView(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            String score \u003d model.getQuizRecords(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            if (score \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                model.setQuizRecordsToView(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                throw new CommandException(MESSAGE_FLASHCARD_DELETED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.updateCommandResult(score);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(score, VIEW_SCORE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_QUIZ_NONEXISTENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                || (other instanceof ViewScoreCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 index \u003d\u003d (((ViewScoreCommand) other).index)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "cupofjoee": 5,
      "bowei-yu": 53,
      "chuyiting": 5
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/quizcommands/WrongCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.WRONG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.ui.quizui.QuizCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class WrongCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"w\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_ANSWER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommandUtil.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommandUtil.MESSAGE_UNAVAIL_ON_QUESTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.tallyScore(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            String questionStringToShow \u003d QuizCommandUtil.MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.updateCommandResult(questionStringToShow);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            QuizCard.setQuestion(model.getQuestion());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(questionStringToShow, model.getQuiz(), WRONG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommandUtil.updateCommandResult(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.setQuizRecordsToView(model.getQuiz().getFlsetName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizCommandResult(model.stopQuiz(), WRONG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other instanceof WrongCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "cupofjoee": 4,
      "bowei-yu": 37,
      "chuyiting": 7
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_OVERLAP_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.ScheduleCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.task.exceptions.OverlapTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the schedule. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION (if any) \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_TIME + \"TIME (if any) \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_DURATION + \"DURATION (if any in minutes) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TITLE + \"CS2103T \" + PREFIX_DESCRIPTION + \"Quiz 11\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This tasks already exists in the schedule\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Creates an ScheduleAddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleAddCommand(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            model.addTask(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleCommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (OverlapTaskException overlapError) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(MESSAGE_OVERLAP_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof ScheduleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ScheduleAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 15,
      "cupofjoee": 5,
      "chuyiting": 46
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.ScheduleCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete task\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (targetIndex.getOneBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new ScheduleCommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof ScheduleDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ScheduleDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 8,
      "chuyiting": 45
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_DUPLICATED_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_OVERLAP_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.ScheduleCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.task.exceptions.OverlapTaskException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit task\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \": Edits the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_TITLE + \"TITLE (if any) \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION (if any) \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_TIME + \"TIME (if any) \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_DURATION + \"DURATION (if any in minutes) \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 T: Household dur: 60\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates an ScheduleEditCommand to edit the specified task at {@code Index}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public ScheduleEditCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Index targetIndex, Title title, Description description, DateTime dateTime, Duration duration) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Task generateEditedTask("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Task taskToEdit, Title newTitle, Description newDescription, DateTime newDateTime, Duration newDuration) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Title title \u003d newTitle \u003d\u003d null ? taskToEdit.getTitle() : newTitle;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description description \u003d newDescription \u003d\u003d null ? taskToEdit.getDescription().orElse(null) : newDescription;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime dateTime \u003d newDateTime \u003d\u003d null ? taskToEdit.getDateTime().orElse(null) : newDateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration duration \u003d newDuration \u003d\u003d null ? taskToEdit.getDuration().orElse(null) : newDuration;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedTask \u003d new Task(title, description, dateTime, duration);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return editedTask;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public CommandResult execute(ScheduleModel model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (targetIndex.getOneBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Task taskToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Task editedTask \u003d generateEditedTask(taskToEdit, title, description, dateTime, duration);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleCommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATED_TASK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (OverlapTaskException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(MESSAGE_OVERLAP_TASK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof ScheduleEditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ScheduleEditCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 77,
      "cupofjoee": 17,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.ScheduleCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Lists all tasks in the Schedule to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleListCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new ScheduleCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return obj instanceof ScheduleListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "chuyiting": 30
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleSearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.ScheduleCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search task\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2100\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final InfoContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public ScheduleSearchCommand(InfoContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new ScheduleCommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof ScheduleSearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 predicate.equals(((ScheduleSearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 4,
      "cupofjoee": 5,
      "chuyiting": 31
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        private final int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /* StudyBananas Schedule Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"T:\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t:\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"dur:\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /* StudyBananas Prefix definitions */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARDSET \u003d new Prefix(\"flset:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARDSET_NAME \u003d new Prefix(\"name:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARD \u003d new Prefix(\"fl:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q:\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 6,
      "petrickjerico": 1,
      "chuyiting": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/StudyBananasParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_QUIZ_HAS_STARTED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.flashcardparsers.FlashcardParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.CommandTypeMatcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.quizparsers.QuizParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.scheduleparsers.ScheduleParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class StudyBananasParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput Full user input string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The command based on the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Command\u003c? super Model\u003e parseCommand(String userInput, boolean quizIsOngoing) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final CommandTypeMatcher ctm \u003d new CommandTypeMatcher();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String trimmedUserInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (quizIsOngoing \u0026\u0026 isQuizCommand(ctm, trimmedUserInput)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new ParseException(MESSAGE_QUIZ_HAS_STARTED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        switch (ctm.match(trimmedUserInput)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new FlashcardParser().parse(trimmedUserInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new QuizParser().parse(trimmedUserInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new ScheduleParser().parse(trimmedUserInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean isQuizCommand(CommandTypeMatcher ctm, String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        CommandTypeMatcher.CommandType quizCommand \u003d CommandTypeMatcher.CommandType.QUIZ;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return !ctm.match(userInput).equals(quizCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 13,
      "cupofjoee": 9,
      "chuyiting": 25,
      "bowei-yu": 5
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/flashcardparsers/AddFlashcardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class AddFlashcardCommandParser implements Parser\u003cAddFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFlashcardCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * and returns an AddFlashcardCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public AddFlashcardCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_FLASHCARDSET, PREFIX_ANSWER, PREFIX_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARDSET, PREFIX_ANSWER, PREFIX_QUESTION)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index flashcardSetIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARDSET).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(question, answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new AddFlashcardCommand(flashcard, flashcardSetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 46
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/flashcardparsers/AddFlashcardSetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.AddFlashcardSetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class AddFlashcardSetCommandParser implements Parser\u003cAddFlashcardSetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public AddFlashcardSetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_FLASHCARDSET_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARDSET_NAME)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardSetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSetName flashcardSetName \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ParserUtil.parseFlashcardSetName(argMultimap.getValue(PREFIX_FLASHCARDSET_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSet flashcardSet \u003d new FlashcardSet(flashcardSetName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new AddFlashcardSetCommand(flashcardSet);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 12,
      "petrickjerico": 21,
      "chuyiting": 2
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/flashcardparsers/DeleteFlashcardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class DeleteFlashcardCommandParser implements Parser\u003cDeleteFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFlashcardSetCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * and returns an DeleteFlashcardSetCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public DeleteFlashcardCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_FLASHCARDSET, PREFIX_FLASHCARD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARDSET, PREFIX_FLASHCARD)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFlashcardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index flashcardSetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index flashcardIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            flashcardSetIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARDSET).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            flashcardIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARD).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new DeleteFlashcardCommand(flashcardSetIndex, flashcardIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 27,
      "petrickjerico": 24
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/flashcardparsers/DeleteFlashcardSetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.DeleteFlashcardSetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class DeleteFlashcardSetCommandParser implements Parser\u003cDeleteFlashcardSetCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFlashcardSetCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * and returns an DeleteFlashcardSetCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public DeleteFlashcardSetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new DeleteFlashcardSetCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 27
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/flashcardparsers/FlashcardParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.AddFlashcardSetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.DeleteFlashcardSetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.ListFlashcardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            .compile(\"((\\\\w+) (\\\\w+))(\\\\s.*)?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003cFlashcardModel\u003e parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final String commandWord \u003d matcher.group(1).toLowerCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final String argument \u003d toTokenizableString(matcher.group(4));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        case AddFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new AddFlashcardCommandParser().parse(argument);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        case AddFlashcardSetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return new AddFlashcardSetCommandParser().parse(argument);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        case DeleteFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return new DeleteFlashcardCommandParser().parse(argument);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        case DeleteFlashcardSetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new DeleteFlashcardSetCommandParser().parse(argument);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        case ListFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new ListFlashcardCommandParser().parse(argument);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private String toTokenizableString(String str) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return str \u003d\u003d null ? \"\" : str;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 47,
      "petrickjerico": 4,
      "chuyiting": 7
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/flashcardparsers/ListFlashcardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.ListFlashcardCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class ListFlashcardCommandParser implements Parser\u003cListFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ListFlashcardCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new ListFlashcardCommand(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 22
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/parserutils/CommandTypeMatcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.parserutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CommandTypeMatcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ADDRESSBOOK, FLASHCARD, QUIZ, TASK"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Match the command to the valid command type."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param command command string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return commandType of the command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandType match(String command) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (isFlashcardCommand(command)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return CommandType.FLASHCARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (isTaskCommand(command)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return CommandType.TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (isQuizCommand(command)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return CommandType.QUIZ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (isAddressBookCommand(command)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return CommandType.ADDRESSBOOK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private String getFirstWord(String userInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String[] splittedWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return splittedWords[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String getSecondWord(String userInput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return splittedWords[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesContainTwoOrMoreWords(String userInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return splittedWords.length \u003e 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean isAddressBookCommand(String command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean isFlashcardCommand(String command) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String lowercaseCommand \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return doesContainTwoOrMoreWords(command) \u0026\u0026 ("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                getSecondWord(lowercaseCommand).equals(\"flset\") || getSecondWord(lowercaseCommand).equals(\"fl\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean isQuizCommand(String command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String lowercaseCommand \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        switch (lowercaseCommand) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"cancel\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"refresh\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"flip\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return doesContainTwoOrMoreWords(lowercaseCommand) \u0026\u0026 ("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    getFirstWord(lowercaseCommand).equals(\"quiz\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    || lowercaseCommand.startsWith(\"ans:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean isTaskCommand(String command) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return doesContainTwoOrMoreWords(command) \u0026\u0026 ("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                getSecondWord(command).toLowerCase().equals(\"task\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 22,
      "cupofjoee": 6,
      "chuyiting": 34,
      "bowei-yu": 22
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/parserutils/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.parserutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index, please provide valid index.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Parses {@code numericString} and checks whether the string is numeric."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param numericString"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return true if the string is numeric, false otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isNumeric(String numericString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean isNumber \u003d numericString.chars().allMatch(Character::isDigit);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return isNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule/Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Title(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static DateTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedTime)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new DateTime(time);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String duration} into a {@code Duration}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!Duration.isValidDuration(trimmedDuration)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Duration(trimmedDuration);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new Question(question);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new Answer(answer);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Set \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Parses {@code String flashcarsSetName} into a {@code Name} for flashcard set."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @throws ParseException if the given {@code flashcardSetName} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static FlashcardSetName parseFlashcardSetName(String flashcardSetName)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(flashcardSetName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        String trimmedName \u003d flashcardSetName.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (!FlashcardSetName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new ParseException(FlashcardSetName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new FlashcardSetName(flashcardSetName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10,
      "cupofjoee": 53,
      "petrickjerico": 16,
      "chuyiting": 66,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/quizparsers/QuizParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.quizparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.AnswerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.CancelCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.CorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.FlipCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.RefreshCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.StartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.ViewScoreCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.WrongCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class QuizParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String EMPTY_SPACE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_PARSING_ERROR \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"The command for quiz is invalid. Please check the command format and try again.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003c? super Model\u003e parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String lowerCaseUserInput \u003d userInput.toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        lowerCaseUserInput \u003d lowerCaseUserInput.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (lowerCaseUserInput.startsWith(StartCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            lowerCaseUserInput \u003d lowerCaseUserInput.replace(StartCommand.COMMAND_WORD, EMPTY_SPACE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int index \u003d parseNumber(lowerCaseUserInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new StartCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (lowerCaseUserInput.startsWith(ViewScoreCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            lowerCaseUserInput \u003d lowerCaseUserInput.replace(ViewScoreCommand.COMMAND_WORD, EMPTY_SPACE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int index \u003d parseNumber(lowerCaseUserInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new ViewScoreCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (lowerCaseUserInput.startsWith(AnswerCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            userInput \u003d userInput.substring(AnswerCommand.STARTING_INDEX_OF_ANSWER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new AnswerCommand(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        switch (lowerCaseUserInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        case CancelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CancelCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new FlipCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        case CorrectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CorrectCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        case WrongCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new WrongCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new ParseException(MESSAGE_PARSING_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Parses a int number from an input string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param input string provided"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return an int number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws ParseException if the format of string is invalid"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int parseNumber(String input) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return Integer.parseInt(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new ParseException(\"Invalid characters provided for flashcard set number\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 16,
      "cupofjoee": 13,
      "chuyiting": 7,
      "bowei-yu": 32
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandParser implements Parser\u003cScheduleAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleAddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * and returns an ScheduleAddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).orElse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).orElse(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task task \u003d new Task(title, description, time, duration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new ScheduleAddCommand(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 18,
      "chuyiting": 30
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommandParser implements Parser\u003cScheduleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleDeleteCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * and returns a ScheduleDeleteCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleDeleteCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 8,
      "chuyiting": 16
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommandParser implements Parser\u003cScheduleEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Arguments of userInput should contain 3 distinct part separated by empty space."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The first part is just an empty string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The second part is the task index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The third part is the updated task information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final int EXPECTED_PART_OF_INPUT \u003d 3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String getIndexFromInput(String input) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedPartInput \u003d input.split(\" \", EXPECTED_PART_OF_INPUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (splittedPartInput.length \u003c EXPECTED_PART_OF_INPUT) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String index \u003d splittedPartInput[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (ParserUtil.isNumeric(index)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String getEditInfo(String input) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedPartInput \u003d input.split(\" \", EXPECTED_PART_OF_INPUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String emptySpace \u003d \" \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (splittedPartInput.length \u003c EXPECTED_PART_OF_INPUT) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // add back the empty space to conform to the format of ArgumentTokenizer#tokenize()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return emptySpace + splittedPartInput[2];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Special parser for Title since Title is optional in edit command, unlike add command where Title is compulsory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Title parseEditedTitle(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Optional\u003cString\u003e parsedTitle \u003d argumentMultimap.getValue(PREFIX_TITLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!parsedTitle.isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String titleString \u003d parsedTitle.get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return ParserUtil.parseTitle(titleString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleEditCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * and returns a ScheduleEditCommand object for execution."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public ScheduleEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String indexString \u003d getIndexFromInput(args);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String editInfoString \u003d getEditInfo(args);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            index \u003d ParserUtil.parseIndex(indexString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        editInfoString, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TIME)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_DURATION))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Title title \u003d parseEditedTitle(argMultimap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).orElse(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).orElse(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ScheduleEditCommand(index, title, description, time, duration);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 80,
      "cupofjoee": 27
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleSearchCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .compile(\"((\\\\w+) (\\\\w+))(\\\\s.*)?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003cScheduleModel\u003e parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final String commandWord \u003d matcher.group(1).toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //temporary to solve the bug..."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final String arguments \u003d toTokenizableString(matcher.group(4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleSearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleSearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        case ScheduleEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new ScheduleEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String toTokenizableString(String str) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return str \u003d\u003d null ? \"\" : str;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 13,
      "chuyiting": 43
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleSearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleSearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommandParser implements Parser\u003cScheduleSearchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleSearchCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * and returns a ScheduleSearchCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleSearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ScheduleSearchCommand(new InfoContainsKeywordsPredicate(Arrays.asList(titleKeywords)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 6,
      "chuyiting": 22
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/FlashcardModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface FlashcardModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Predicate\u003cFlashcardSet\u003e PREDICATE_SHOW_ALL_FLASHCARDSETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Predicate\u003cFlashcardSet\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Retrieves the flashcard from a given {@code FlashcardSet}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * at a given {@code Index}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to obtain from"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardIndex the reference {@code Index}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return the {@code Flashcard} in the given {@code FlashcardSet} at that {@code Index}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Replaces the target {@code Flashcard} in a given {@code FlashcardSet}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with an edited {@code Flashcard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to replace from"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param target the replaced {@code Flashcard}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param editedFlashcard the replacing {@code Flashcard}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Checks whether a given {@code FlashcardSet} contains"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * a given {@code Flashcard}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to check from"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcard the {@code Flashcard} to find"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return {@code true} if the set contains the card"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Adds a given {@code Flashcard} to a given {@code FlashcardSet}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcard the new {@code Flashcard}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Removes a {@code Flashcard} at a given {@code Index}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * from a given {@code FlashcardBank}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet {@code FlashcardSet}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardIndex the reference {@code Index} to delete"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Set \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Retrieves the {@code FlashcardSet} with the given {@code Index}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Used for {@code Quiz}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param index the reference {@code Index}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return the {@code FlashcardSet} in the high-level {@code FlashcardBank} with that {@code Index}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    FlashcardSet getFlashcardSet(Index index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Replaces the target {@code FlashcardSet} in the {@code FlashcardBank}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with an edited {@code FlashcardSet}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * {@code target} must exist in the {@code FlashcardBank}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * The task identity of the edited {@code FlashcardSet} must not"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * be the same as any other existing {@code FlashcardSet} in"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * the {@code FlashcardBank}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param target the replaced {@code FlashcardSet}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param editedFlashcardSet the replacing {@code FlashcardSet}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Checks whether the {@code FlashcardBank}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * contains a given {@code FlashcardSet}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to find"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return {@code true} if the bank contains the set"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    boolean hasFlashcardSet(FlashcardSet flashcardSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Adds a given empty or filled {@code FlashcardSet}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * to the {@code FlashcardBank}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the new {@code FlashcardSet}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void addFlashcardSet(FlashcardSet flashcardSet);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Removes a {@code FlashcardSet} and its contents"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * from the {@code FlashcardBank}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param target the {@code FlashcardSet} to delete"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void deleteFlashcardSet(FlashcardSet target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Bank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Replaces the target {@code FlashcardBank} data"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with a newly given one."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardBank the replacement {@code FlashcardBank}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns the {@code FlashcardBank} */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ReadOnlyFlashcardBank getFlashcardBank();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard Set Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard set list */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Updates the filter of the filtered flashcard set list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard Set Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard set list */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardSetToView();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Sets an unmodifiable view of the filtered flashcard set list by {@Code Index}*/"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardSetToView(Index index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Sets an unmodifiable view of the filtered flashcard set list by {@Code FlashcardSet}*/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setFlashcardSetToView(FlashcardSet flashcardSet);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "petrickjerico": 126,
      "chuyiting": 21
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/FlashcardModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardModelManager implements FlashcardModel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FlashcardBank flashcardBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FilteredList\u003cFlashcardSet\u003e filteredFlashcardSets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e flashcardSetToDisplay \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates FlashcardModelManager from {@code flashcardBank}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param flashcardBank"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardModelManager(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.flashcardBank \u003d new FlashcardBank(flashcardBank);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredFlashcardSets \u003d new FilteredList\u003c\u003e(this.flashcardBank.getFlashcardSetList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSet.getFlashcard(flashcardIndex.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSet.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSet.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSet.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSet.deleteFlashcard(flashcardIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Set \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return filteredFlashcardSets.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardBank.setFlashcardSet(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardBank.hasFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardBank.addFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetToDisplay.setAll(flashcardSet.getFlashcards());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardBank.removeFlashcardSet(target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (flashcardSetToDisplay.equals(FXCollections.observableArrayList(target.getFlashcards()))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            flashcardSetToDisplay.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard Set Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredFlashcardSets;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredFlashcardSets.setPredicate(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardSetToView() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSetToDisplay;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardSetToView(Index index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetToDisplay.setAll(getFlashcardSet(index).getFlashcards());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardSetToDisplay.setAll(flashcardSet.getFlashcards());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Bank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardBank.resetData(flashcardBank);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardBank;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(obj instanceof FlashcardModelManager)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        FlashcardModelManager other \u003d (FlashcardModelManager) obj;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredFlashcardSets.equals(other.filteredFlashcardSets);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 6,
      "petrickjerico": 60,
      "chuyiting": 80,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/FlashcardQuizModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public interface FlashcardQuizModel extends FlashcardModel, QuizModel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 5
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/FlashcardQuizModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardQuizModelManager implements FlashcardQuizModel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlashcardModelManager flashcardModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizModelManager quizModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Initiates a FlashcardQuizModelObject."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param readOnlyFlashcardBank provided"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param readOnlyQuizRecords provided"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardQuizModelManager(ReadOnlyFlashcardBank readOnlyFlashcardBank,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                     ReadOnlyQuizRecords readOnlyQuizRecords) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager \u003d new FlashcardModelManager(readOnlyFlashcardBank);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager \u003d new QuizModelManager(readOnlyQuizRecords);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.getFlashcard(flashcardSet, flashcardIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.setFlashcard(flashcardSet, target, editedFlashcard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.hasFlashcard(flashcardSet, flashcard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.addFlashcard(flashcardSet, flashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.deleteFlashcard(flashcardSet, flashcardIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.getFlashcardSet(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.setFlashcardSet(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.hasFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.addFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.deleteFlashcardSet(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.deleteQuiz(target.getFlashcardSetName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.setFlashcardBank(flashcardBank);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.getFlashcardBank();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.updateFilteredFlashcardSetList(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardSetToView() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.getFlashcardSetToView();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardSetToView(Index flashcardSet) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardModelManager.setFlashcardSetToView(flashcardSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardModelManager.setFlashcardSetToView(flashcardSet);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question start(Quiz quiz) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.start(quiz);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean hasStarted() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.hasStarted();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void tallyScore(boolean isCorrect) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.tallyScore(isCorrect);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getQuestion();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getAnswer();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String stopQuiz() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.stopQuiz();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Quiz getQuiz() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return quizModelManager.getQuiz();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void cancelQuiz() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.cancelQuiz();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String getQuizRecords(FlashcardSetName name) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getQuizRecords(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuizRecordsToView() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getQuizRecordsToView();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecordsToView(FlashcardSetName name) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.setQuizRecordsToView(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void deleteQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.deleteQuiz(name);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ReadOnlyQuizRecords getAllQuizRecords() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getAllQuizRecords();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveAnswer(String answer) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.saveAnswer(answer);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!(obj instanceof FlashcardQuizModelManager)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardQuizModelManager other \u003d (FlashcardQuizModelManager) obj;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardModelManager.equals(other.flashcardModelManager)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 quizModelManager.equals(other.quizModelManager);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5,
      "petrickjerico": 2,
      "bowei-yu": 193,
      "chuyiting": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public interface Model extends ScheduleModel, FlashcardQuizModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Predicate\u003cFlashcardSet\u003e PREDICATE_SHOW_ALL_FLASHCARDSETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the user prefs\u0027 schedule file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Sets the user prefs\u0027 schedule file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setScheduleFilePath(Path scheduleFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Returns the user prefs\u0027 flashcard bank file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Sets the user prefs\u0027 flashcard bank file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardBankFilePath(Path flashcardBankFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "petrickjerico": 9,
      "bowei-yu": 1,
      "chuyiting": 12,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents the in-memory model of the study bananas data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleModelManager scheduleModelManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlashcardQuizModelManager flashcardQuizModelManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Initializes a ModelManager with the given studyBananas and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ModelManager(ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        ReadOnlySchedule schedule, ReadOnlyFlashcardBank flashcardBank,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        ReadOnlyQuizRecords quizRecords) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireAllNonNull(schedule, userPrefs, flashcardBank, quizRecords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        logger.fine(\"Initializing with user prefs \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                + userPrefs + \" , and schedule: \" + schedule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleModelManager \u003d new ScheduleModelManager(schedule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager \u003d new FlashcardQuizModelManager(flashcardBank, quizRecords);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this(new UserPrefs(), new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return userPrefs.getScheduleFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setScheduleFilePath(Path scheduleFilePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(scheduleFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        userPrefs.setScheduleFilePath(scheduleFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return userPrefs.getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardBankFilePath(Path flashcardBankFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(flashcardBankFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        userPrefs.setFlashcardBankFilePath(flashcardBankFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setSchedule(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.setSchedule(schedule);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.scheduleModelManager.getSchedule();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.scheduleModelManager.hasTask(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.deleteTask(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.addTask(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleModelManager.setTask(target, editedTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleModelManager.getFilteredTaskList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleModelManager.getUpcomingTaskList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 scheduleModelManager.equals(other.scheduleModelManager)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 flashcardQuizModelManager.equals(other.flashcardQuizModelManager);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quiz \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Question start(Quiz quiz) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.start(quiz);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasStarted() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.hasStarted();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void tallyScore(boolean isCorrect) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.tallyScore(isCorrect);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getQuestion();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Quiz getQuiz() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return flashcardQuizModelManager.getQuiz();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getAnswer();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String stopQuiz() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.stopQuiz();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void cancelQuiz() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.cancelQuiz();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String getQuizRecords(FlashcardSetName name) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getQuizRecords(name);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuizRecordsToView() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getQuizRecordsToView();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecordsToView(FlashcardSetName name) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.setQuizRecordsToView(name);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ReadOnlyQuizRecords getAllQuizRecords() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getAllQuizRecords();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void deleteQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.deleteQuiz(name);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveAnswer(String answer) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.saveAnswer(answer);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.setFlashcardBank(flashcardBank);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getFlashcardBank();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getFlashcardSet(index);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.hasFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.deleteFlashcardSet(target);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getFlashcard(flashcardSet, flashcardIndex);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.setFlashcard(flashcardSet, target, editedFlashcard);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.hasFlashcard(flashcardSet, flashcard);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.addFlashcard(flashcardSet, flashcard);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.deleteFlashcard(flashcardSet, flashcardIndex);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.addFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.setFlashcardSet(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardQuizModelManager.updateFilteredFlashcardSetList(predicate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardSetToView() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardQuizModelManager.getFlashcardSetToView();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardSetToView(Index index) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardQuizModelManager.setFlashcardSetToView(index);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardQuizModelManager.setFlashcardSetToView(flashcardSet);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5,
      "cupofjoee": 56,
      "petrickjerico": 45,
      "chuyiting": 85,
      "bowei-yu": 69,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/QuizModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface QuizModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // QUIZ"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Question start(Quiz quiz);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    boolean hasStarted();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void tallyScore(boolean isCorrect);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Quiz getQuiz();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Question getQuestion();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    //void nextQuestion();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Answer getAnswer();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    String stopQuiz();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void cancelQuiz();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    String getQuizRecords(FlashcardSetName name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Quiz getQuizRecordsToView();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void setQuizRecordsToView(FlashcardSetName name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void deleteQuiz(FlashcardSetName name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    ReadOnlyQuizRecords getAllQuizRecords();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveAnswer(String answer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 4,
      "cupofjoee": 6,
      "chuyiting": 16,
      "bowei-yu": 14
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/QuizModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizModelManager implements QuizModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizRecords quizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardSetName toViewFlsetName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizModelManager(ReadOnlyQuizRecords quizRecords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecords \u003d new QuizRecords(quizRecords);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question start(Quiz quiz) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return getQuestion();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean hasStarted() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quiz !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void tallyScore(boolean isCorrect) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz.setPointsScored(isCorrect);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quiz.getQuestion();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Quiz getQuiz() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this.quiz;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quiz.getAnswer();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String stopQuiz() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String score \u003d this.quiz.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecords.addQuiz(quiz);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void cancelQuiz() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String getQuizRecords(FlashcardSetName flashcardSetName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quizRecords.getQuiz(flashcardSetName).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuizRecordsToView() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (toViewFlsetName \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSetName toViewFlsetName \u003d this.toViewFlsetName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.toViewFlsetName \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quizRecords.getQuiz(toViewFlsetName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecordsToView(FlashcardSetName name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.toViewFlsetName \u003d name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void deleteQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecords.removeQuiz(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ReadOnlyQuizRecords getAllQuizRecords() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveAnswer(String answer) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz.saveAnswer(answer);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!(obj instanceof QuizModelManager)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModelManager other \u003d (QuizModelManager) obj;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords.equals(other.quizRecords);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5,
      "cupofjoee": 7,
      "bowei-yu": 102
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/ScheduleModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface ScheduleModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces schedule data with the data in {@code schedule}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setSchedule(ReadOnlySchedule schedule);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns the Schedule */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ReadOnlySchedule getSchedule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the schedule."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must exist in the schedule."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code task} must not already exist in the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the schedule."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of tasks that happen today */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getUpcomingTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "chuyiting": 55
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/ScheduleModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.TaskHappensTodayPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleModelManager implements ScheduleModel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Schedule schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private FilteredList\u003cTask\u003e todayTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Create ScheduleModelManager from {@schedule}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param schedule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleModelManager(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.schedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.schedule.getTaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        todayTasks \u003d new FilteredList\u003c\u003e(this.schedule.getTaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setSchedule(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.schedule.resetData(schedule);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return schedule.hasTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.removeTask(target);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        updateTodaysTask(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.addTask(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.setTask(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        updateTodaysTask(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        todayTasks.setPredicate(new TaskHappensTodayPredicate());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return todayTasks;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        updateTodaysTask(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void updateTodaysTask(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        todayTasks.setPredicate(task -\u003e predicate.test(task) \u0026\u0026 new TaskHappensTodayPredicate().test(task));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(obj instanceof ScheduleModelManager)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModelManager other \u003d (ScheduleModelManager) obj;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 5,
      "chuyiting": 97
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/Answer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a Flashcard\u0027s answer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"Answer should only contain alphanumeric characters and spaces, and it, should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The first character of the answer must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public final String answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || other instanceof seedu.studybananas.model.flashcard.Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 answer.equals(((seedu.studybananas.model.flashcard.Answer) other).answer); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 51,
      "petrickjerico": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a Flashcard in a FlashcardSet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final SimpleStringProperty questionString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final SimpleStringProperty answerString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Flashcard(Question question, Answer answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        questionString \u003d new SimpleStringProperty(question.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        answerString \u003d new SimpleStringProperty(answer.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public String getQuestionString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return questionString.get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setQuestionString(String question) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        questionString.set(question);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public String getAnswerString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return answerString.get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setAnswerString(String answer) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        answerString.set(answer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        builder.append(\"\\nQuestion: \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .append(\"\\nAnswer: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .append(getAnswer());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return Objects.hash(question, answer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 59,
      "petrickjerico": 22
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/FlashcardSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a FlashcardSet that contains flashcards for quiz."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class FlashcardSet {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final FlashcardSetName flashcardSetName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates an empty FlashcardSet with valid Name and empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet(FlashcardSetName flashcardSetName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardSetName \u003d flashcardSetName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates an empty FlashcardSet with valid Name and empty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet(FlashcardSetName flashcardSetName, List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardSetName \u003d flashcardSetName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetName getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSetName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetName getFlashcardSetName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSetName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public List\u003cFlashcard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcards.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Flashcard getFlashcard(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcards.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        int setIndex \u003d flashcards.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (setIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!target.equals(editedFlashcard) \u0026\u0026 hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcards.set(setIndex, editedFlashcard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Checks if the flashcard set contains the specified flashcard."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcard as specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return boolean true or false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a flashcard to the flashcard set."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcard provided"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcards.add(flashcard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Deletes a flashcard at the specified flashcard index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcardIndex provided"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcard(Index flashcardIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            flashcards.remove(flashcardIndex.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!(other instanceof FlashcardSet)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet otherFlashcardSet \u003d (FlashcardSet) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return otherFlashcardSet.getFlashcardSetName().equals(getFlashcardSetName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return Objects.hash(flashcardSetName, flashcards);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        builder.append(getFlashcardSetName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        getFlashcards().forEach(builder::append);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 52,
      "petrickjerico": 40,
      "bowei-yu": 39,
      "chuyiting": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/FlashcardSetName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a FlashcardSet\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardSetName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || other instanceof FlashcardSetName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 name.equals(((FlashcardSetName) other).name); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 10,
      "petrickjerico": 4,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a Flashcard\u0027s question."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"Question should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The first character of the question must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public final String question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || other instanceof seedu.studybananas.model.flashcard.Question // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 question.equals(((seedu.studybananas.model.flashcard.Question) other).question); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 52,
      "petrickjerico": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/UniqueFlashcardSetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.DuplicateFlashcardSetException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.FlashcardSetNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class UniqueFlashcardSetList implements Iterable\u003cFlashcardSet\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final ObservableList\u003cFlashcardSet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final ObservableList\u003cFlashcardSet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard set as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean contains(FlashcardSet toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Adds a flashcard set to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The flashcard set  must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void add(FlashcardSet toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DuplicateFlashcardSetException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the flashcard set {@code target} in the list with {@code edittedFlashcardSet}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The edittedFlashcardSet of {@code edittedFlashcardSet} must not be the same as another"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * existing flashcard set in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireAllNonNull(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new FlashcardSetNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!target.equals(editedFlashcardSet) \u0026\u0026 contains(editedFlashcardSet)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DuplicateFlashcardSetException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.set(index, editedFlashcardSet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void remove(FlashcardSet toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new FlashcardSetNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSets(UniqueFlashcardSetList replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the contents of this list with {@code flashcardSets}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code flashcardSets} must not contain duplicate flashcardSets."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSets(List\u003cFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireAllNonNull(flashcardSets);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!flashcardSetsAreUnique(flashcardSets)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DuplicateFlashcardSetException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.setAll(flashcardSets);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Iterator\u003cFlashcardSet\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof UniqueFlashcardSetList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFlashcardSetList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if {@code flashcardSets} contains only unique flashcardSets."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private boolean flashcardSetsAreUnique(List\u003cFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardSets.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcardSets.size(); j++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                if (flashcardSets.get(i).equals(flashcardSets.get(j))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 127
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(\"Operation would result in duplicate flashcard\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "bowei-yu": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/exceptions/DuplicateFlashcardSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Signals that the operation will result in duplicate FlashcardSet"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * (FlashcardSet are considered duplicates if they have the same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class DuplicateFlashcardSetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public DuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        super(\"Operation would result in duplicate flashcard set\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 11
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(\"Flashcard not found.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "bowei-yu": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/flashcard/exceptions/FlashcardSetNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard set."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class FlashcardSetNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(\"Flashcard set not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "bowei-yu": 3
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/quiz/Quiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " * Represents a quiz pertaining to a flashcard set."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlashcardSet flashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int flashcardSetIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int totalScore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private int pointsScored \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final boolean[] scoreboard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String[] userAnswers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a quiz from a given flashcard set."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param index provided"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcardSet based on index given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz(int index, FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSetIndex \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.totalScore \u003d this.flashcardSet.getFlashcards().size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.scoreboard \u003d new boolean[totalScore];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers \u003d new String[totalScore];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a Quiz object with the given attributes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcardSet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param totalScore"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param pointsScored"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param scoreboard"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz(FlashcardSet flashcardSet, int totalScore, int pointsScored,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                boolean[] scoreboard, String[] userAnswers) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.totalScore \u003d totalScore;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.pointsScored \u003d pointsScored;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.scoreboard \u003d scoreboard;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSetIndex \u003d 0; // index doesn\u0027t matter here anymore"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers \u003d userAnswers;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the next {@code Question} in the quiz."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * If the last question is reached, it returns null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return the question of the next flashcard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (currentIndex \u003e\u003d totalScore) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSet.getFlashcards().get(currentIndex).getQuestion();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the {@code Answer} to the current question in the quiz."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Also increases the index to prepare to get the next question."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return answer of the current flashcard"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer \u003d flashcardSet.getFlashcards().get(currentIndex).getAnswer();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        currentIndex++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the user answers saved for the quiz."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return userAnswers"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String[] getUserAnswers() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return userAnswers;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Stores the user answer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param input user answer"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveAnswer(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assert currentIndex \u003c totalScore;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers[currentIndex] \u003d input;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the flashcard set index of the flashcard set."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return int flashcardSetIndex"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int getFlashcardSetIndex() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.flashcardSetIndex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the points scored based on whether a question"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * is answered correctly."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param isCorrect boolean"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setPointsScored(boolean isCorrect) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        scoreboard[currentIndex - 1] \u003d isCorrect;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            pointsScored++;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Obtains the records for the correctness of answers in the quiz."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return boolean[] scoreboard"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean[] getResults() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return scoreboard;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the {@code FlashcardSet} in the quiz."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return FlashcardSet flashcardSet"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSet getFlashcardSet() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Gives the string representation of the quiz,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * using its score records."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        builder.append(\"Total score for \" + flashcardSet.getName() + \" \u003d \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .append(pointsScored).append(\"/\").append(totalScore).append(\"\\n\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            for (int i \u003d 0; i \u003c totalScore; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                String isCorrect \u003d scoreboard[i] ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                builder.append(i + 1).append(\". Question: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(flashcardSet.getFlashcards().get(i).getQuestion())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                builder.append(\"Correct Answer: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(flashcardSet.getFlashcards().get(i).getAnswer())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                if (userAnswers[i] !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    builder.append(isCorrect).append(\". Your Answer: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                            .append(userAnswers[i])"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                            .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    builder.append(isCorrect).append(\". Your Answer: (not stored)\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                            .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Obtains the percentage score of the quiz."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return double percentage score"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public double getPercentageScore() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return ((double) pointsScored) / ((double) totalScore) * 100;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Obtains the points scored for the quiz."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return int pointsScored"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int getPointsScored() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return pointsScored;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the total score."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return int totalScore"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int getTotalScore() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return totalScore;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the {@code FlashcardSetName} of the quiz."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return FlashcardSetName name of flashcard set"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetName getFlsetName() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSet.getFlashcardSetName();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!(other instanceof Quiz)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz otherQuiz \u003d (Quiz) other;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return otherQuiz.getFlsetName().equals(flashcardSet.getName());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getQuizName() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"Quiz: \" + this.flashcardSet.getFlashcardSetName().toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 6,
      "bowei-yu": 198,
      "chuyiting": 4
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/quiz/UniqueQuizRecordsMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.exceptions.DuplicateQuizException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.exceptions.QuizNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class UniqueQuizRecordsMap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final ObservableMap\u003cFlashcardSetName, Quiz\u003e internalMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final ObservableMap\u003cFlashcardSetName, Quiz\u003e internalUnmodifiableMap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FXCollections.unmodifiableObservableMap(internalMap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(UniqueQuizRecordsMap.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns true if the hash map contains an equivalent quiz as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean contains(Quiz toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalMap.containsValue(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a Quiz to the hashmap with the corresponding flashcard set name.."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add(FlashcardSetName flashcardSetName, Quiz toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.put(flashcardSetName, toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the quiz {@code target} in the list with {@code editedQuiz}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The editedQuiz of {@code editedQuiz} must not be the same as another"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * existing quiz in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz(Quiz target, Quiz editedQuiz) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireAllNonNull(target, editedQuiz);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!contains(target)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new QuizNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!target.equals(editedQuiz) \u0026\u0026 contains(editedQuiz)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new DuplicateQuizException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.remove(target.getFlsetName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.put(editedQuiz.getFlsetName(), editedQuiz);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Removes the equivalent quiz from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The quiz must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove(FlashcardSetName toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!internalMap.containsKey(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            logger.log(Level.WARNING, \"Quiz not found: \", toRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.remove(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the quiz associated with the {@code FlashcardSetName}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param name FlashcardSet name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return quiz as specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalMap.get(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the contents of this map with {@code replacement}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords(UniqueQuizRecordsMap replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.putAll(replacement.internalMap);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the contents of this list with {@code quizRecords}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code quizRecords} must not contain duplicate quizzes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords(Map\u003cFlashcardSetName, Quiz\u003e quizRecords) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireAllNonNull(quizRecords);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.putAll(quizRecords);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the backing map as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ObservableMap\u003cFlashcardSetName, Quiz\u003e asUnmodifiableObservableMap() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalUnmodifiableMap;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                || (other instanceof UniqueQuizRecordsMap // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 internalMap.equals(((UniqueQuizRecordsMap) other).internalMap));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalMap.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "petrickjerico": 7,
      "bowei-yu": 114
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/quiz/exceptions/DuplicateQuizException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DuplicateQuizException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUIZ \u003d \"Duplicate quiz found! Action is not allowed\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public DuplicateQuizException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(MESSAGE_DUPLICATE_QUIZ);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 10
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/quiz/exceptions/QuizNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_NOT_FOUND \u003d \"Quiz not found!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(MESSAGE_QUIZ_NOT_FOUND);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "bowei-yu": 9
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/FlashcardBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.UniqueFlashcardSetList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Wraps all data of flashcard sets."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Duplicates are not allowed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class FlashcardBank implements ReadOnlyFlashcardBank {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final UniqueFlashcardSetList flashcardSets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardBank() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Creates a FlashcardBank using the FlashcardSets in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardBank(ReadOnlyFlashcardBank toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the contents of the task list with {@code flashcardSets}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code flashcardSets} must not contain duplicate flashcardSets."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSets(List\u003cFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardSets.setFlashcardSets(flashcardSets);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Resets the existing data of this {@code FlashcardBank} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void resetData(ReadOnlyFlashcardBank newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        setFlashcardSets(newData.getFlashcardSetList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the schedule."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean hasFlashcardSet(FlashcardSet task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.contains(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Adds a task to the schedule."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The task must not already exist in the schedule."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void addFlashcardSet(FlashcardSet t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedFlashcardSet}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The task identity of {@code editedFlashcardSet} must not be the same as another existing task in the schedule."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(editedFlashcardSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.setFlashcardSet(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Removes {@code key} from this {@code FlashcardBank}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code key} must exist in the FlashcardBank."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void removeFlashcardSet(FlashcardSet key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.asUnmodifiableObservableList().size() + \" sets\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFlashcardSetList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof FlashcardBank // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 flashcardSets.equals(((FlashcardBank) other).flashcardSets));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 119
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/QuizRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.UniqueQuizRecordsMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizRecords implements ReadOnlyQuizRecords {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final UniqueQuizRecordsMap quizRecordsMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap \u003d new UniqueQuizRecordsMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizRecords() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates Quiz Records using the Quiz Records in the {@code toBeCopied}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizRecords(ReadOnlyQuizRecords toBeCopied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the contents of the quiz records list with {@code }."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code quizRecords} must not contain duplicate quizRecords."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecordsMap(Map\u003cFlashcardSetName, Quiz\u003e quizRecordsMap) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecordsMap.setQuizRecords(quizRecordsMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Resets the existing data of this {@code QuizRecords} with {@code newData}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void resetData(ReadOnlyQuizRecords newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        setQuizRecordsMap(newData.getQuizRecordsMap());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns true if a quiz record with the same identity as {@code quiz record} exists in the quiz records."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean hasQuizRecord(Quiz quiz) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(quiz);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.contains(quiz);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a quiz record to the map."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The quiz must not already exist in the map."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void addQuiz(Quiz quiz) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap.add(quiz.getFlsetName(), quiz);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the given quiz {@code target} in the list with {@code editedQuiz}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The quiz identity of {@code editedQuiz} must not be the same as another existing quiz in the quiz records."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz(Quiz target, Quiz editedQuiz) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(editedQuiz);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap.setQuiz(target, editedQuiz);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Removes {@code key} from this {@code QuizRecords}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code key} must exist in the QuizRecords."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void removeQuiz(FlashcardSetName key) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap.remove(key);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.getQuiz(name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.asUnmodifiableObservableMap().toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ObservableMap\u003cFlashcardSetName, Quiz\u003e getQuizRecordsMap() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.asUnmodifiableObservableMap();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                || (other instanceof QuizRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 quizRecordsMap.equals(((QuizRecords) other).quizRecordsMap));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "bowei-yu": 114
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/ReadOnlyFlashcardBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Unmodifiable view of a flashcard bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public interface ReadOnlyFlashcardBank {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns an unmodifiable view of the list of flashcard sets."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * This list will not contain any duplicate flashcard sets."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    ObservableList\u003cFlashcardSet\u003e getFlashcardSetList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 16
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/ReadOnlyQuizRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public interface ReadOnlyQuizRecords {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns an unmodifiable view of the list of quiz records."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * This list will not contain any duplicate quiz records."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    ObservableMap\u003cFlashcardSetName, Quiz\u003e getQuizRecordsMap();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "bowei-yu": 11
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/ReadOnlySchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Unmodifiable view of a schedule"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface ReadOnlySchedule {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 16
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getQuizRecordsFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Wraps all data at the schedule level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Schedule implements ReadOnlySchedule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Schedule() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Creates a Schedule using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Schedule(ReadOnlySchedule toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Resets the existing data of this {@code Schedule} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void resetData(ReadOnlySchedule newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the schedule."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Adds a task to the schedule."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must not already exist in the schedule."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the schedule."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Removes {@code key} from this {@code Schedule}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code key} must exist in the Schedule."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof Schedule // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 tasks.equals(((Schedule) other).tasks));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 3,
      "chuyiting": 116
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/systemlevelmodel/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Path scheduleFilePath \u003d Paths.get(\"data\", \"schedule.json\").toAbsolutePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private Path flashcardBankFilePath \u003d Paths.get(\"data\", \"flashcardbank.json\").toAbsolutePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Path quizRecordsFilePath \u003d Paths.get(\"data\", \"quizrecords.json\").toAbsolutePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        setScheduleFilePath(newUserPrefs.getScheduleFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        setFlashcardBankFilePath(newUserPrefs.getFlashcardBankFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        setQuizRecordsFilePath(newUserPrefs.getQuizRecordsFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setScheduleFilePath(Path scheduleFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(scheduleFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleFilePath \u003d scheduleFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBankFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardBankFilePath(Path flashcardBankFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(flashcardBankFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardBankFilePath \u003d flashcardBankFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path getQuizRecordsFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecordsFilePath(Path quizRecordsFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(quizRecordsFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecordsFilePath \u003d quizRecordsFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 scheduleFilePath.equals(o.scheduleFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 flashcardBankFilePath.equals(o.flashcardBankFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 quizRecordsFilePath.equals(o.quizRecordsFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return Objects.hash(guiSettings, scheduleFilePath, flashcardBankFilePath, quizRecordsFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sb.append(\"\\nLocal schedule data file location : \" + scheduleFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        sb.append(\"\\nLocal flashcardbank data file location : \" + flashcardBankFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        sb.append(\"\\nLocal quizrecords data file location : \" + quizRecordsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 18,
      "chuyiting": 11,
      "bowei-yu": 13,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.timeformat.TimeFormatChecker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a Task\u0027s dateTime in StudyBananas."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"DateTime should be a valid date and in the yyyy-MM-dd HH:mm, yyyy-MM-dd \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                    + \"EEEE, MMM dd yyyy or EEEE, MMM dd yyyy HH:mm format\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String STANDARD_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String UI_FORMAT_DATE \u003d \"EEEE, MMM dd yyyy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param dateTime A valid date time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.dateTime \u003d TimeFormatChecker.mapToLocalDateTime(dateTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Util function for sample data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static DateTime getToday(int hour, int minute) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalTime time \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter dayFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String todayStr \u003d dayFormatter.format(today) + \" \" + timeFormatter.format(time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new DateTime(todayStr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Util function for sample data."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static DateTime getYesterday(int hour, int minute) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDate today \u003d LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalTime time \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter dayFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String todayStr \u003d dayFormatter.format(today) + \" \" + timeFormatter.format(time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new DateTime(todayStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns true if a given string is a valid date or an empty string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return test.equals(\"\") || TimeFormatChecker.check(test);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Check if the dateTime is today"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return LocalDate.now().equals(dateTime.toLocalDate());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter wantedFormat \u003d DateTimeFormatter.ofPattern(STANDARD_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String dateInString \u003d dateTime.format(wantedFormat);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateInString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the date time in EEEE, MMM dd yyyy format without any punctuation."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return Date Time string without punctuation."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getUiFormatDateNoPunctuation() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String dateInString \u003d this.getUiFormatDate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return StringUtil.getStringNoPunctuation(dateInString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 dateTime.toString().equals(((DateTime) other).dateTime.toString())); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Provides Ui Format Date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getUiFormatDate() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(UI_FORMAT_DATE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return formatter.format(this.dateTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Provides Standard Format Time."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getStandardFormatTime() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return toString().split(\" \")[1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 62,
      "cupofjoee": 3,
      "chuyiting": 60
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a Task\u0027s description in StudyBananas."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"Description should only contain printable characters, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([^\\\\s].*)?$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description A valid task\u0027s description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return test.equals(\"\") || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean rigorousEquals(Description other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.description.toLowerCase().equals(other.description.toLowerCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the description string without any punctuation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return Description string without punctuation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toStringNoPunctuation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return StringUtil.getStringNoPunctuation(description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 65,
      "cupofjoee": 2,
      "chuyiting": 4
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a Task\u0027s duration in StudyBananas."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"Duration should only contain a positive integer which is less than 1440.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final int MINUTE_PER_DAY \u003d 60 * 24;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final Integer duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param duration A valid task\u0027s duration."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Duration(String duration) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d Integer.valueOf(duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Construct Duration from an {@Code Integer}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param duration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Duration(Integer duration) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        checkArgument(duration \u003c MINUTE_PER_DAY, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns true if a given string is a valid duration."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            int duration \u003d Integer.valueOf(test);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return duration \u003e\u003d 0 \u0026\u0026 duration \u003c MINUTE_PER_DAY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration + \" minutes\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof Duration)// instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 duration \u003d\u003d ((Duration) other).duration; // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 2,
      "chuyiting": 60
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/InfoContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InfoContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public InfoContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean isEmptyKeyword(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return keywords.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesTitleContainKeywords(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTitle().title, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesDescriptionContainKeywords(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Optional\u003cDescription\u003e description \u003d task.getDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return !isEmptyKeyword(keywords) \u0026\u0026 keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .allMatch(keyword -\u003e description.map(desc -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                                desc.toStringNoPunctuation(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                                StringUtil.getStringNoPunctuation(keyword)))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        .orElse(false));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesDateTimeContainKeywords(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Optional\u003cDateTime\u003e dateTime \u003d task.getDateTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return !isEmptyKeyword(keywords) \u0026\u0026 keywords.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .allMatch(keyword -\u003e dateTime.map(date -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(date.toString(), (keyword))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                                date.getUiFormatDateNoPunctuation(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                                StringUtil.getStringNoPunctuation(keyword)))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        .orElse(false));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return doesDateTimeContainKeywords(task) || doesDescriptionContainKeywords(task)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || doesTitleContainKeywords(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof InfoContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 keywords.equals(((InfoContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 37,
      "cupofjoee": 2,
      "chuyiting": 19
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.time.temporal.ChronoUnit.MINUTES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.scheduleui.TaskCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a Task in the StudyBananas."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Optional\u003cDescription\u003e description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Optional\u003cDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Optional\u003cDuration\u003e duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Not sure if this is a good practice. This is used by the ListChangeListener in TimeScale"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private TaskCell taskCellBind;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param title       Title of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param dateTime    Date and Time of the task (Optional)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Task(Title title, Description description, DateTime dateTime, Duration duration) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.description \u003d Optional.ofNullable(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Util function for {@Code TaskCell}, so duration must exist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean isLongerThanAnHour() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert duration.isPresent() : \"You shouldn\u0027t call this method!!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return getNumberOfMinuteHappenToday() \u003e\u003d 60;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean hasDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description.isPresent();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean hasDateTime() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateTime.isPresent();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean hasDuration() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return duration.isPresent();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if both tasks have the same title and description."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean isSameTask(Task other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Task otherTask \u003d other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return otherTask.getTitle().rigorousEquals(this.getTitle())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 (other.getDescription().equals(this.getDescription())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || haveSameDescription(otherTask, this))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 (other.getDateTime().equals(this.getDateTime())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || haveSameDateTime(otherTask, this))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 (other.getDuration().equals(this.getDuration())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || haveSameDuration(otherTask, this));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean bothHaveDescription(Task t1, Task t2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return t1.hasDescription() \u0026\u0026 t2.hasDescription();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean haveSameDescription(Task t1, Task t2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return bothHaveDescription(t1, t2)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 t1.getDescription().get().rigorousEquals(t2.getDescription().get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean bothHaveDateTime(Task t1, Task t2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return t1.hasDateTime() \u0026\u0026 t2.hasDateTime();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean haveSameDateTime(Task t1, Task t2) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return bothHaveDateTime(t1, t2)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 t1.getDateTime().get().equals(t2.getDateTime().get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean bothHaveDuration(Task t1, Task t2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return t1.hasDuration() \u0026\u0026 t2.hasDuration();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean haveSameDuration(Task t1, Task t2) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return bothHaveDuration(t1, t2)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 t1.getDuration().get().equals(t2.getDuration().get());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether the duration of {@code otherTask} overlaps"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * with the duration of {@code this} task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param otherTask Task to be checked."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if the two tasks overlap, false other wise."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean isDateTimeOverlapped(Task otherTask) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!bothHaveDateTime(otherTask, this)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            LocalDateTime thisTaskStartingTime \u003d this.getTaskStartingTime();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            LocalDateTime thisTaskEndingTime \u003d this.getTaskEndingTime();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            LocalDateTime otherTaskStartingTime \u003d otherTask.getTaskStartingTime();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            LocalDateTime otherTaskEndingTime \u003d otherTask.getTaskEndingTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return thisTaskStartingTime.isBefore(otherTaskEndingTime)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                    \u0026\u0026 thisTaskEndingTime.isAfter(otherTaskStartingTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private LocalDateTime getTaskStartingTime() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return getDateTime().get().dateTime;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private LocalDateTime getTaskEndingTime() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Integer duration \u003d this.duration.map(dur -\u003e dur.duration).orElse(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        LocalDateTime endingDateTime \u003d getDateTime().get().dateTime.plus(duration, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return endingDateTime;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private StringBuilder getTitleString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StringBuilder titleInString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        titleInString.append(\"Title: \").append(getTitle() + \"\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return titleInString;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private StringBuilder getDescriptionString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StringBuilder emptyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description.map(desc -\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new StringBuilder(\"Description: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        .append(desc.toString() + \"\\n\")).orElse(emptyString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private StringBuilder getDateTimeString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StringBuilder emptyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateTime.map(time -\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new StringBuilder(\"Time: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        .append(time.toString() + \"\\n\")).orElse(emptyString);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StringBuilder getDurationString() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        StringBuilder emptyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration.map(time -\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new StringBuilder(\"Duration: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        .append(time.toString() + \"\\n\")).orElse(emptyString);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskCell getTaskCellBind() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return taskCellBind;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTaskCellBind(TaskCell taskCellBind) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.taskCellBind \u003d taskCellBind;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Check if the duration of the tasks would happen today."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if it takes place today, false otherwise."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean happensToday() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration.isPresent() \u0026\u0026 dateTime.isPresent()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 (dateTime.get().isToday() || startFromOldAndExtendToToday(dateTime.get(), duration.get()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean startFromOldAndExtendToToday(DateTime dateTime, Duration duration) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDateTime startTime \u003d dateTime.dateTime;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDateTime endTime \u003d dateTime.dateTime.plusMinutes(duration.duration);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return today.isAfter(startTime.toLocalDate()) \u0026\u0026 (!endTime.toLocalDate().isBefore(today));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public double getNumberOfMinuteHappenToday() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert happensToday() : \"should only calculate number of minute happens today when the task happens today\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        double duration \u003d this.duration.get().duration;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (dateTime.get().isToday()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return duration;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            LocalDateTime today \u003d LocalDate.now().atStartOfDay();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            double minutes \u003d MINUTES.between(today, dateTime.get().dateTime);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return MINUTES.between(today, dateTime.get().dateTime.plusMinutes((long) duration));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return otherTask.getTitle().equals(this.getTitle())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(this.getDescription())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 otherTask.dateTime.equals(this.dateTime)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 otherTask.duration.equals(this.duration);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return Objects.hash(title, description, dateTime, duration);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        builder.append(getTitleString())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .append(getDescriptionString())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .append(getDateTimeString())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .append(getDurationString());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 150,
      "cupofjoee": 3,
      "chuyiting": 107
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/TaskHappensTodayPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskHappensTodayPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return task.happensToday();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof TaskHappensTodayPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 16
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \"Task title should only contain alphanumeric characters and spaces, and it should not be blank\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"\\n(The length of the title has to be less than 40 characters.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assert title !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 40;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean rigorousEquals(Title other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.title.toLowerCase().equals(other.title.toLowerCase());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 3,
      "chuyiting": 54
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.task.exceptions.OverlapTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses #equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (isTaskOverlapped(null, toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new OverlapTaskException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (target.isSameTask(editedTask) || contains(editedTask)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (isTaskOverlapped(target, editedTask)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new OverlapTaskException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether {@code toCheck} task duration overlaps with any existing task in the task list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param toCheck Task to be checked."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if there is overlap, false otherwise."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean isTaskOverlapped(Task target, Task toCheck) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return internalList.stream().anyMatch(currentTask -\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                currentTask !\u003d (target) \u0026\u0026 currentTask.isDateTimeOverlapped(toCheck));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 20,
      "cupofjoee": 4,
      "chuyiting": 133
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * title and description)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(\"Operation would result in duplicate task\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 11,
      "cupofjoee": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/exceptions/OverlapTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.studybananas.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Signals that the operation would create a task conflicting in duration"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * with another existing task in the schedule."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class OverlapTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public OverlapTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(\"Operation would result in other existing tasks to be overlapped in the duration\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 12
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 6,
      "cupofjoee": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/exceptions/TimeFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeFormatException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TimeFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(\"Time format is not valid\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/timeformat/IsoDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class IsoDate implements TimeFormat {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final List\u003cString\u003e PATTERNS \u003d Arrays.asList(\"uuuu-MM-dd\", \"EEEE, MMM dd uuuu\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Default time to be set up for date is 12PM"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String DEFAULT_TIME \u003d \" 12:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private DateTimeFormatter buildDateTimeFormatter(String format) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new DateTimeFormatterBuilder().appendPattern(format)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .optionalStart().appendPattern(\" HH:mm\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .optionalEnd()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public LocalDateTime check(String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (String pattern : PATTERNS) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                String dateAppendedTime \u003d date + DEFAULT_TIME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DateTimeFormatter dateTimeFormatter \u003d buildDateTimeFormatter(pattern);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DateTimeFormatter strictDateTimeFormatter \u003d dateTimeFormatter.withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                LocalDateTime ld \u003d LocalDateTime.parse(dateAppendedTime, strictDateTimeFormatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                return ld;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Fail all the date time formats"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        throw new TimeFormatException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 25,
      "cupofjoee": 2,
      "chuyiting": 17
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/timeformat/IsoDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class IsoDateTime implements TimeFormat {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final List\u003cString\u003e PATTERNS \u003d Arrays.asList(\"uuuu-MM-dd\", \"EEEE, MMM dd uuuu\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private DateTimeFormatter buildDateTimeFormatter(String format) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new DateTimeFormatterBuilder().appendPattern(format)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .optionalStart().appendPattern(\" HH:mm\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .optionalEnd()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public LocalDateTime check(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (String pattern : PATTERNS) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DateTimeFormatter dateTimeFormatter \u003d buildDateTimeFormatter(pattern);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DateTimeFormatter strictDateTimeFormatter \u003d dateTimeFormatter.withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                LocalDateTime ld \u003d LocalDateTime.parse(date, strictDateTimeFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                return ld;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Fail all the date time formats"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        throw new TimeFormatException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 18,
      "cupofjoee": 2,
      "chuyiting": 18
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/timeformat/TimeFormat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface TimeFormat {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    LocalDateTime check(String time) throws TimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 7
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/task/timeformat/TimeFormatChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeFormatChecker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final List\u003cTimeFormat\u003e VALID_FORMATS \u003d Arrays.asList(new IsoDateTime(), new IsoDate());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Check if the time format is supported by StudyBananas)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean check(String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (TimeFormat format : VALID_FORMATS) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                LocalDateTime ldt \u003d format.check(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (TimeFormatException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Map time String to {@Code LocalDateTime}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static LocalDateTime mapToLocalDateTime(String time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (TimeFormat format : VALID_FORMATS) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                LocalDateTime ldt \u003d format.check(time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                return ldt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (TimeFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                //Not a good practice, still need to refactor."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        throw new TimeFormatException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 2,
      "chuyiting": 38
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Contains utility methods for populating {@code StudyBananas} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CS2103T\"), new Description(\"quiz flset:1\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    DateTime.getYesterday(23, 0), new Duration(120)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CS2103T\"), new Description(\"Week 8 topics quiz.\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    DateTime.getToday(11, 30), new Duration(60)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CS2103T\"), new Description(\"Week 9 topics quiz.\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-10-16 23:59\"), new Duration(60)),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CS2103T\"), new Description(\"Popping dance lecture.\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-10-23 23:59\"), new Duration(60)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CCA\"), new Description(\"Week 10 topics quiz.\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    DateTime.getToday(13, 0), new Duration(120)),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"Household\"), null,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-11-11 12:30\"), new Duration(60)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"Job\"), new Description(\"\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-09-29 22:00\"), new Duration(60))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static List\u003cFlashcard\u003e getSampleFlashcardCS2040() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"Time complexity of binary search?\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new Answer(\"O(logn)\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"What are conditions for binary search?\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Answer(\"It has to be a sorted array\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static List\u003cFlashcard\u003e getSampleFlashcardPhysics() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"Formula to show Newton\u0027s Second Law of Motion\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Answer(\"F \u003d ma [where m \u003d mass (in kg) and a \u003d acceleration (in ms^-2)]\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"Formula for GPE\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Answer(\"GPE \u003d mgh [where m \u003d mass (in kg), g \u003d 9.81ms^-2 and h \u003d height (in m)]\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static List\u003cFlashcard\u003e getSampleFlashcardCS2103T() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"What is an advantage of defensive programming?\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Answer(\"Improves software and source code quality and comprehensibility, \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        + \"for software to behave in a predictable manner despite unexpected inputs or user actions\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"Why are sequence diagrams important?\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Answer(\"It is useful to show shows the interaction logic between the objects in the system \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        + \"in the time order that the interactions take place\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"What UML diagram should we use to describe an object instance?\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Answer(\"Object Diagram\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static FlashcardSet[] getSampleFlashcardSets() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new FlashcardSet[] {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new FlashcardSet(new FlashcardSetName(\"CS2103T\"), getSampleFlashcardCS2103T()),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new FlashcardSet(new FlashcardSetName(\"CS2040\"), getSampleFlashcardCS2040()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new FlashcardSet(new FlashcardSetName(\"Physics\"), getSampleFlashcardPhysics())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static Quiz[] getSampleQuizzes() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Quiz[] {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Quiz(new FlashcardSet(new FlashcardSetName(\"CS2103T\"), getSampleFlashcardCS2103T()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    3, 2, new boolean[]{true, true, false},"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new String[]{\"improves software code quality\", \"shows interaction logic\", \"class diagram\"}),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Quiz(new FlashcardSet(new FlashcardSetName(\"CS2040\"), getSampleFlashcardCS2040()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    2, 2, new boolean[]{true, true},"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new String[]{\"o(logn)\", \"must be sorted\"}),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Quiz(new FlashcardSet(new FlashcardSetName(\"Physics\"), getSampleFlashcardPhysics()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    2, 1, new boolean[] {true, false},"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new String[]{\"F \u003d ma\", \"hmm i forgot\"})"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static ReadOnlySchedule getSampleSchedule() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule sampleSchedule \u003d new Schedule();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            sampleSchedule.addTask(sampleTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return sampleSchedule;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static ReadOnlyFlashcardBank getSampleFlashcardBank() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBank sampleFlashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (FlashcardSet sampleFlashcardSet : getSampleFlashcardSets()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            sampleFlashcardBank.addFlashcardSet(sampleFlashcardSet);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return sampleFlashcardBank;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static ReadOnlyQuizRecords getSampleQuizRecords() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords quizRecords \u003d new QuizRecords();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Quiz sampleQuiz: getSampleQuizzes()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizRecords.addQuiz(sampleQuiz);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 38,
      "chuyiting": 29,
      "bowei-yu": 50,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 6,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.FlashcardBankStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.quizstorage.QuizRecordsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.schedulestorage.ScheduleStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public interface Storage extends UserPrefsStorage, ScheduleStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBankStorage, QuizRecordsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void saveSchedule(ReadOnlySchedule schedule) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Path getQuizRecordsFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 19,
      "bowei-yu": 10,
      "chuyiting": 10,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.FlashcardBankStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.quizstorage.QuizRecordsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.schedulestorage.ScheduleStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Manages storage of StudyBananas data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleStorage scheduleStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final FlashcardBankStorage flashcardBankStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizRecordsStorage quizRecordsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ScheduleStorage}, {@code FlashcardBankStorage},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code QuizRecordsStorage}, and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public StorageManager(ScheduleStorage scheduleStorage, FlashcardBankStorage flashcardBankStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                          QuizRecordsStorage quizRecordsStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleStorage \u003d scheduleStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardBankStorage \u003d flashcardBankStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecordsStorage \u003d quizRecordsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleStorage.getScheduleFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return readSchedule(scheduleStorage.getScheduleFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        logger.fine(\"Attempting to read schedule from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleStorage.readSchedule(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        saveSchedule(schedule, scheduleStorage.getScheduleFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.fine(\"Attempting to write to schedule data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleStorage.saveSchedule(schedule, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashcardBank methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBankStorage.getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return readFlashcardBank(flashcardBankStorage.getFlashcardBankFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(Path filePath) throws"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        logger.fine(\"Attempting to read FlashcardBank from file: \" + filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBankStorage.readFlashcardBank(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        saveFlashcardBank(flashcardBank, flashcardBankStorage.getFlashcardBankFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        logger.fine(\"Attempting to write to FlashcardBank data file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardBankStorage.saveFlashcardBank(flashcardBank, filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuizRecords methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path getQuizRecordsFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsStorage.getQuizRecordsFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return readQuizRecords(quizRecordsStorage.getQuizRecordsFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords(Path filePath) throws"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        logger.fine(\"Attempting to read Quiz Records from file: \" + filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsStorage.readQuizRecords(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        saveQuizRecords(quizRecords, quizRecordsStorage.getQuizRecordsFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        logger.fine(\"Attempting to write to Quiz Records data file: \" + filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsStorage.saveQuizRecords(quizRecords, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 48,
      "chuyiting": 30,
      "bowei-yu": 32,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "chuyiting": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/flashcardstorage/FlashcardBankStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a storage for {@link ReadOnlyFlashcardBank}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public interface FlashcardBankStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns FlashcardBank data as a {@link ReadOnlyFlashcardBank}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @see #getFlashcardBankFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Saves the given {@link ReadOnlyFlashcardBank} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param schedule cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    void saveFlashcardBank(ReadOnlyFlashcardBank schedule) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @see #saveFlashcardBank(ReadOnlyFlashcardBank)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    void saveFlashcardBank(ReadOnlyFlashcardBank schedule, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 42,
      "chuyiting": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/flashcardstorage/JsonAdaptedFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                           @JsonProperty(\"answer\") String answer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        question \u003d source.getQuestion().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        answer \u003d source.getAnswer().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new Flashcard(modelQuestion, modelAnswer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 54
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/flashcardstorage/JsonAdaptedFlashcardSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonAdaptedFlashcardSet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FlashcardSet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcardSet} with the given task details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcardSet(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                           @JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (flashcards !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts a given {@code FlashcardSet} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcardSet(FlashcardSet source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        name \u003d source.getFlashcardSetName().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcards.addAll(source.getFlashcards().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            .map(JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code FlashcardSet} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardSet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, FlashcardSetName.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        final FlashcardSetName modelName \u003d new FlashcardSetName(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final List\u003cFlashcard\u003e modelFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (JsonAdaptedFlashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            modelFlashcards.add(flashcard.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new FlashcardSet(modelName, modelFlashcards);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 58,
      "petrickjerico": 4
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/flashcardstorage/JsonAdaptedFlashcardSetName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedFlashcardSetName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcardSetName} with the given {@code name}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedFlashcardSetName(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts a given {@code name} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedFlashcardSetName(FlashcardSetName source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        name \u003d source.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts this Jackson-friendly adapted dateTime object into the model\u0027s {@code FlashcardSetName} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted dateTime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetName toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!FlashcardSetName.isValidName(name)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(FlashcardSetName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new FlashcardSetName(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "bowei-yu": 41
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/flashcardstorage/JsonFlashcardBankStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonFlashcardBankStorage implements FlashcardBankStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFlashcardBankStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonFlashcardBankStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return readFlashcardBank(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Similar to {@link #readFlashcardBank()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Optional\u003cJsonSerializableFlashcardBank\u003e jsonFlashcardBank \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                filePath, JsonSerializableFlashcardBank.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!jsonFlashcardBank.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return Optional.of(jsonFlashcardBank.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IllegalValueException | IllegalArgumentException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        saveFlashcardBank(flashcardBank, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Similar to {@link #saveFlashcardBank(ReadOnlyFlashcardBank)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(flashcardBank);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashcardBank(flashcardBank), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 75,
      "chuyiting": 1,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/flashcardstorage/JsonSerializableFlashcardBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonSerializableFlashcardBank {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD_SETS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"FlashcardSets list contains duplicate flashcardSet(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcardSet\u003e flashcardSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code JsonSerializableFlashcardBank} with the given flashcardSets."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonSerializableFlashcardBank(@JsonProperty(\"flashcardSets\") List\u003cJsonAdaptedFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardSets.addAll(flashcardSets);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts a given {@code ReadOnlyFlashcardBank} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFlashcardBank}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonSerializableFlashcardBank(ReadOnlyFlashcardBank source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.addAll(source.getFlashcardSetList().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .map(JsonAdaptedFlashcardSet::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts this flashcardBank into the model\u0027s {@code FlashcardBank} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardBank toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (JsonAdaptedFlashcardSet jsonAdaptedFlashcardSet : flashcardSets) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            FlashcardSet flashcardSet \u003d jsonAdaptedFlashcardSet.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            if (flashcardBank.hasFlashcardSet(flashcardSet)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD_SETS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            flashcardBank.addFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBank;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 53,
      "bowei-yu": 3
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/quizstorage/JsonAdaptedQuiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.JsonAdaptedFlashcardSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedQuiz {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELD \u003d \"Quiz\u0027s %s field is missing.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final JsonAdaptedFlashcardSet flset;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int totalScore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int pointsScored;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final boolean[] scoreboard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String[] userAnswers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a JsonAdaptedQuiz object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flset flashcard set provided"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param totalScore of the quiz"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param pointsScored during the quiz"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param scoreboard recorded during the quiz"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedQuiz(@JsonProperty(\"flashcardSet\") JsonAdaptedFlashcardSet flset,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"totalScore\") int totalScore,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"pointsScored\") int pointsScored,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"scoreboard\") boolean[] scoreboard,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"userAnswers\") String[] userAnswers) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flset \u003d flset;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.pointsScored \u003d pointsScored;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.totalScore \u003d totalScore;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.scoreboard \u003d scoreboard;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers \u003d userAnswers;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts a given {@code Quiz} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedQuiz(Quiz source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flset \u003d new JsonAdaptedFlashcardSet(source.getFlashcardSet());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        pointsScored \u003d source.getPointsScored();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        totalScore \u003d source.getTotalScore();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        scoreboard \u003d source.getResults();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        userAnswers \u003d source.getUserAnswers();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts this Jackson-friendly adapted quiz object into the model\u0027s {@code Quiz} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted quiz."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (flset \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_MISSING_FIELD,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    FlashcardSet.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (totalScore \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_MISSING_FIELD,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    \"total score\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (scoreboard \u003d\u003d null || scoreboard.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_MISSING_FIELD,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    \"scoreboard\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (userAnswers \u003d\u003d null || userAnswers.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_MISSING_FIELD,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    \"user answers\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        final FlashcardSet flashcardSet \u003d flset.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Quiz(flashcardSet, totalScore, pointsScored, scoreboard, userAnswers);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "bowei-yu": 75
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/quizstorage/JsonQuizRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonQuizRecordsStorage implements QuizRecordsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuizRecordsStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonQuizRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path getQuizRecordsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return readQuizRecords(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Similar to {@link #readQuizRecords}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Optional\u003cJsonSerializableQuizRecords\u003e jsonQuizRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                filePath, JsonSerializableQuizRecords.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!jsonQuizRecords.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return Optional.of(jsonQuizRecords.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IllegalValueException | IllegalArgumentException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        saveQuizRecords(quizRecords, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Similar to {@link #saveQuizRecords(ReadOnlyQuizRecords)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(quizRecords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuizRecords(quizRecords), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "bowei-yu": 71
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/quizstorage/JsonSerializableQuizRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.JsonAdaptedFlashcardSetName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonSerializableQuizRecords {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final Map\u003cJsonAdaptedFlashcardSetName, JsonAdaptedQuiz\u003e quizzes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Constructs a {@code JsonSerializableQuizRecords} with the given flashcardSets."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonSerializableQuizRecords(@JsonProperty(\"quizzes\") Map\u003cJsonAdaptedFlashcardSetName,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizzes.putAll(quizzes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts a given {@code ReadOnlyQuizRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonSerializableQuizRecords(ReadOnlyQuizRecords source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Map\u003cFlashcardSetName, Quiz\u003e quizMap \u003d source.getQuizRecordsMap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Map.Entry\u003cFlashcardSetName, Quiz\u003e pair : quizMap.entrySet()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedQuiz jsonAdaptedQuiz \u003d new JsonAdaptedQuiz(pair.getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedFlashcardSetName jsonAdaptedFlashcardSetName \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new JsonAdaptedFlashcardSetName(pair.getKey());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizzes.put(jsonAdaptedFlashcardSetName, jsonAdaptedQuiz);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts this quizRecords into the model\u0027s {@code QuizRecords} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizRecords toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords quizRecords \u003d new QuizRecords();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Map.Entry\u003cJsonAdaptedFlashcardSetName, JsonAdaptedQuiz\u003e pair : quizzes.entrySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedQuiz jsonAdaptedQuiz \u003d pair.getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Quiz quiz \u003d jsonAdaptedQuiz.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizRecords.addQuiz(quiz);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "bowei-yu": 51
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/quizstorage/QuizRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public interface QuizRecordsStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Path getQuizRecordsFilePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords(Path filePath) throws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveQuizRecords(ReadOnlyQuizRecords quizRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "bowei-yu": 19
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/schedulestorage/JsonAdaptedDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonAdaptedDateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code JsonAdaptedDateTime} with the given {@code dateTime}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedDateTime(String dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts a given {@code DateTime} into this class for Jackson use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedDateTime(DateTime source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        dateTime \u003d source.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts this Jackson-friendly adapted dateTime object into the model\u0027s {@code DateTime} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted dateTime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public DateTime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "chuyiting": 40
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/schedulestorage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Optional\u003cInteger\u003e duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Optional\u003cJsonAdaptedDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                           @JsonProperty(\"description\") Optional\u003cString\u003e description,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                           @JsonProperty(\"dateTime\") Optional\u003cString\u003e dateTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                           @JsonProperty(\"duration\") Optional\u003cInteger\u003e duration) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d dateTime.map(JsonAdaptedDateTime::new);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        description \u003d source.getDescription().map(description -\u003e description.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dateTime \u003d source.getDateTime().map(JsonAdaptedDateTime::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        duration \u003d source.getDuration().map(duration-\u003e duration.duration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (title \u003d\u003d null || title.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final Description modelDescription \u003d description.map(desc -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            desc.equals(\"\") ? null : new Description(desc)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ).orElse(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final DateTime modelDateTime \u003d dateTime.map(jsonDateTime -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return jsonDateTime.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }).orElse(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final Duration modelDuration \u003d duration.map(dur -\u003e new Duration(dur)).orElse(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Task(modelTitle, modelDescription, modelDateTime, modelDuration);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 17,
      "cupofjoee": 7,
      "chuyiting": 50
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/schedulestorage/JsonScheduleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonScheduleStorage implements ScheduleStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonScheduleStorage.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonScheduleStorage(Path filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return readSchedule(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Similar to {@link #readSchedule()}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Optional\u003cJsonSerializableSchedule\u003e jsonSchedule \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                filePath, JsonSerializableSchedule.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!jsonSchedule.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return Optional.of(jsonSchedule.get().toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + iae.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new DataConversionException(iae);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        saveSchedule(schedule, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Similar to {@link #saveSchedule(ReadOnlySchedule)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSchedule(schedule), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 7,
      "chuyiting": 68
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/schedulestorage/JsonSerializableSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * An Immutable Schedule that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@JsonRootName(value \u003d \"schedule\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonSerializableSchedule {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code JsonSerializableSchedule} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonSerializableSchedule(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts a given {@code ReadOnlySchedule} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSchedule}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonSerializableSchedule(ReadOnlySchedule source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts this schedule into the model\u0027s {@code Schedule} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (schedule.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            schedule.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 5,
      "chuyiting": 51
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/storage/schedulestorage/ScheduleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a storage for {@link Schedule}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface ScheduleStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns Schedule data as a {@link ReadOnlySchedule}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @see #getScheduleFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param schedule cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void saveSchedule(ReadOnlySchedule schedule) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @see #saveSchedule(ReadOnlySchedule)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "chuyiting": 40
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandTextField.focusedProperty().addListener(((observable, oldValue, newValue)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            -\u003e handleFocus(newValue)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleFocus(boolean isFocused) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (isFocused) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.commandTextField.setStyle(\"-fx-border-color: transparent transparent #F6C504 transparent;\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-border-width: 2;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.commandTextField.setStyle(\"-fx-border-color: transparent transparent #cccccc transparent;\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-border-width: 1;\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "         * @see seedu.studybananas.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setCommandBoxToFocus() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "chuyiting": 17,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/FlashcardSetCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonClickedFlashcardSetState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardSetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"FlashcardSetCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    class StyleCombination {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public final String backgroundColor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public final String innerColor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public final Image intersectImage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        StyleCombination(String backgroundColor, String innerColor, Image intersectImage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.backgroundColor \u003d backgroundColor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.innerColor \u003d innerColor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.intersectImage \u003d intersectImage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final FlashcardSet flashcardSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Image blueIntersect \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .getResourceAsStream(\"/images/blue-intersection.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Image yellowIntersect \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .getResourceAsStream(\"/images/yellow-intersection.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Image pinkIntersect \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .getResourceAsStream(\"/images/pink-intersection.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final StyleCombination[] styles \u003d new StyleCombination[] {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        new StyleCombination(\"#ABD6F5\", \"#ED78E8\", pinkIntersect), //Tertiary"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        new StyleCombination(\"#F5DBAB\", \"#7886ED\", blueIntersect), //Primary"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        new StyleCombination(\"#7886ED\", \"#F5DBAB\", yellowIntersect) //Secondary"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonClickedFlashcardSetState flashcardSetState;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane cardPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ImageView intersect;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public FlashcardSetCard(Logic logic, FlashcardSet flashcardSet, int displayedIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        StyleCombination style \u003d this.styles[displayedIndex % 3];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        cardPane.setStyle(\"-fx-background-color: \" + style.backgroundColor + \"; \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                + \"-fx-background-radius: 10; -fx-border-radius: 10;\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        id.setText(String.valueOf(displayedIndex) + \". \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        title.setText(flashcardSet.getName().name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        id.setStyle(\"-fx-text-fill: \" + style.innerColor + \"; -fx-font-weight: bold; -fx-font-family: Arial;\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title.setStyle(\"-fx-text-fill: \" + style.innerColor + \"; -fx-font-weight: bold; -fx-font-family: Arial;\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        circle.setStyle(\"-fx-fill: \" + style.innerColor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        intersect.setImage(style.intersectImage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // get access to the state without subscribing to it."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardSetState \u003d SingletonClickedFlashcardSetState.getInstance(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleMouseClicked() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardSetState.updateState(this.flashcardSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!(other instanceof FlashcardSetCard)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSetCard card \u003d (FlashcardSetCard) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 flashcardSet.equals(card.flashcardSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "petrickjerico": 38,
      "chuyiting": 61
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/FlashcardSetListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardSetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private static final String FXML \u003d \"FlashcardSetListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardSetListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private ListView\u003cFlashcardSet\u003e flashcardSetListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public FlashcardSetListPanel(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardSetListView.setSelectionModel(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardSetListView.setItems(logic.getFilteredFlashcardSetList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetListView.setCellFactory(listView -\u003e new FlashcardSetListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    class FlashcardSetListViewCell extends ListCell\u003cFlashcardSet\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        protected void updateItem(FlashcardSet flashcardSet, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            super.updateItem(flashcardSet, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            setStyle(\"-fx-padding: 4px\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            if (empty || flashcardSet \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                setGraphic(new FlashcardSetCard(logic, flashcardSet, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "petrickjerico": 42,
      "chuyiting": 10
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/FlashcardUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.listeners.CommandResultStateListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.listeners.UiStateListener;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.GlobalState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardUi extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"FlashcardUi.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Callback\u003cCommandResult, Void\u003e actionOnCommandResultChange \u003d new Callback\u003cCommandResult, Void\u003e() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public Void call(CommandResult state) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (shouldRender(state)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                logger.info(\"Result: \" + state.getFeedbackToUser());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                resultDisplay.setFeedbackToUser(state.getFeedbackToUser());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // empty callback"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Callback\u003cUiStateType, Void\u003e actionOnUiStateChange \u003d (uiStateType) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private FlashcardSetListPanel flashcardSetListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private FlashcardsDisplay flashcardsDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private UiStateListener uiStateListener;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandResultStateListener commandResultStateListener;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane flashcardSetListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane flashcardsDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Constructor for ScheduleUi."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardUi(Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardSetListPanel \u003d new FlashcardSetListPanel(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetListPanelPlaceholder.getChildren().add(flashcardSetListPanel.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay \u003d new FlashcardsDisplay(logic.getFlashcardSetToView());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplayPlaceholder.getChildren().add(flashcardsDisplay.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        GlobalState globalState \u003d GlobalState.getInstance();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        globalState.setFlashcardCommandBox(commandBox);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // set listeners"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiStateListener \u003d new UiStateListener();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultStateListener \u003d new CommandResultStateListener();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiStateListener.onChange(actionOnUiStateChange);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultStateListener.onChange(actionOnCommandResultChange);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetListPanel getFlashcardSetListPanel() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSetListPanel;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @see seedu.studybananas.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            uiStateListener.updateState(commandResult.getCommandResultType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            commandResultStateListener.updateState(commandResult);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean shouldRender(CommandResult commandResult) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return commandResult instanceof FlashcardCommandResult;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 6,
      "petrickjerico": 58,
      "chuyiting": 54
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/FlashcardsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.Control;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * A ui for the flashcards that is displayed next to the list of flashcard sets."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private static final String FXML \u003d \"FlashcardsDisplay.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private TableView\u003cFlashcard\u003e flashcardsDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code FlashcardsDisplay} with the given {@code FlashcardSet}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardsDisplay(ObservableList\u003cFlashcard\u003e data) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setPlaceholder(new Label(\"No flashcard to show yet!\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setEditable(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setItems(data);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        TableColumn\u003cFlashcard, String\u003e flNumbersCol \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                makeFlashcardColumn(\"No.\", 40, p -\u003e new ReadOnlyObjectWrapper\u003c\u003e("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                        String.valueOf(flashcardsDisplay.getItems().indexOf(p.getValue()) + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        TableColumn\u003cFlashcard, String\u003e questionsCol \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                makeFlashcardColumn(\"Question\", 240, new PropertyValueFactory\u003c\u003e(\"questionString\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        TableColumn\u003cFlashcard, String\u003e answersCol \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                makeFlashcardColumn(\"Answer\", 240, new PropertyValueFactory\u003c\u003e(\"answerString\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.getColumns().addAll(Arrays.asList(flNumbersCol, questionsCol, answersCol));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setMinWidth(Double.NEGATIVE_INFINITY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Private {@code TableColumn} constructor to refactor common initialization methods."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param headerTitle the column\u0027s title"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param maxWidth the column\u0027s max width"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param propertyValueFactory {@code Callback} function defining the column\u0027s content"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return a {@code TableColumn\u003cFlashcard, String\u003e} for the FlashcardsDisplay table."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private TableColumn\u003cFlashcard, String\u003e makeFlashcardColumn("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            String headerTitle,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            double maxWidth,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            Callback\u003cTableColumn.CellDataFeatures\u003cFlashcard, String\u003e, ObservableValue\u003cString\u003e\u003e propertyValueFactory"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        TableColumn\u003cFlashcard, String\u003e column \u003d new TableColumn\u003c\u003e(headerTitle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        column.setPrefWidth(maxWidth);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // propertyValueFactory defines the Flashcard attribute filling this column"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        column.setCellValueFactory(propertyValueFactory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // Make texts wrap in a table cell of fixed dimensions. Solution adapted from:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // https://stackoverflow.com/a/22732723"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        column.setCellFactory(tc -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            TableCell\u003cFlashcard, String\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            Text text \u003d new Text();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            cell.setGraphic(text);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            cell.setPrefHeight(Control.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            text.wrappingWidthProperty().bind(column.widthProperty());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            text.textProperty().bind(cell.itemProperty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return cell;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // Fix the column\u0027s position"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        column.setReorderable(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // Disable sorting so that flashcard details are consistent with indexes."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        column.setSortable(false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // Fix the column\u0027s width"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        column.setResizable(false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return column;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "petrickjerico": 95,
      "chuyiting": 2
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.CommandHelpLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    class CommandInfo {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        private String command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        private String argument;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandInfo(String command, String argument, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.argument \u003d argument;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f12-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide for more details: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final List\u003cCommandInfo\u003e commands \u003d Arrays.asList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "           new CommandInfo(\"list task\", null, \"list all the task in the schedule\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"add task\", \"T: \u003ctitle\u003e\\nd: \u003cdescription\u003e\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"t: \u003ctime\u003e\\ndur:\u003cduration\u003e\", \"add a new task to your schedule\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"delete task\", \"\u003cindex\u003e\", \"delete your task by index\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"search task\", \"queryKey\", \"search tasks by their title\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"edit task\", \"\u003cindex\u003e\\nT: \u003ctitle\u003e\\nd: \u003cdescription\u003e\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"t: \u003ctime\u003e\\ndur:\u003cduration\u003e\", \"edit task \"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"add flset\", \"name: \u003csetname\u003e\", \"create a new flashcard set\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"delete flset\", \"\u003csetIndex\u003e\", \"delete flashcard set by index\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"add fl\", \"flset: \u003csetindex\u003e\\nq: \u003cquestion\u003e\\na: \u003canswer\u003e\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"add a flashcard to the flashcard set\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"delete fl\", \"flset: \u003csetindex\u003e\\nfl: \u003cflIndex\u003e\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"delete flashcard from a given flashcard set\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"quiz flset:\", \"\u003csetindex\u003e\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"start the quiz for given flashcard set\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"quiz score flset:\", \"\u003csetindex\u003e\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"view the quiz score for the given flashcard set in the last attempt\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"flip\", null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"view the answer for this flashcard\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"c\", null,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"mark my answer as correct\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new CommandInfo(\"w\", null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"mark my answer as wrong\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox helpWindow;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Collections.reverse(commands);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (CommandInfo commandInfo : commands) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CommandHelpLabel commandHelpLabel \u003d new CommandHelpLabel(commandInfo.command,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    commandInfo.argument, commandInfo.description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            helpWindow.getChildren().add(1, commandHelpLabel.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 51,
      "bowei-yu": 3,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.animation.ScaleTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.ResponsePopUp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.ui.quizui.QuizUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.sidebar.SideBar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.GlobalState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.Observable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.Observer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e implements Observer\u003cUiStateType\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleUi scheduleUi;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private FlashcardUi flashcardUi;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private QuizUi quizUi;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ResponsePopUp responsePopUp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private BorderPane mainWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Init the component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        responsePopUp \u003d new ResponsePopUp(primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleUi \u003d new ScheduleUi(logic, responsePopUp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardUi \u003d new FlashcardUi(logic);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        quizUi \u003d new QuizUi(logic, responsePopUp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //subscribe to UiState"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(uiState);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        mainWindow.setLeft(new SideBar(primaryStage, logic).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //default center view"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        handleStateChange(this.uiState.getUiState());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleStateChange(UiStateType state) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScaleTransition animation \u003d handleSwitchAnimation();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        GlobalState globalState \u003d GlobalState.getInstance();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case SCHEDULE:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            mainWindow.setCenter(scheduleUi.getRoot());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            animation.setNode(scheduleUi.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            globalState.focusScheduleCommandBox();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            animation.setNode(flashcardUi.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            mainWindow.setCenter(flashcardUi.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            globalState.focusFlashcardCommandBox();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            animation.setNode(quizUi.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            mainWindow.setCenter(quizUi.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            globalState.focusQuizCommandBox();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // try to resolve lag; still need some tuning"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Thread thread \u003d new Thread() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                animation.play();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        };"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        thread.start();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(UiStateType state) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        handleStateChange(state);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScaleTransition handleSwitchAnimation() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScaleTransition switchAnimation \u003d new ScaleTransition(Duration.millis(100));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switchAnimation.setFromX(0.8);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switchAnimation.setFromY(0.8);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switchAnimation.setToX(1.0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switchAnimation.setToY(1.0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return switchAnimation;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 11,
      "petrickjerico": 7,
      "chuyiting": 78,
      "bowei-yu": 5,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A ui for the result display box that is displayed below the user\u0027s command box."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    protected ResultDisplay(String fxml) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5,
      "cupofjoee": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/ScheduleUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.ResponsePopUp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.scheduleui.TaskDetailPanel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.scheduleui.UpcomingSchedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleUi extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"ScheduleUi.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane upcomingSchedulePlaceholder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane taskDetailPanelPlaceholder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ScheduleUi (Logic logic, ResponsePopUp responsePopUp) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        upcomingSchedulePlaceholder.getChildren().add(new UpcomingSchedule(logic).getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskDetailPanelPlaceholder.getChildren().add(new TaskDetailPanel(logic, responsePopUp).getRoot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "chuyiting": 23
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.constructQuizDescription;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.replaceComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.toAmPmTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.scheduleui.QuizDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonCommandResultState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String[] BACKGROUND_COLOR \u003d new String[]{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \"#ff6666\", //red"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \"#3366ff;\", //blue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \"#cc66ff\", //purple"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private HBox descriptionPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonCommandResultState commandResultState;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskCard(Task task, int displayedIndex, Logic logic) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        cardPane.setStyle(\"-fx-background-color: \" + BACKGROUND_COLOR[displayedIndex % 3]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        id.setText(String.valueOf(displayedIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        date.setText(task.getDateTime().map(time -\u003e time.getUiFormatDate()).orElse(\"\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(task.getDateTime().map(time -\u003e toAmPmTime(time.getStandardFormatTime())).orElse(\"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        duration.setText(task.getDuration().map(dur -\u003e Integer.toString(dur.duration)).orElse(\"\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set up description"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String descriptionStr \u003d task.getDescription().map(des-\u003e des.description).orElse(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        handleDescription(descriptionStr);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // observe the states"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultState \u003d SingletonCommandResultState.getInstance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleDescription(String description) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            QuizDescription descripLabel \u003d constructQuizDescription(description, logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            replaceComponent(this.description, descripLabel.getRoot(), descriptionPane);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.description.setText(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5,
      "cupofjoee": 3,
      "chuyiting": 89
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList, Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListView.setSelectionModel(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1, logic).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "cupofjoee": 3,
      "chuyiting": 18,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/study-bananas-icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 6,
      "chuyiting": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/commons/CommandHelpLabel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CommandHelpLabel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"CommandHelpLabel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private HBox labelPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label argument;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs CommandHelpLabel with command, argument and description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandHelpLabel(String command, String argument, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.command.setText(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.description.setText(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // remove argument label when argument does not exist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            labelPane.getChildren().remove(this.argument);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.argument.setText(argument);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 38
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/commons/PositiveResponse.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class PositiveResponse extends Response {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"PositiveResponse.fxml\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label response;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for the PositiveResponse."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public PositiveResponse(String response) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.response.setText(response);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.response.setMaxWidth(300);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.response.setWrapText(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 22
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/commons/Response.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public abstract class Response extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for response."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param fxmlFileName"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Response(String fxmlFileName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(fxmlFileName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        setAnimation();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    protected void setAnimation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        KeyValue transparent \u003d new KeyValue(this.getRoot().opacityProperty(), 0.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        KeyValue opaque \u003d new KeyValue(this.getRoot().opacityProperty(), 1.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        KeyFrame startFadeIn \u003d new KeyFrame(Duration.ZERO, transparent);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        KeyFrame endFadeIn \u003d new KeyFrame(Duration.millis(1000), opaque);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        KeyFrame startFadeOut \u003d new KeyFrame(Duration.millis(3000), opaque);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        KeyFrame endFadeOut \u003d new KeyFrame(Duration.millis(4000), transparent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeline.getKeyFrames().addAll(startFadeIn, endFadeIn, startFadeOut, endFadeOut);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void play() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 40
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/commons/ResponsePopUp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ResponsePopUp {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final double BOTTOM_PADDING \u003d 10.0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Popup popup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Response response;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for ResponsePopup window with the stage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ResponsePopUp(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        popup \u003d new Popup();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Make sure popup stays in the window"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        popup.setAutoFix(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Close popup on click outside"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        popup.setAutoHide(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        popup.setHideOnEscape(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Handle position."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        setPosition(stage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Open the response popup."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void open() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert response !\u003d null : \"should set the content before you open the pop up window.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.popup.show(stage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        response.play();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Hide the response popup."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.popup.hide();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Set the content of the popup window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param response"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setContent(Response response) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.popup.getContent().clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.popup.getContent().add(response.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void setPosition(Stage stage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        popup.setOnShown(new EventHandler\u003cWindowEvent\u003e() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            public void handle(WindowEvent e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                popup.setX(stage.getX() + stage.getWidth() / 2 - popup.getWidth() / 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                popup.setY(stage.getY() + stage.getHeight() - popup.getHeight() - BOTTOM_PADDING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 68
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/commons/WarningResponse.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class WarningResponse extends Response {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"WarningResponse.fxml\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label response;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for the PositiveResponse."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public WarningResponse(String response) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.response.setText(response);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.response.setMaxWidth(300);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.response.setWrapText(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chuyiting": 23
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/listeners/CommandResultStateListener.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.listeners;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonCommandResultState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CommandResultStateListener implements Observer\u003cCommandResult\u003e, Listener\u003cCommandResult, Void\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonCommandResultState commandResultState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Callback\u003cCommandResult, Void\u003e actionOnStateChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for the CommandResultStateListener."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResultStateListener() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // subscribe to CommandResultState"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultState \u003d SingletonCommandResultState.getInstance();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(commandResultState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(CommandResult state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert actionOnStateChange !\u003d null : \"need to set onChange when initialize a listener.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        actionOnStateChange.call(state);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateState(CommandResult commandResult) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultState.updateCommandResult(commandResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void onChange(Callback\u003cCommandResult, Void\u003e action) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.actionOnStateChange \u003d action;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 41
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/listeners/Listener.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.listeners;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface Listener\u003cT, R\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void onChange(Callback\u003cT, R\u003e action);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 7
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/listeners/UiStateListener.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.listeners;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class UiStateListener implements Observer\u003cUiStateType\u003e, Listener\u003cUiStateType, Void\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Callback\u003cUiStateType, Void\u003e actionOnChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for UiStateListener."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UiStateListener() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // subscribe to the uiState."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(uiState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(UiStateType state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert actionOnChange !\u003d null : \"need to set onChange when initialize a listener.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        actionOnChange.call(state);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void onChange(Callback\u003cUiStateType, Void\u003e action) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.actionOnChange \u003d action;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateState(UiStateType uiStateType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState.updateState(uiStateType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 41
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/quizui/QuizCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.ui.quizui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.ui.ResultDisplay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizCard extends ResultDisplay {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String FXML \u003d \"QuizCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static Question question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Label labelQuestion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Label instruction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public QuizCard() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public QuizCard(Quiz quiz) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setQuiz(Quiz quiz) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void setQuestion(Question q) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (q !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            question \u003d q;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            question \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void setFeedbackToUser(String userAnswer, String instruction) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(userAnswer, instruction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.labelQuestion.setText(question !\u003d null ? question.question : \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.answer.setText(userAnswer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.instruction.setText(instruction);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedFeedback \u003d parsingAnswer(feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (doesContainAnswer(splittedFeedback)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            setFeedbackToUser(splittedFeedback[0], splittedFeedback[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            setFeedbackToUser(\"\", splittedFeedback[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String[] parsingAnswer(String feedbackToUser) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedFeedback \u003d feedbackToUser.split(\"STUDYBANANAS\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return splittedFeedback;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesContainAnswer(String[] splittedFeedback) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return splittedFeedback.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 62,
      "bowei-yu": 7
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/quizui/QuizScoreCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.ui.quizui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.ui.ResultDisplay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizScoreCard extends ResultDisplay {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String FXML \u003d \"QuizScoreCard.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Label score;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizScoreCard() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.score.setText(feedbackToUser);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 21
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/quizui/QuizUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.ui.quizui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.logic.commands.commandresults.QuizCommandResultType.REFRESH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.ui.CommandBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.ui.FlashcardSetListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.PositiveResponse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.ResponsePopUp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.WarningResponse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.listeners.CommandResultStateListener;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.listeners.UiStateListener;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.GlobalState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizUi extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String FXML \u003d \"QuizUi.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Callback\u003cCommandResult, Void\u003e actionOnCommandResultChange \u003d new Callback\u003cCommandResult, Void\u003e() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public Void call(CommandResult state) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (shouldRender(state)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                QuizCommandResult quizCommandResult \u003d (QuizCommandResult) state;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                updateUi(quizCommandResult);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // empty callback"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Callback\u003cUiStateType, Void\u003e actionOnUiStateChange \u003d (uiStateType) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardSetListPanel flashcardSetListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private QuizCard resultDisplay;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private QuizScoreCard quizScoreDisplay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private UiStateListener uiStateListener;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandResultStateListener commandResultStateListener;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ResponsePopUp responsePopUp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private StackPane flashcardSetListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private StackPane statisticsPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private StackPane quizCard;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Constructs a QuizUi object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param logic provided"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizUi(Logic logic, ResponsePopUp responsePopUp) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.responsePopUp \u003d responsePopUp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardSetListPanel \u003d new FlashcardSetListPanel(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSetListPanelPlaceholder.getChildren().add(flashcardSetListPanel.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        resultDisplay \u003d new QuizCard();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        quizCard.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizScoreDisplay \u003d new QuizScoreCard(); // initiate quiz score display first"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        GlobalState globalState \u003d GlobalState.getInstance();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        globalState.setQuizCommandBox(commandBox);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // set up listeners"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiStateListener \u003d new UiStateListener();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultStateListener \u003d new CommandResultStateListener();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiStateListener.onChange(actionOnUiStateChange);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultStateListener.onChange(actionOnCommandResultChange);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetListPanel getFlashcardSetListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSetListPanel;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @see seedu.studybananas.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            uiStateListener.updateState(commandResult.getCommandResultType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            commandResultStateListener.updateState(commandResult);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizScoreDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean shouldRender(CommandResult commandResult) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return commandResult instanceof QuizCommandResult;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void updateUi(QuizCommandResult commandResult) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String feedback \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.info(\"Result: \" + feedback);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // handles the response of \"refresh command\" and \"error"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (commandResult.getCommandType()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case REFRESH:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            responsePopUp.setContent(new PositiveResponse(feedback));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            responsePopUp.open();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ERROR:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            responsePopUp.setContent(new WarningResponse(feedback));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            responsePopUp.open();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // special case for view quiz score"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d logic.getQuizRecordsToView();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (quiz !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            // replace quiz card with quiz score card"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizScoreDisplay \u003d new QuizScoreCard();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizCard.getChildren().removeAll(quizCard.getChildren());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizCard.getChildren().add(quizScoreDisplay.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            // show score"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizScoreDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            // show stacked bar chart"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            statistics \u003d new Statistics(quiz);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            statisticsPlaceholder.getChildren().removeAll(statisticsPlaceholder.getChildren());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            statisticsPlaceholder.getChildren().add(statistics.getStackedBarChart());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // re-initialise the quiz card"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizCard.getChildren().removeAll(quizCard.getChildren());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizCard.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // show quiz"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        resultDisplay.setQuiz(commandResult.getQuiz());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // remove statistics"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        statisticsPlaceholder.getChildren().removeAll(statisticsPlaceholder.getChildren());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 6,
      "bowei-yu": 95,
      "chuyiting": 76
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/quizui/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.ui.quizui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private StackedBarChart\u003cString, Number\u003e stackedBarChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Constructs a Statistics object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param quiz provided"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Statistics(Quiz quiz) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        setStatistics(this.quiz);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private void setStatistics(Quiz quiz) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (quiz \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int pointsScored \u003d quiz.getPointsScored();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int totalScore \u003d quiz.getTotalScore();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int pointsNotScored \u003d totalScore - pointsScored;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        double percentageScore \u003d quiz.getPercentageScore();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        double percentageNotScored \u003d 100 - percentageScore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        xAxis.setCategories("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                FXCollections.\u003cString\u003eobservableArrayList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        \"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis(0, 100, 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        yAxis.setLabel(\"Percentage %\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        StackedBarChart\u003cString, Number\u003e stackedBarChart \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new StackedBarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        stackedBarChart.setTitle(\"Percentage Score\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e cSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        cSeries.setName(\"Correct - \" + String.format(\"%.0f\", percentageScore) + \"%\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        cSeries.getData().add(new XYChart.Data\u003c\u003e(\"\", percentageScore));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e wSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        wSeries.setName(\"Wrong - \" + String.format(\"%.0f\", percentageNotScored) + \"%\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        wSeries.getData().add(new XYChart.Data\u003c\u003e(\"\", percentageNotScored));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        stackedBarChart.getData().add(cSeries);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        stackedBarChart.getData().add(wSeries);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.stackedBarChart \u003d stackedBarChart;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public StackedBarChart\u003cString, Number\u003e getStackedBarChart() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return stackedBarChart;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 64
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/CurrentTimePointer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.checkTimePattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CurrentTimePointer extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"CurrentTimePointer.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label currentTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private HBox currentTimePointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor of CurrentTimePointer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time must be the format of hh:mm AM/PM"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CurrentTimePointer(String time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert checkTimePattern(time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        currentTime.setText(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateTime(String time) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        currentTime.setText(time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "chuyiting": 31
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/QuizDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizErrorCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.StartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonCommandResultState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class QuizDescription extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"QuizDescription.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonCommandResultState commandResultState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Command quizStartCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for QuizDescription."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public QuizDescription(String description, Command quizStartCommand, Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert quizStartCommand instanceof StartCommand : \"You should only construct a QuizDescription Label \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                + \"if the description is start command\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.description.setText(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.quizStartCommand \u003d quizStartCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // weird bug!"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.description.setTextFill(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultState \u003d SingletonCommandResultState.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleMouseClicked() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(quizStartCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            commandResultState.updateCommandResult(commandResult);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            uiState.updateState(UiStateType.QUIZ);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            uiState.updateState(UiStateType.QUIZ);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            commandResultState.updateCommandResult(new QuizErrorCommandResult(e.getMessage()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 58
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/TaskCell.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.checkTimePattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.getMarginFromDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.toAmPmTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonClickedTaskState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskCell extends UiPart\u003cRegion\u003e implements Observer\u003cTask\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskCell.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final double MINIMUM_CELL_HEIGHT \u003d 13.0; // The height of title label."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Task taskObj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonClickedTaskState taskState;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Construct a TaskCell from a {@Code task}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskCell(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert checkTaskValidation(task) : \"task must happen today and has duration and a startTime.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskObj \u003d task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskState \u003d SingletonClickedTaskState.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Set title and startTime"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        startTime.setText(getTimeFromTask(task));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Violation of LoD, may need to improve."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Calculate the height of the cell;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        double height \u003d getTaskCellHeight();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.task.setPrefHeight(height);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //only shows the title when the duration is less than an hour."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!task.isLongerThanAnHour()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.task.getChildren().remove(startTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.task.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //subscribe to the taskStae"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskState.register(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleOnClicked() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskState.updateState(taskObj);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Method used to update the startTime."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param startTimeStr must be in the form of hh:mm AM/PM"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setStartTime(String startTimeStr) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert checkTimePattern(startTimeStr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.startTime.setText(startTimeStr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Calculate the margin top by the task for the TimeScale."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public double marginTop() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return getMarginFromDateTime(this.taskObj.getDateTime().get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Method used to update the title."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param titleStr"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void setTitle(String titleStr) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title.setText(titleStr);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean checkTaskValidation(Task task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return task.getDateTime().isPresent() \u0026\u0026 task.getDuration().isPresent() \u0026\u0026 task.happensToday();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getTimeFromTask(Task task) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDateTime dateTime \u003d task.getDateTime().get().dateTime;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter formmater \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return toAmPmTime(formmater.format(dateTime));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private double getTaskCellHeight() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        double calculatedVal \u003d calculateMinuteHappensToday() * MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return calculatedVal \u003c MINIMUM_CELL_HEIGHT ? MINIMUM_CELL_HEIGHT : calculatedVal;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private double calculateMinuteHappensToday() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return taskObj.getNumberOfMinuteHappenToday();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(Task task) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // sequence matters, as task can be null!!"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (this.taskObj.equals(task)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.task.setStyle(\"-fx-background-color: #00a3cc\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.title.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.startTime.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.task.setStyle(\"-fx-background-color:  rgba(204, 245, 255, 0.5)\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.title.setStyle(\"-fx-text-fill: #00a3cc\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.startTime.setStyle(\"-fx-text-fill: #00a3cc\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (o \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(o instanceof TaskCell)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.taskObj.equals(((TaskCell) o).taskObj);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "chuyiting": 144
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/TaskDetailPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.ScheduleCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.CommandBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.TaskListPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.PositiveResponse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.ResponsePopUp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.commons.WarningResponse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.listeners.CommandResultStateListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.listeners.UiStateListener;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.GlobalState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskDetailPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskDetailPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Callback\u003cCommandResult, Void\u003e actionOnCommandResultChange \u003d new Callback\u003cCommandResult, Void\u003e() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public Void call(CommandResult state) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (shouldRender(state)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                logger.info(\"Result: \" + state.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                responsePopUp.setContent(new PositiveResponse(state.getFeedbackToUser()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                responsePopUp.open();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // empty callback"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Callback\u003cUiStateType, Void\u003e actionOnUiStateChange \u003d (uiStateType) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ResponsePopUp responsePopUp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private TaskDetailSkin taskDetailCard;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandResultStateListener commandResultStateListener;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private UiStateListener uiStateListener;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane taskDetailCardPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for ScheduleUi."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskDetailPanel(Logic logic, ResponsePopUp responsePopUp) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.responsePopUp \u003d responsePopUp;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        TaskDetailSkin taskDetailSkin \u003d new TaskDetailSkin(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskDetailCardPlaceholder.getChildren().add(taskDetailSkin.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList(), logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        GlobalState globalState \u003d GlobalState.getInstance();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        globalState.setScheduleCommandBox(commandBox);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // set up listener"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultStateListener \u003d new CommandResultStateListener();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiStateListener \u003d new UiStateListener();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResultStateListener.onChange(actionOnCommandResultChange);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiStateListener.onChange(actionOnUiStateChange);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @see seedu.studybananas.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            uiStateListener.updateState(commandResult.getCommandResultType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            commandResultStateListener.updateState(commandResult);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            responsePopUp.setContent(new WarningResponse(e.getMessage()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            responsePopUp.open();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean shouldRender(CommandResult commandResult) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return commandResult instanceof ScheduleCommandResult;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 9,
      "chuyiting": 114
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/TaskDetailSkin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.constructQuizDescription;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.replaceComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.toAmPmTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.Observer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.util.SingletonClickedTaskState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskDetailSkin extends UiPart\u003cRegion\u003e implements Observer\u003cTask\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskDetailSkin.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonClickedTaskState taskState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Node currentDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Default constructor for TaskDetailSkin"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskDetailSkin(Logic logic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Disable horizontal scroll"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title.setText(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        description.setText(\"Click on the task on the time scale to view its detail\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        duration.setText(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        date.setText(\"Date: \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskState \u003d SingletonClickedTaskState.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // subscribe to the Task State"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(taskState);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // handle wrap text"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // set current description for future replacement"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        currentDescription \u003d description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        date.setText(task.getDateTime().map(time -\u003e time.getUiFormatDate()).orElse(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(task.getDateTime().map(time -\u003e toAmPmTime(time.getStandardFormatTime())).orElse(\"\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        duration.setText(task.getDuration().map(dur -\u003e String.valueOf(dur.duration) + \" minutes\").orElse(\"minutes\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String descriptionText \u003d task.getDescription().map(des-\u003e des.description).orElse("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \"Add description by edit command\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            QuizDescription quizDescription \u003d constructQuizDescription(descriptionText, logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            replaceComponent(currentDescription, quizDescription.getRoot(), cardPane);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            currentDescription \u003d quizDescription.getRoot();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            description.setText(descriptionText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            replaceComponent(currentDescription, description, cardPane);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            currentDescription \u003d description;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(Task state) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        setTask(state);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 99
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/TimeScale.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeScale extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TimeScale.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Solution adapted from Stack Overflow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // https://stackoverflow.com/questions/25498747/javafx-gridpane-observablelist-and-listchangelistener"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ListChangeListener\u003cTask\u003e taskListener \u003d new ListChangeListener\u003cTask\u003e() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void onChanged(Change\u003c? extends Task\u003e c) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                if (c.wasRemoved()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                    for (Task task : c.getRemoved()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        removeTaskFromTimeScale(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                if (c.wasAdded()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    for (Task task : c.getAddedSubList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        addTaskToTimeScale(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cTimeScaleCell\u003e timeScaleCells \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CurrentTimePointer currentTimePointer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane timeScale;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor of the TimeScale."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param tasks the task list that TimeScale listens to."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TimeScale(ObservableList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //ui set-up"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        setMargin();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //listener set-up"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        handleListener();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set morning"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScaleCells.add(new TimeScaleCell(\"12 AM\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 1; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.add(new TimeScaleCell(i + \" AM\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set noon"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScaleCells.add(new TimeScaleCell(\"Noon\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set afternnon"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 1; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.add(new TimeScaleCell(i + \" PM\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //repeat 12 AM"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScaleCells.add(new TimeScaleCell(\"12 AM\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //style, temporary, todo: move to fxml/css"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Add tasks to time scale."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addInitialTasksToTimeScale() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //add taskCell"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            addTaskToTimeScale(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void addTaskToTimeScale(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        TaskCell taskCell \u003d new TaskCell(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //bind the TaskCell to the Task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        task.setTaskCellBind(taskCell);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.getChildren().add(taskCell.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.setMargin(taskCell.getRoot(), new Insets(taskCell.marginTop(), 0, 0, 40));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void addTaskToTimeScale(int taskId) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        addTaskToTimeScale(tasks.get(taskId));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void removeTaskFromTimeScale(Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.getChildren().remove(task.getTaskCellBind().getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Stackpane would squeeze everything in the same place, time function is used to list the timeScaleCells."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void setMargin() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 0; i \u003c timeScaleCells.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScale.getChildren().add(timeScaleCells.get(i).getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScale.setMargin(timeScaleCells.get(i).getRoot(), new Insets(i * 40, 0, 0, 0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Places a {@Code Node} in the TimeScale with marginTop being {@Code marginTop}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param node node to place"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param marginTop marginTop of the node"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void placeItem(Node node, double marginTop) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.getChildren().add(node);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.setMargin(node, new Insets(marginTop, 0, 0, 0));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Places the {@Code CurrentTimePointer} with the initial {@Code marginTop}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param marginTop initial marginTop"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void placeCurrentTime(CurrentTimePointer currentTimePointer, double marginTop) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        placeItem(currentTimePointer.getRoot(), marginTop);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.currentTimePointer \u003d currentTimePointer;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates the position of {@CurrentTimePosition}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param newMarginTop"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateCurrentTimePosition(double newMarginTop) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.setMargin(currentTimePointer.getRoot(), new Insets(newMarginTop, 0, 0, 0));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Handles the overlap of timeScale and the currentTimePointer"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time time has to be in the format of HH:mm."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void handleOverlap(String time) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        assert time.matches(\"^([0-1][0-9]|2[0-3]):[0-5][0-9]$\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d time.split(\":\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d Integer.valueOf(splitTime[0]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int minute \u003d Integer.valueOf(splitTime[1]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // ugly implementation, should try to improve."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // a bit violate LoD."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (minute \u003c\u003d 15) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            //hour is one-based, and the timeScaleCell starts from 12AM"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            TimeScaleCell overlappedCell \u003d timeScaleCells.get(hour);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            overlappedCell.hideTime();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if (minute \u003e 15 \u0026\u0026 minute \u003c 45) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.get(hour).recoverTime();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.get(hour + 1).recoverTime();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if (minute \u003e\u003d 45) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            TimeScaleCell overlappedCell \u003d timeScaleCells.get(hour + 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            overlappedCell.hideTime();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleListener() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.addListener(taskListener);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 8,
      "cupofjoee": 3,
      "petrickjerico": 1,
      "chuyiting": 177,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/TimeScaleCell.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeScaleCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TimeScaleCell.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String timeStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    TimeScaleCell(String timeString) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(timeString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //memoize the time, for hiding purpose."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.timeStr \u003d timeString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void hideTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(\"  \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void recoverTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(timeStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 28
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/scheduleui/UpcomingSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.CURRENT_TIME_POINTER_PADDING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.getMarginFromTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.ui.util.ScheduleUiUtil.toAmPmTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class UpcomingSchedule extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"UpcomingSchedule.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox schedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CurrentTimePointer currentTimePointer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private TimeScale timeScale;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private LocalDate today;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for the UpcomingSchedulePanel, which is the left panel of the {@ScheduleUi}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UpcomingSchedule(Logic logic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        fillInner();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void fillInner() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale \u003d new TimeScale(logic.getUpcomingTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.getChildren().add(timeScale.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Fill the label for today."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        fillTopLabelForToday();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Add the currentTimePointer to the TimeScale"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String currentTime \u003d getCurrentTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        double marginTop \u003d getMarginFromTime(currentTime) - CURRENT_TIME_POINTER_PADDING;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        currentTimePointer \u003d new CurrentTimePointer(toAmPmTime(currentTime));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // The sequence matters, tasks must be on top."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.placeCurrentTime(currentTimePointer, marginTop);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.addInitialTasksToTimeScale();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.handleOverlap(currentTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Open a new thread to handle the position of the currentTimePointer"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Thread timerThread \u003d new Thread(() -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    Thread.sleep(1000 * 60); // a minute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    String newCurrentTime \u003d getCurrentTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    //update the position of the currentTimePointer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    currentTimePointer.updateTime(toAmPmTime(newCurrentTime));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    timeScale.updateCurrentTimePosition(getMarginFromTime(newCurrentTime)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            - CURRENT_TIME_POINTER_PADDING);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    timeScale.handleOverlap(newCurrentTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    // update the today label"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    fillTopLabelForToday();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timerThread.start();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void fillTopLabelForToday() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (LocalDate.now().equals(today)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Fill the label with date of \"TODAY\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        year.setText(String.valueOf(today.getYear()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        date.setText(getDateString(today));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        day.setText(getDayString(today));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getDateString(LocalDate date) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String month \u003d date.getMonth().toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String dayOfMonth \u003d String.valueOf(date.getDayOfMonth());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String dateString \u003d month + \" \" + dayOfMonth + \",\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getDayString(LocalDate date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String dayString \u003d date.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dayString.substring(0, 1) + dayString.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns time in the format of \"HH:mm\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getCurrentTime() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return TIME_FORMATTER.format(now);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "chuyiting": 126
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/sidebar/SideBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.Observable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.Observer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SideBar extends UiPart\u003cRegion\u003e implements Observer\u003cUiStateType\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"SideBar.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Image scheduleImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .getResourceAsStream(\"/images/icon_schedule.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Image flashcardsImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .getResourceAsStream(\"/images/icon_flashcards.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final Image quizImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .getResourceAsStream(\"/images/icon_quiz.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final List\u003cSideBarTab\u003e studyBananasTabs \u003d Arrays.asList("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new SideBarTab(scheduleImage, \"SCHEDULE\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new SideBarTab(flashcardsImage, \"FLASHCARDS\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new SideBarTab(quizImage, \"QUIZ\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox sideBar;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor of the SideBar, construct it with the {@primaryStage} and the Logic."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param primaryStage used by {@Code SideBarHelpMenu}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param logic used by {@Code SideBarHelpMenu}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public SideBar(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //subscribe to UiState"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(uiState);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set label"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        List\u003cNode\u003e tabs \u003d studyBananasTabs.stream().map(tab -\u003e tab.getRoot()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sideBar.getChildren().addAll(tabs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        VBox padding \u003d new VBox();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        padding.setMinHeight(330);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //temporary set the middle empty part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sideBar.getChildren().add(padding);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set sidebar help menu"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sideBar.getChildren().add(new SideBarHelpMenu(primaryStage, logic).getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(UiStateType state) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "chuyiting": 63,
      "bowei-yu": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/sidebar/SideBarHelpMenu.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.HelpWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SideBarHelpMenu extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"SideBarHelpMenu.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final HelpWindow helpWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor SideBarHelpMenu from the {@Code logic} and {@Code primaryStage}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public SideBarHelpMenu(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "chuyiting": 47
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/sidebar/SideBarTab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.Observable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.Observer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.ui.util.UiStateType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SideBarTab extends UiPart\u003cRegion\u003e implements Observer\u003cUiStateType\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"SideBarTab.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String BUTTON_FOCUSED_BACKGROUND_COLOR \u003d \"-fx-background-color: #E2B603\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Button tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ImageView tabImage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label tabText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private UiStateType tabType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for sidebar tab."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public SideBarTab(Image image, String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //subscribe to the UiState"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(uiState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tabImage.setImage(image);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tabText.setText(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case \"SCHEDULE\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.tabType \u003d UiStateType.SCHEDULE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tabText.setStyle(\"-fx-text-fill: #0066ff; \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-font-weight: bold;\"); //Schedule button is focused when the app starts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case \"FLASHCARDS\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.tabType \u003d UiStateType.FLASHCARD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"QUIZ\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            this.tabType \u003d UiStateType.QUIZ;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleTabPressed() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState.updateState(this.tabType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(UiStateType state) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (this.tabType \u003d\u003d state) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tabText.setStyle(\"-fx-text-fill: #0066ff; \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-font-weight: bold;\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tabText.setStyle(\"-fx-text-fill: #cccccc; \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-font-weight: 100;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "cupofjoee": 6,
      "chuyiting": 70,
      "bowei-yu": 3
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/GlobalState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.CommandBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class GlobalState {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static GlobalState instance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandBox scheduleCommandBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandBox flashcardCommandBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandBox quizCommandBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private GlobalState() { }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static synchronized GlobalState getInstance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            instance \u003d new GlobalState();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setScheduleCommandBox(CommandBox scheduleCommandBox) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleCommandBox \u003d scheduleCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardCommandBox(CommandBox flashcardCommandBox) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.flashcardCommandBox \u003d flashcardCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setQuizCommandBox(CommandBox quizCommandBox) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.quizCommandBox \u003d quizCommandBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void focusScheduleCommandBox() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleCommandBox.setCommandBoxToFocus();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void focusFlashcardCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardCommandBox.setCommandBoxToFocus();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void focusQuizCommandBox() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        quizCommandBox.setCommandBoxToFocus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 43
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/Observable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface Observable {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer\u003c?\u003e reader);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer\u003c?\u003e reader);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 10
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/Observer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface Observer\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void subscribe(Observable news);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void update(T state);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 6
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/ScheduleUiUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.StartCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.ui.scheduleui.QuizDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleUiUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // This part needs to synchronize with TimeScaleCell"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final double INITIAL_PADDING \u003d 9.0; //The paddingTop is set to 10, but 9 is more accurate."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final double MARGIN_PER_HOUR \u003d 40.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final double MARGIN_PER_MINUTE \u003d MARGIN_PER_HOUR / 60.0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final double CURRENT_TIME_POINTER_PADDING \u003d 5.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Method used to check if the time format is hh:mm AM/PM"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean checkTimePattern(String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d time.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitHourMinute \u003d splitTime[0].split(\":\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String hour \u003d splitHourMinute[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String minute \u003d splitHourMinute[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return splitTime[1].matches(\"(AM)|(PM)\") \u0026\u0026 hour.matches(\"(1[0-2])|[1-9]\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 minute.matches(\"(0[0-9])|([0-5][0-9])\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This method transforms \"HH:mm\" to \"hh:mm AM/PM\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static String toAmPmTime(String formattedTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d formattedTime.split(\":\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //make sure that minutes have a trailing 0."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String minute \u003d splitTime[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (hour \u003e 12) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            hour -\u003d 12;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return String.format(\"%d:%s PM\", hour, minute);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if (hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return String.format(\"%d:%s PM\", hour, minute);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if (hour \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return String.format(\"%d:%s AM\", 12, minute);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return String.format(\"%d:%s AM\", hour, minute);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This method calculates the margin from \"HH:mm\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Still need to check if it is accurate."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static double getMarginFromTime(String primitiveTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d primitiveTime.split(\":\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int minute \u003d Integer.parseInt(splitTime[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return INITIAL_PADDING + hour * MARGIN_PER_HOUR + minute * MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This method calculates the margin from \"HH:mm\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Still need to check if it is accurate."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static double getMarginFromDateTime(DateTime time) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!time.isToday()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return INITIAL_PADDING;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d time.dateTime.getHour();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int minute \u003d time.dateTime.getMinute();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return INITIAL_PADDING + hour * MARGIN_PER_HOUR + minute * MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Check if the description is {@StartCommand}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean isStartQuizDescription(String description, Logic logic) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            Command command \u003d logic.parse(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (!(command instanceof StartCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                throw new ParseException(\"Not a start command.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs quiz description from description and {@Code Logic}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the description is not valid command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IndexOutOfBoundsException if the flashcardSet index is not valid;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static QuizDescription constructQuizDescription(String description, Logic logic)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throws ParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Command command \u003d logic.parse(description.trim());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(command instanceof StartCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(\"Not a start command.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        StartCommand quizStartCommand \u003d (StartCommand) command;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        FlashcardSet flashcardSet \u003d logic.getFlashcardSetFromIndex(quizStartCommand.getQuizIndex());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String text \u003d \"Quiz: \" + flashcardSet.getFlashcardSetName();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new QuizDescription(text, quizStartCommand, logic);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces one component with another component within parent."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param beReplaced the component to be replaced."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param toReplace the component to show."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param parent the parent Node."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void replaceComponent(Node beReplaced, Node toReplace, Pane parent) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int idx \u003d parent.getChildren().indexOf(beReplaced);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        parent.getChildren().remove(idx);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        parent.getChildren().add(idx, toReplace);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 127
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/SingletonClickedFlashcardSetState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SingletonClickedFlashcardSetState implements Observable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static SingletonClickedFlashcardSetState instance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cObserver\u003e observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private FlashcardSet clickedFlashcardSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonClickedFlashcardSetState(Logic logic) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        clickedFlashcardSet \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Special constructor, updateFlashcardSetState depends on the {@Code Logic} which updates the view."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static synchronized SingletonClickedFlashcardSetState getInstance(Logic logic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            instance \u003d new SingletonClickedFlashcardSetState(logic);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer observer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer observer) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.remove(observer);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Observer observer: observers) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            observer.update(clickedFlashcardSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * update the state. (No one subscribe to this state!)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateState(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (flashcardSet.equals(this.clickedFlashcardSet)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.clickedFlashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logic.setFlashcardSetToView(flashcardSet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        inform();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 63
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/SingletonClickedTaskState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SingletonClickedTaskState implements Observable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static SingletonClickedTaskState instance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cObserver\u003e observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Task clickedTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonClickedTaskState() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        clickedTask \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static synchronized SingletonClickedTaskState getInstance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            instance \u003d new SingletonClickedTaskState();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer observer) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer observer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.remove(observer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Observer observer: observers) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            observer.update(clickedTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * update the state."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateState(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.clickedTask \u003d task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        inform();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 51
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/SingletonCommandResultState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SingletonCommandResultState implements Observable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static SingletonCommandResultState instance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cObserver\u003e observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonCommandResultState() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandResult \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static synchronized SingletonCommandResultState getInstance() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            instance \u003d new SingletonCommandResultState();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer observer) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer observer) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.remove(observer);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Observer observer: observers) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            observer.update(commandResult);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * update the state."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateCommandResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.commandResult \u003d commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        inform();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 50
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/SingletonUiState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SingletonUiState implements Observable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static SingletonUiState instance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private UiStateType uiState \u003d UiStateType.SCHEDULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cObserver\u003e observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.uiState \u003d UiStateType.SCHEDULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static synchronized SingletonUiState getInstance() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            instance \u003d new SingletonUiState();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UiStateType getUiState() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.uiState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer observer) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer observer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.remove(observer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Observer observer: observers) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            observer.update(this.uiState);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * update the unique UiState."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param state"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateState(UiStateType state) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (this.uiState !\u003d state) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.uiState \u003d state;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            inform();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 55
    }
  },
  {
    "path": "src/main/java/seedu/studybananas/ui/util/UiStateType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public enum UiStateType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    SCHEDULE, FLASHCARD, QUIZ;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 3,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/resources/view/CommandHelpLabel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox fx:id\u003d\"labelPane\" minHeight\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"command\" style\u003d\"-fx-background-color: #33cccc#33cccc; -fx-background-radius: 5; -fx-wrap-text: true;\" text\u003d\"add task\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"2.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003cFont name\u003d\"Arial Bold\" size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"argument\" maxWidth\u003d\"110.0\" style\u003d\"-fx-background-color: #9966ff#9966ff; -fx-background-radius: 5; -fx-wrap-text: true;\" text\u003d\"T: \u0026lt;title\u0026gt; \u0026#10;d: \u0026lt;description\u0026gt; \u0026#10;t: \u0026lt;startTime\u0026gt; \u0026#10;dur: \u0026lt;duration\u0026gt;\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003cFont name\u003d\"Arial Bold\" size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"2.0\" left\u003d\"3.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel text\u003d\": \"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-wrap-text: true;\" text\u003d\"create your own task and put it in your schedule\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 41,
      "bowei-yu": 2
    }
  },
  {
    "path": "src/main/resources/view/CurrentTimePointer.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox fx:id\u003d\"currentTimePointer\" prefHeight\u003d\"10.0\" prefWidth\u003d\"350.0\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets left\u003d\"5.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"currentTime\" text\u003d\"12:20 PM\" textFill\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial Bold\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cCircle fill\u003d\"RED\" radius\u003d\"5.0\" stroke\u003d\"RED\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLine endX\u003d\"200.0\" startX\u003d\"-100.0\" stroke\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Line\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 30
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    background-color: #D9EFF0; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-base: #EFE0C5;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-control-inner-background: #EFE0C5;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-padding: 10 0 10 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-opacity: 0.8;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#cellHeader {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-border-radius: 20px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#cellBody {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 20px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ".task_row {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-border-radius: 30px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/* background color */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     -fx-border-color: derive(#EFE0C5, 10%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-color: white"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".pane-without-border {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-width: 0;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: #3399ff;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: #cccccc;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-style: segments(10, 15, 15, 15)  line-cap round ;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-text-fill: #908C8C;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-border-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 50%);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EDEB58, 20%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 25%);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 50%);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/* command area style*/"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: transparent transparent #cccccc transparent;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-size: 20px;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-image:url(\u0027/images/icon_search.png\u0027);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-repeat: no-repeat;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-position: right center;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#filterField, #personListPanel, #personWebpage, #taskListPanel {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-effect: innershadow(gaussian, #EFE0C5, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#tab {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-border-width: 0px 0px 0px 0px;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#menubarItem {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#commandInput {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-width: 0;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "#flashcardsDisplay .background {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 47,
      "petrickjerico": 5,
      "chuyiting": 57,
      "-": 302
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-background: #e6f2ff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/FlashcardSetCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cStackPane fx:id\u003d\"cardPane\" minHeight\u003d\"-Infinity\" onMouseClicked\u003d\"#handleMouseClicked\" prefWidth\u003d\"150.0\" style\u003d\"-fx-focus-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox alignment\u003d\"TOP_CENTER\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-font-family: Arial;                                        -fx-font-weight: bold;                                        -fx-text-fill: #7886ed;                                        -fx-font-size: 13.0;\" text\u003d\"1.\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets bottom\u003d\"12.0\" left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-font-family: Arial;                    -fx-font-weight: bold;                    -fx-text-fill: #7886ed;                    -fx-font-size: 13.0;\" text\u003d\" very very very very vey long\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets bottom\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets top\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefWidth\u003d\"200.0\" style\u003d\"-fx-focus-traversable: false;\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#7886ed\" radius\u003d\"4.5\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"8.0\" top\u003d\"9.5\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Circle\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cImageView fx:id\u003d\"intersect\" fitHeight\u003d\"33.0\" fitWidth\u003d\"40.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cImage url\u003d\"@../images/blue-intersection.png\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cRegion prefHeight\u003d\"40.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 9,
      "chuyiting": 43
    }
  },
  {
    "path": "src/main/resources/view/FlashcardSetListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cListView fx:id\u003d\"flashcardSetListView\"  VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 7
    }
  },
  {
    "path": "src/main/resources/view/FlashcardUi.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      style\u003d\"-fx-background-color: white;\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003cVBox style\u003d\"-fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                  -fx-background-radius: 25;\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cHBox minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-without-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cVBox minWidth\u003d\"200\" prefWidth\u003d\"200\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "               \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cStackPane fx:id\u003d\"flashcardSetListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cVBox minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "               \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cStackPane fx:id\u003d\"flashcardsDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 47,
      "chuyiting": 4
    }
  },
  {
    "path": "src/main/resources/view/FlashcardsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cTableView fx:id\u003d\"flashcardsDisplay\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 11
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003cVBox fx:id\u003d\"helpWindow\" prefWidth\u003d\"650\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel text\u003d\"Available Commands: \"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Arial Bold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cRectangle arcHeight\u003d\"2.0\" arcWidth\u003d\"2.0\" fill\u003d\"#33cccc\" height\u003d\"13.0\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" width\u003d\"13.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/Rectangle\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cLabel text\u003d\"Command\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cFont name\u003d\"Arial Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cRectangle arcHeight\u003d\"2.0\" arcWidth\u003d\"2.0\" fill\u003d\"#9966ff\" height\u003d\"13.0\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" width\u003d\"13.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/Rectangle\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cLabel text\u003d\"Arguments\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cFont name\u003d\"Arial Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 37,
      "bowei-yu": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    background-color: #D9EFF0; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-base: transparent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-control-inner-background: transparent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-border-radius: 15px;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ".table-view .filler {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-background-radius: 15 15 0 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ".table-view .column-header {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-size: 30;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ".table-view .placeholder .label {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-text-fill: grey;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ".table-view .table-cell {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ".table-row-cell:filled {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-border-insets: 0 0 1 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ".table-row-cell:empty {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 10 0 10 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#cellHeader {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 20px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#cellBody {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 20px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".task_row {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 30px;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-background-color: derive(#EFE0C5, 20%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/* background color */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-color: derive(#EFE0C5, 10%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-color: white"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".pane-without-border {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-border-width: 0;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: #3399ff;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: #cccccc;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-style: segments(10, 15, 15, 15)  line-cap round ;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Helvetica Neue\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: black ;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: #908C8C;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 30%);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 50%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: Arial;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".menu-item .label {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  -fx-text-fill: black;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".menu-item:focused .label {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/*"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #EFE0C5;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: derive(#EFE0C5, 25%);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   -fx-background-color: transparent;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   -fx-background-color: transparent;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/* command area style*/"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: transparent transparent #cccccc transparent;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-size: 20px;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-image:url(\u0027/images/icon_search.png\u0027);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-repeat: no-repeat;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-position: right center;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#filterField, #personListPanel, #personWebpage, #taskListPanel {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-effect: innershadow(gaussian, #EFE0C5, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#tab {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-width: 0px 0px 0px 0px;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#menubarItem {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#commandInput {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      -fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     -fx-width: 0;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ".default-color0.chart-bar {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    -fx-bar-fill: #32CD32;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ".default-color1.chart-bar {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    -fx-bar-fill: #F08080;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 8,
      "petrickjerico": 35,
      "chuyiting": 388,
      "bowei-yu": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cfx:root"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        minHeight\u003d\"603\" minWidth\u003d\"1000\" title\u003d\"Study Bananas\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cImage url\u003d\"@/images/study-bananas-icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cBorderPane fx:id\u003d\"mainWindow\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/PositiveResponse.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox fx:id\u003d\"responseContainer\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #e6ffe6#e6ffe6; -fx-border-radius: 5; -fx-background-radius: 5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cImage url\u003d\"@../images/correct-notice-icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"response\" text\u003d\"Your Task has been saved successfully \" textFill\u003d\"#009900\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Bangla MN\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 30
    }
  },
  {
    "path": "src/main/resources/view/QuizCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cVBox fx:id\u003d\"quizCard\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      style\u003d\"-fx-background-radius: 20px; -fx-border-radius: 20px;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003cScrollPane hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"105.0\" prefWidth\u003d\"375.0\" hmax\u003d\"0.4\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                  style\u003d\"-fx-background-radius: 20 20 0 0; -fx-background-color: #AFEEEE; -fx-padding: 0 0 0 20;\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003cLabel fx:id\u003d\"labelQuestion\" centerShape\u003d\"false\" minWidth\u003d\"337.0\" minHeight\u003d\"100.0\" prefWidth\u003d\"337.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                   style\u003d\"-fx-background-color: #AFEEEE;\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                   text\u003d\"Question - This is where the question will be shown\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                  \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                  \u003cInsets/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003cScrollPane hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"375.0\" hmax\u003d\"0.4\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                  style\u003d\"-fx-background-color: #FFFFE0; -fx-border-width: 1px\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003cLabel fx:id\u003d\"answer\" minHeight\u003d\"190.0\" minWidth\u003d\"358.0\" prefWidth\u003d\"358.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                   style\u003d\"-fx-label-padding: 0 0 0 20; -fx-background-color: #FFFFE0;\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                   text\u003d\"Answer - This is where the correct answer is shown (with or without your answer,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                   depending on the command given)\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                  \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003cLabel fx:id\u003d\"instruction\" prefHeight\u003d\"105.0\" prefWidth\u003d\"375.0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "             style\u003d\"-fx-background-radius: 0 0 20 20; -fx-label-padding: 0 0 0 20;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "             -fx-background-color: #DDA0DD;\" text\u003d\"Instruction - This is where the next quiz commands are shown\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 46,
      "bowei-yu": 8
    }
  },
  {
    "path": "src/main/resources/view/QuizDescription.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cLabel fx:id\u003d\"description\" minHeight\u003d\"-Infinity\" onMouseClicked\u003d\"#handleMouseClicked\" style\u003d\"-fx-background-color: #33cccc#33cccc; -fx-background-radius: 5; -fx-wrap-text: true;\" text\u003d\"Label\" textFill\u003d\"#ffffff00\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cfont\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cFont name\u003d\"Arial Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/font\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets bottom\u003d\"2.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/resources/view/QuizScoreCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cVBox fx:id\u003d\"quizCard\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      style\u003d\"-fx-background-radius: 20 20 20 20; -fx-border-radius: 20;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \u003cScrollPane hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"400.0\" prefWidth\u003d\"375.0\" hmax\u003d\"0.4\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                style\u003d\"-fx-background-color: #DADD6E;\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003cLabel fx:id\u003d\"score\" minHeight\u003d\"400.0\" minWidth\u003d\"357.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                   style\u003d\"-fx-label-padding: 0 0 0 5; -fx-background-color: #FFFFE0;\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                   text\u003d\"Score\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 28
    }
  },
  {
    "path": "src/main/resources/view/QuizUi.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"630\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"630\" style\u003d\"-fx-background-color: #e6f2ff; -fx-background-radius: 25;\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003cInsets bottom\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003cHBox prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u003cStackPane fx:id\u003d\"flashcardSetListPanelPlaceholder\" style\u003d\"-fx-padding: 0 30 0 0;\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u003cStackPane fx:id\u003d\"quizCard\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "             \u003cVBox prefWidth\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                 \u003cStackPane fx:id\u003d\"statisticsPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "             \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 11,
      "bowei-yu": 28
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ScheduleUi.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "       xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cStackPane fx:id\u003d\"upcomingSchedulePlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cStackPane fx:id\u003d\"taskDetailPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 13
    }
  },
  {
    "path": "src/main/resources/view/SideBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox fx:id\u003d\"sideBar\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      prefHeight\u003d\"600.0\" prefWidth\u003d\"205.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cHBox fx:id\u003d\"SideBarHeader\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"14.0\" fitWidth\u003d\"14.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cImage url\u003d\"@/images/icon_horizonlines.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cInsets left\u003d\"12.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cVBox fx:id\u003d\"logoAndProductName\" prefHeight\u003d\"200.0\" prefWidth\u003d\"120.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cImageView fx:id\u003d\"logo\" fitHeight\u003d\"61.0\" fitWidth\u003d\"65.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cimage\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cImage url\u003d\"@/images/study-bananas-icon.png\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/image\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cInsets left\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cLabel id\u003d\"StudyBananas\" fx:id\u003d\"productName\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"StudyBananas\" textAlignment\u003d\"CENTER\" textFill\u003d\"#908c8c\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" top\u003d\"-5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cInsets left\u003d\"17.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 58
    }
  },
  {
    "path": "src/main/resources/view/SideBarHelpMenu.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"exitItem\" onMouseClicked\u003d\"#handleExit\" text\u003d\"Exit\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"helpItem\" onMouseClicked\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 23
    }
  },
  {
    "path": "src/main/resources/view/SideBarTab.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cButton fx:id\u003d\"tab\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleTabPressed\" prefHeight\u003d\"50.0\" prefWidth\u003d\"205.0\" style\u003d\"-fx-background-color: transparent; -fx-border-width: 0px 0px 0px 0px; -fx-border-color: transparent; -fx-focus-color: transparent; -fx-faint-focus-color: transparent;\" textFill\u003d\"#908c8c\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cFont name\u003d\"Arial\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cgraphic\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cImageView fx:id\u003d\"tabImage\" fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"tabText\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Arial\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/graphic\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/Button\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 33
    }
  },
  {
    "path": "src/main/resources/view/TaskCell.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox fx:id\u003d\"task\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" onMouseClicked\u003d\"#handleOnClicked\" prefHeight\u003d\"40.0\" prefWidth\u003d\"315.0\" style\u003d\"-fx-border-color: #00a3cc; -fx-border-width: 0 0 0 3; -fx-background-color: rgba(204, 245, 255, 0.5) rgba(204, 245, 255, 0.7);\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"startTime\" prefWidth\u003d\"315.0\" text\u003d\"10:30 AM\" textFill\u003d\"#00a3cc\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" prefWidth\u003d\"315.0\" text\u003d\"CS2103\" textFill\u003d\"#00a3cc\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 27
    }
  },
  {
    "path": "src/main/resources/view/TaskDetailPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cVBox style\u003d\"-fx-background-color: #e6f2ff; -fx-background-radius: 25;\" prefHeight\u003d\"600\" styleClass\u003d\"scheduleUiPanel\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cStackPane fx:id\u003d\"taskDetailCardPlaceholder\" minHeight\u003d\"100\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefHeight\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 28
    }
  },
  {
    "path": "src/main/resources/view/TaskDetailSkin.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" maxHeight\u003d\"150.0\" minHeight\u003d\"130.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"370.0\" style\u003d\"-fx-fit-to-width: true;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox fx:id\u003d\"cardPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"150.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"350.0\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" text\u003d\"CS2103T\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial Bold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" maxWidth\u003d\"350\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"200\" text\u003d\"Add some description for this task by edit command\" textFill\u003d\"#999999\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Gurmukhi MN\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" text\u003d\"Add date by edit command.\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Gurmukhi MN\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" text\u003d\"\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Gurmukhi MN\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel text\u003d\"Duration:\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Gurmukhi MN\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"duration\" text\u003d\"\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Gurmukhi MN\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLine endX\u003d\"220.0\" startX\u003d\"-100.0\" stroke\u003d\"#999999\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 75
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" styleClass\u003d\"task_row\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"20.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" maxWidth\u003d\"280.0\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-font-family: Arial; -fx-font-weight: bold; -fx-font-size: 20px; -fx-wrap-text: true;\" text\u003d\"First\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cRegion prefHeight\u003d\"27.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" minWidth\u003d\"25.0\" prefHeight\u003d\"20.0\" style\u003d\"-fx-background-color: white; -fx-background-radius: 8; -fx-text-fill: black; -fx-font-family: Arial; -fx-font-weight: bold; -fx-font-size: 20px; -fx-alignment: center; -fx-wrap-text: true;\" styleClass\u003d\"cellHeader\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"-5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox fx:id\u003d\"descriptionPane\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cLabel minWidth\u003d\"-Infinity\" style\u003d\"-fx-wrap-text: true;\" text\u003d\"Description:\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" maxWidth\u003d\"200.0\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"180.0\" styleClass\u003d\"cellBody\" text\u003d\"\\$description\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cLabel text\u003d\"Start Time:\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cellBody\" text\u003d\"date\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cLabel fx:id\u003d\"time\" text\u003d\"time\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cLabel text\u003d\"Duration:\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cLabel fx:id\u003d\"duration\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 8,
      "chuyiting": 76
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\"  VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/TimeScale.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cScrollPane fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        prefHeight\u003d\"480\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: white;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                                    -fx-border-width: 0;\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cStackPane fx:id\u003d\"timeScale\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                 style\u003d\"-fx-background-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        -fx-border-width: 0;\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                 alignment\u003d\"TOP_LEFT\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 17
    }
  },
  {
    "path": "src/main/resources/view/TimeScaleCell.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cLabel prefHeight\u003d\"40.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cgraphic\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" text\u003d\"12 AM\" textFill\u003d\"#cdcdcd\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLine endX\u003d\"230.0\" startX\u003d\"-90.0\" stroke\u003d\"#0000001c\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Line\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/graphic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 32
    }
  },
  {
    "path": "src/main/resources/view/UpcomingSchedule.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox fx:id\u003d\"schedule\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" text\u003d\"October, 20\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Arial Bold\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"year\" text\u003d\"2020\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Arial\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"day\" style\u003d\"-fx-font-weight: 100;\" text\u003d\"Thursday\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLine endX\u003d\"270.0\" startX\u003d\"-100.0\" stroke\u003d\"#0000001c\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel text\u003d\"all-day\" textFill\u003d\"#cdcdcd\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"20.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLine endX\u003d\"270.0\" startX\u003d\"-100.0\" stroke\u003d\"#00000031\" strokeWidth\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 48
    }
  },
  {
    "path": "src/main/resources/view/WarningResponse.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox fx:id\u003d\"responseContainer\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #ffe6e6; -fx-background-radius: 5; -fx-border-radius: 5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cImage url\u003d\"@../images/warning-response-icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"response\" text\u003d\"Error the format for the date should be...\" textFill\u003d\"#990000\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Bangla MN\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 28
    }
  },
  {
    "path": "src/test/data/JsonFlashcardBankStorageTest/invalidAndValidFlashcard.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"flashcardSets\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"name\" : \"CS2040S\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"flashcards\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"Time complexity of binary search?\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"O(logn)\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"What are conditions for binary search?\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"It has to be sorted array\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    } ] },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"name\" : \"CS2100\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"flashcards\" : [ {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \" \","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"It occurs when the block is brought first time into the cache.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 18
    }
  },
  {
    "path": "src/test/data/JsonFlashcardBankStorageTest/invalidAndValidFlashcardSet.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"flashcardSets\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"name\" : \"CS2040S\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"flashcards\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"Time complexity of binary search?\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"O(logn)\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"What are conditions for binary search?\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"It has to be sorted array\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    } ] },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"name\" : \" \","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"flashcards\" : [ {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"In what circumstances is there a compulsory miss?\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"It occurs when the block is brought first time into the cache.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 18
    }
  },
  {
    "path": "src/test/data/JsonFlashcardBankStorageTest/invalidFlashcard.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"flashcardSets\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"name\" : \" \","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"flashcards\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"Time complexity of binary search?\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"O(logn)\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"What are conditions for binary search?\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \" \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 12
    }
  },
  {
    "path": "src/test/data/JsonFlashcardBankStorageTest/invalidFlashcardSet.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"flashcardSets\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"name\" : \" \","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"flashcards\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"Time complexity of binary search?\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"O(logn)\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"question\" : \"What are conditions for binary search?\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"answer\" : \"It has to be sorted array\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 12
    }
  },
  {
    "path": "src/test/data/JsonQuizRecordsStorageTest/invalidAndValidQuizRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"quizzes\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"CS2040\" : {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"totalScore\" : 2,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"pointsScored\" : 2,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"scoreboard\" : [ true, true ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"userAnswers\" : [],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flset\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"name\" : \"CS2040\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"flashcards\" : [ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Time complexity of binary search?\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"O(logn)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"What are conditions for binary search?\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"It has to be a sorted array\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"Physics\" : {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"totalScore\" : 2,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"pointsScored\" : 1,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"scoreboard\" : [ true, false ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"userAnswers\" : [ \"F \u003d ma\", \"hmm i forgot\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flset\" : {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"name\" : \"Physics\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"flashcards\" : [ {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Formula to show Newton\u0027s Second Law of Motion\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"F \u003d ma [where m \u003d mass (in kg) and a \u003d acceleration (in ms^-2)]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Formula for GPE\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"GPE \u003d mgh [where m \u003d mass (in kg), g \u003d 9.81ms^-2 and h \u003d height (in m)]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 36
    }
  },
  {
    "path": "src/test/data/JsonQuizRecordsStorageTest/invalidQuizRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"quizzes\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"CS2040\" : {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"totalScore\" : 2,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"pointsScored\" : 2,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"scoreboard\" : [ true, true ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"userAnswers\" : [],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flset\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"name\" : \"CS2040\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"flashcards\" : [ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Time complexity of binary search?\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"O(logn)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"What are conditions for binary search?\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"It has to be a sorted array\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"Physics\" : {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"totalScore\" : 2,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"pointsScored\" : 1,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"scoreboard\" : [ true, false ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"userAnswers\" : [ \"F \u003d ma\", \"hmm i forgot\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flset\" : {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"name\" : \"Physics\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"flashcards\" : [ {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Formula to show Newton\u0027s Second Law of Motion\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"F \u003d ma [where m \u003d mass (in kg) and a \u003d acceleration (in ms^-2)]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Formula for GPE\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"GPE \u003d mgh [where m \u003d mass (in kg), g \u003d 9.81ms^-2 and h \u003d height (in m)]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 36
    }
  },
  {
    "path": "src/test/data/JsonQuizRecordsStorageTest/notJsonFormatQuizRecords.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 1
    }
  },
  {
    "path": "src/test/data/JsonScheduleStorageTest/invalidAndValidTaskSchedule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"title\" : \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"description\" : \" \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"dateTime\" : \"2020-09-27 12:00\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"title\": \"CS2103T\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"description\": \"Week 8 Quiz\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"dateTime\": \"2020-09-27 12:00\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 14
    }
  },
  {
    "path": "src/test/data/JsonScheduleStorageTest/invalidTaskSchedule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"title\" : \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"description\" : \" \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"dateTime\" : \"2020-09-27 12:00\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 9
    }
  },
  {
    "path": "src/test/data/JsonScheduleStorageTest/notJsonFormatSchedule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableFlashcardBankTest/duplicateFlashcardSets.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"flashcardSets\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"name\" : \"CS2040S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    \"flashcards\" : ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"question\" : \"Time complexity of binary search?\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"answer\" : \"O(logn)\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"question\" : \"What are conditions for binary search?\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        \"answer\" : \"It has to be sorted array\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"name\": \"CS2040S\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flashcards\": ["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\": \"In what circumstances is there a compulsory miss?\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\": \"It occurs when the block is brought first time into the cache.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 24
    }
  },
  {
    "path": "src/test/data/JsonSerializableFlashcardBankTest/typicalFlashcardSets.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  \"flashcardSets\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"name\": \"Physics\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flashcards\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\": \"Newton\u0027s Second Law\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\": \"The rate of change of momentum of a body is directly proportional to the resultant force acting on it and occurs in the direction of the force\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\": \"Hooke\u0027s Law\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\": \"The change in length x of the material is directly proportional to the resultant force applied to it provided that the limit of proportionality is not exceeded\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\": \"Decay constant\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\": \"Probability of a radioactive nucleus decaying per unit time\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"name\": \"Economics\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flashcards\": ["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\": \"Define the idea of opportunity cost\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\": \"Benefits or value of the next best alternative forgone\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\": \"What are negative externalities?\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\": \"Harmful side effects of production or consumption on persons other than the producers or consumers themselves. The third parties are not compensated for the external costs.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\": \"Explain how interest rate increasing leads to a decrease in aggregate demand (AD).\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\": \"increase i/r -\u003e increased cost of borrowing -\u003e decrease in Consumption and Investments -\u003e decrease in AD\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"name\" : \"Icebreaker jokes\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      \"flashcards\" : ["
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Why did the chicken cross the road?\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"To get to the other side\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Why did the late dude sit on his watch?\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"He wanted to be on time\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        },"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"question\" : \"Define procrastination\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "          \"answer\" : \"I\u0027ll do it later\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 55
    }
  },
  {
    "path": "src/test/data/JsonSerializableScheduleTest/duplicateTaskSchedule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"title\": \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"description\": \"Week 8 Quiz\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"dateTime\": \"2020-09-27 12:00\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"title\" : \"CS2103T\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"description\" : \"Week 8 Quiz\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \"dateTime\" : \"2020-09-27 12:00\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableScheduleTest/invalidTaskSchedule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"title\": \"\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"description\": \"Abcd\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"dateTime\": \"2020/10/31 23:00\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableScheduleTest/typicalTasksSchedule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  \"_comment\": \"StudyBananas save file which contains the same Task values as in TypicalTasks#getTypicalSchedule()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"title\" : \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"description\" : \"Week 8 Quiz\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"dateTime\" : \"2020-09-27 12:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"duration\" : 30"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"title\" : \"CS2100\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"description\" : \"Pipeline homework\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"dateTime\" : \"2020-10-04 10:00\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"duration\" : 40"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"title\" : \"ST2334\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"description\" : \"Chapter 2 Quiz\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"dateTime\" : \"2020-10-01 23:00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"duration\" : 50"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"title\" : \"CS2100\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"dateTime\" : \"2020-11-30 13:00\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"duration\" : 60"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"title\" : \"CS2101\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \"description\" : \"Luminus Feedback\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"dateTime\" : null,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \"duration\" : 60"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 19,
      "chuyiting": 10
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  \"scheduleFilePath\" : \"schedule.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  \"flashcardBankFilePath\" : \"flashcardbank.json\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  \"quizRecordsFilePath\" : \"quizrecords.json\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  \"scheduleFilePath\" : \"schedule.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  \"flashcardBankFilePath\" : \"flashcardbank.json\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  \"quizRecordsFilePath\" : \"quizrecords.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config expected \u003d getTypicalConfigWithRelativePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config expected \u003d getTypicalConfigWithRelativePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Config getTypicalConfigWithAbsolutePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\").toAbsolutePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Config getTypicalConfigWithRelativePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config original \u003d getTypicalConfigWithAbsolutePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config readBack \u003d (ConfigUtil.readConfig(configFilePath).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 12,
      "cupofjoee": 4,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.NAME_DESC_PHYSICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_FLSET_NAME_PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DATETIME_DESC_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DESCRIPTION_DESC_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DURATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.TITLE_DESC_CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DATETIME_CS2103T;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DESCRIPTION_CS2103T;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DURATION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.AddFlashcardSetCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.StartCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleAddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.StorageManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.JsonFlashcardBankStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.quizstorage.JsonQuizRecordsStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.schedulestorage.JsonScheduleStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonScheduleStorage scheduleStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new JsonScheduleStorage(temporaryFolder.resolve(\"schedule.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        JsonFlashcardBankStorage flashcardBankStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new JsonFlashcardBankStorage(temporaryFolder.resolve(\"flashcardbank.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonQuizRecordsStorage quizRecordsStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new JsonQuizRecordsStorage(temporaryFolder.resolve(\"quizrecords.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(scheduleStorage, flashcardBankStorage,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                quizRecordsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void parse_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e logic.parse(invalidCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_scheduleCommandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String deleteTaskCommand \u003d \"delete task 15\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandException(deleteTaskCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_flashcardCommandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String addFlashcardCommand \u003d \"add fl flset:9 q:konnichiwa a:hello\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandException(addFlashcardCommand, MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_quizCommandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String quizCommand \u003d \"quiz flset:5\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandException(quizCommand, StartCommand.MESSAGE_FLASHCARD_SET_NONEXISTENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_validScheduleCommand_success() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String listTaskCommand \u003d ScheduleListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(listTaskCommand, ScheduleListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_quizCommandExecution_success() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StartCommand startQuizCommand \u003d new StartCommand(1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandObjectException(startQuizCommand, StartCommand.MESSAGE_FLASHCARD_SET_NONEXISTENT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getFilteredFlashcardSetList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashcardSetList().remove(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getFlashcardSetToView_modifyList_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e logic.getFlashcardSetToView().remove(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getQuizRecordsToView_equalsNull() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(null, logic.getQuizRecordsToView());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getFlashcardBank_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                logic.getFlashcardBank().getFlashcardSetList().remove(0));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getSchedule_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                logic.getSchedule().getTaskList().remove(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getUpcomingTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getUpcomingTaskList().remove(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Setup LogicManager with JsonScheduleStorageIoExceptionThrowingStub,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // JsonFlashcardBankStorageIoExceptionThrowingStub and"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // JsonQuizRecordsStorageIoExceptionThrowingStub"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonScheduleStorage scheduleStorage \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new JsonScheduleStorageIoExceptionThrowingStub("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionSchedule.json\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonFlashcardBankStorage flashcardBankStorage \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new JsonFlashcardBankStorageIoExceptionThrowingStub("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionFlashcardBank.json\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonQuizRecordsStorage quizRecordsStorage \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new JsonQuizRecordsStorageIoExceptionThrowingStub("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionQuizRecords.json\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StorageManager storage \u003d new StorageManager(scheduleStorage, flashcardBankStorage,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                quizRecordsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Execute add task command"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String addTaskCommand \u003d ScheduleAddCommand.COMMAND_WORD + TITLE_DESC_CS2103T"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DESCRIPTION_DESC_CS2103T + DATETIME_DESC_CS2103T"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DURATION;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CS2103T)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime(VALID_DATETIME_CS2103T)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDuration(VALID_DURATION)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(addTaskCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Execute add flashcard set command"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String addFlashcardSetCommand \u003d AddFlashcardSetCommand.COMMAND_WORD + NAME_DESC_PHYSICS;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        FlashcardSet expectedFlashcardSet \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withFlashcardSetName(VALID_FLSET_NAME_PHYSICS).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.addFlashcardSet(expectedFlashcardSet);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(addFlashcardSetCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @see #assertCommandObjectFailure(Command, Class, String, Model)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void assertCommandObjectException(Command inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandObjectFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @see #assertCommandObjectFailure(Command, Class, String, Model)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void assertCommandObjectFailure(Command inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandObjectFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void assertCommandObjectFailure(Command inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method of flashcardBank is called."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static class JsonFlashcardBankStorageIoExceptionThrowingStub extends JsonFlashcardBankStorage {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        private JsonFlashcardBankStorageIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method of schedule is called."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static class JsonScheduleStorageIoExceptionThrowingStub extends JsonScheduleStorage {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        private JsonScheduleStorageIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method of quizRecords is called."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static class JsonQuizRecordsStorageIoExceptionThrowingStub extends JsonQuizRecordsStorage {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        private JsonQuizRecordsStorageIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        public void saveQuizRecords(ReadOnlyQuizRecords quizRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 213,
      "cupofjoee": 22,
      "chuyiting": 3,
      "bowei-yu": 3,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/commandresults/FlashcardCommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardCommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult commandResult \u003d new FlashcardCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(new FlashcardCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(new FlashcardCommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new FlashcardCommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new FlashcardCommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new FlashcardCommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult commandResult \u003d new FlashcardCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(commandResult.hashCode(), new FlashcardCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new FlashcardCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new FlashcardCommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new FlashcardCommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 54
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/commandresults/QuizCommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class QuizCommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult commandResult \u003d new QuizCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(new QuizCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(new QuizCommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new QuizCommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new QuizCommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new QuizCommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult commandResult \u003d new QuizCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(commandResult.hashCode(), new QuizCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new QuizCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new QuizCommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new QuizCommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 13,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/commandresults/ScheduleCommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.studybananas.logic.commands.commandresults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleCommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult commandResult \u003d new ScheduleCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(new ScheduleCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(new ScheduleCommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new ScheduleCommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new ScheduleCommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(commandResult.equals(new ScheduleCommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult commandResult \u003d new ScheduleCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(commandResult.hashCode(), new ScheduleCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new ScheduleCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new ScheduleCommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new ScheduleCommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 54
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/commandtestutils/FlashcardBankCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.commandtestutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_FLASHCARDSET_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.FlashcardCommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardBankCommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_FLSET_NAME_PHYSICS \u003d \"Physics\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_FLSET_NAME_ECONOMICS \u003d \"Economics\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_QUESTION_SECOND_LAW \u003d \"Newton\u0027s Second Law\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_QUESTION_OPPORTUNITY_COST \u003d \"Explain the idea of an opportunity cost.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_QUESTION \u003d \"Graph regex should not contain non-roman characters: 漢字\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_ANSWER_SECOND_LAW \u003d \"The rate of change of momentum of a body \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"is directly proportional to the resultant force acting on it\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \" and occurs in the direction of the force\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_ANSWER_OPPORTUNITY_COST \u003d \"Benefits or value of the next best alternative forgone\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_ANSWER \u003d \"Graph regex should not contain non-roman characters: 漢字\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String NAME_DESC_PHYSICS \u003d \" \" + PREFIX_FLASHCARDSET_NAME + VALID_FLSET_NAME_PHYSICS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String NAME_DESC_ECONOMICS \u003d \" \" + PREFIX_FLASHCARDSET_NAME + VALID_FLSET_NAME_ECONOMICS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String NAME_DESC_PHYSICS_EXTRA_WHITESPACE \u003d String.format(\" %s  %s\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            PREFIX_FLASHCARDSET_NAME, VALID_FLSET_NAME_PHYSICS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String QUESTION_DESC_SECOND_LAW \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_SECOND_LAW;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String QUESTION_DESC_OPPORTUNITY_COST \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + INVALID_QUESTION;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String ANSWER_DESC_SECOND_LAW \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_SECOND_LAW;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String ANSWER_DESC_OPPORTUNITY_COST \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + INVALID_ANSWER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String FLSET_INDEX_DESC_ONE \u003d \" \" + PREFIX_FLASHCARDSET + \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String FLSET_INDEX_DESC_TWO \u003d \" \" + PREFIX_FLASHCARDSET + \"2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String FL_INDEX_DESC_ONE \u003d \" \" + PREFIX_FLASHCARD + \"1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FLSET_INDEX_NEGATIVE \u003d \" \" + PREFIX_FLASHCARDSET + \"-1\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FLSET_INDEX_NON_INTEGER \u003d \" \" + PREFIX_FLASHCARDSET + \"A\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FL_INDEX_NEGATIVE \u003d \" \" + PREFIX_FLASHCARD + \"-1\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FL_INDEX_NON_INTEGER \u003d \" \" + PREFIX_FLASHCARD + \"A\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_INDEX_ERROR_MESSAGE \u003d \"Invalid index, please provide valid index.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cFlashcardModel\u003e command, FlashcardModel actualModel,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            CommandResult expectedCommandResult, FlashcardModel expectedModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, FlashcardModel, CommandResult, FlashcardModel)}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cFlashcardModel\u003e command, FlashcardModel actualModel,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            FlashcardModel expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new FlashcardCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the flashcard bank, filtered flashcard set list and selected flashcard set \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandFailure(Command\u003cFlashcardModel\u003e command, FlashcardModel actualModel,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank expectedFlashcardBank \u003d new FlashcardBank(actualModel.getFlashcardBank());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        List\u003cFlashcardSet\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardSetList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedFlashcardBank, actualModel.getFlashcardBank());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardSetList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 29,
      "petrickjerico": 2,
      "bowei-yu": 69,
      "chuyiting": 3
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/commandtestutils/QuizRecordsCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.commandtestutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.QuizCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizRecordsCommandTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cQuizModel\u003e command, QuizModel actualModel,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            CommandResult expectedCommandResult, QuizModel expectedModel) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, QuizModel, CommandResult, QuizModel)}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cQuizModel\u003e command, QuizModel actualModel,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            QuizModel expectedModel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandResult expectedCommandResult \u003d new QuizCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cFlashcardQuizModel\u003e command, FlashcardQuizModel actualModel,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            CommandResult expectedCommandResult, FlashcardQuizModel expectedModel) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@link #assertCommandSuccess(Command, FlashcardQuizModel, CommandResult, FlashcardQuizModel)}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cFlashcardQuizModel\u003e command, FlashcardQuizModel actualModel,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            FlashcardQuizModel expectedModel) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandResult expectedCommandResult \u003d new QuizCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the quiz records and selected quiz \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandFailure(Command\u003cQuizModel\u003e command, QuizModel actualModel,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords expectedQuizRecords \u003d new QuizRecords(actualModel.getAllQuizRecords());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedQuizRecords, actualModel.getAllQuizRecords());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 87
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/commandtestutils/ScheduleCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.commandtestutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.ScheduleCommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleCommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_TITLE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_TITLE_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2103T \u003d \"Tutorial homework.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2101 \u003d \"Oral presentation1.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DATETIME_CS2103T \u003d \"2020-09-25 11:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DATETIME_CS2101 \u003d \"2020-10-25 10:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String VALID_DURATION \u003d \"60\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String TITLE_DESC_CS2103T \u003d \" \" + PREFIX_TITLE + VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String TITLE_DESC_CS2101 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_CS2101;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2103T \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2103T;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2101 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DATETIME_DESC_CS2103T \u003d \" \" + PREFIX_TIME + VALID_DATETIME_CS2103T;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DATETIME_DESC_CS2101 \u003d \" \" + PREFIX_TIME + VALID_DATETIME_CS2101;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DURATION \u003d \" \" + PREFIX_DURATION + VALID_DURATION;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_TIME + \"JANUARY\"; // wrong date time format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String INVALID_DURATION \u003d \" \" + PREFIX_DURATION + \"-60\"; // duration should be a positive number"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t \\r \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cScheduleModel\u003e command, ScheduleModel actualModel,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            CommandResult expectedCommandResult, ScheduleModel expectedModel) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ScheduleModel, CommandResult, ScheduleModel)}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cScheduleModel\u003e command, ScheduleModel actualModel,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            ScheduleModel expectedModel) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new ScheduleCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the schedule, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandFailure(Command\u003cScheduleModel\u003e command, ScheduleModel actualModel,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule expectedSchedule \u003d new Schedule(actualModel.getSchedule());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(expectedSchedule, actualModel.getSchedule());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code model}\u0027s schedule."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void showTaskAtIndex(ScheduleModel model, Index targetIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final String[] splitName \u003d task.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        model.updateFilteredTaskList(new InfoContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 6,
      "cupofjoee": 15,
      "chuyiting": 84
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/flashcardcommands/AddFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFlashcardCommand(null, INDEX_FIRST));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccess() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommandTest.ModelStubAcceptingFlashcardAdded modelStub \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardCommandTest.ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandResult result \u003d new AddFlashcardCommand(validFlashcard, INDEX_FIRST).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(String.format(AddFlashcardCommand.MESSAGE_SUCCESS, validFlashcard), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(validFlashcard, modelStub.flashcardBank.getFlashcardSetList()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .getFlashcard(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addCommand \u003d new AddFlashcardCommand(validFlashcard, INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommandTest.ModelStubWithFlashcard modelStub \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardCommandTest.ModelStubWithFlashcard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, AddFlashcardCommand.MESSAGE_DUPLICATE_FLASHCARD, ("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexFlset_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addCommand \u003d new AddFlashcardCommand(validFlashcard, INDEX_SECOND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommandTest.ModelStubWithFlashcard modelStub \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardCommandTest.ModelStubWithFlashcard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX, ("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard google \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard blueOcean \u003d new FlashcardBuilder().withQuestion(\"Why is the ocean blue\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withAnswer(\"The ocean is blue because water absorbs colors \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        + \"in the red part of the light spectrum.\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addGoogle \u003d new AddFlashcardCommand(google, INDEX_FIRST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addBlueOcean \u003d new AddFlashcardCommand(blueOcean, INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addGoogle.equals(addGoogle));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addGoogleCommandCopy \u003d new AddFlashcardCommand(google, INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addGoogle.equals(addGoogleCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addGoogle.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addGoogle.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcards -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addGoogle.equals(addBlueOcean));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that contains a single FlashcardSet."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubWithFlashcard extends AddFlashcardCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcardSetToDisplay \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ModelStubWithFlashcard() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FlashcardSet flset \u003d new FlashcardSetBuilder().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Flashcard flashcardAlrAdded \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcardAlrAdded);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flashcardBank.addFlashcardSet(flset);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flset.getFlashcards().stream().anyMatch(f -\u003e f.equals(flashcard));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flashcardBank.getFlashcardSetList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public void setFlashcardSetToView(Index index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            requireNonNull(index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            flashcardSetToDisplay.setAll(getFlashcardSet(index).getFlashcards());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that always accepts the Flashcard being added."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends AddFlashcardCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcardSetToDisplay \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ModelStubAcceptingFlashcardAdded() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flashcardBank.addFlashcardSet(new FlashcardSetBuilder().build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flset.getFlashcards().stream().anyMatch(f -\u003e f.equals(flashcard));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flashcardBank.getFlashcardSetList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public void setFlashcardSetToView(Index index) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            requireNonNull(index);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            flashcardSetToDisplay.setAll(getFlashcardSet(index).getFlashcards());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static class FlashcardModelStub implements FlashcardModel {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardSetToView() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public void setFlashcardSetToView(Index index) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 14,
      "petrickjerico": 26,
      "bowei-yu": 213,
      "chuyiting": 6
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/flashcardcommands/AddFlashcardSetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_FLSET_NAME_ECONOMICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_FLSET_NAME_PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardSetCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFlashcardSetCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_flashcardSetAcceptedByModel_addSuccess() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommandTest.ModelStubAcceptingFlsetAdded modelStub \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardSetCommandTest.ModelStubAcceptingFlsetAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet validFlset \u003d new FlashcardSetBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandResult result \u003d new AddFlashcardSetCommand(validFlset).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(String.format(AddFlashcardSetCommand.MESSAGE_SUCCESS, validFlset), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(Arrays.asList(validFlset), modelStub.flsetsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_duplicateFlashcardSet_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet validFlset \u003d new FlashcardSetBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addCommand \u003d new AddFlashcardSetCommand(validFlset);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommandTest.ModelStubWithFlashcardSet modelStub \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardSetCommandTest.ModelStubWithFlashcardSet(validFlset);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, AddFlashcardSetCommand.MESSAGE_DUPLICATE_FLASHCARD_SET, ("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder().withFlashcardSetName(VALID_FLSET_NAME_PHYSICS).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet economics \u003d new FlashcardSetBuilder().withFlashcardSetName(VALID_FLSET_NAME_ECONOMICS).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addPhysics \u003d new AddFlashcardSetCommand(physics);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addEconomics \u003d new AddFlashcardSetCommand(economics);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addPhysics.equals(addPhysics));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addPhysicsCommandCopy \u003d new AddFlashcardSetCommand(physics);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addPhysics.equals(addPhysicsCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addPhysics.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addPhysics.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcard sets -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addEconomics.equals(addPhysics));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that contains a single FlashcardSet."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubWithFlashcardSet extends AddFlashcardSetCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final FlashcardSet flset;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ModelStubWithFlashcardSet(FlashcardSet flset) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flset);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            this.flset \u003d flset;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return this.flset.equals(flashcardSet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that always accepts the FlashcardSet being added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubAcceptingFlsetAdded extends AddFlashcardSetCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final List\u003cFlashcardSet\u003e flsetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flsetsAdded.stream().anyMatch(f -\u003e f.equals(flashcardSet));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flsetsAdded.add(flashcardSet);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static class FlashcardModelStub implements FlashcardModel {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardSetToView() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public void setFlashcardSetToView(Index index) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 11,
      "petrickjerico": 11,
      "bowei-yu": 178,
      "chuyiting": 6
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/flashcardcommands/DeleteFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DeleteFlashcardCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel model \u003d new FlashcardModelManager(getTypicalFlashcardBank());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_validIndexList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flsetToDeleteFrom \u003d model.getFlashcardSet(INDEX_FIRST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFlashcard(flsetToDeleteFrom, INDEX_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                flashcardToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModelManager expectedModel \u003d new FlashcardModelManager(model.getFlashcardBank());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.deleteFlashcard(flsetToDeleteFrom, INDEX_SECOND); // This should be INDEX_FIRST."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        /* Not sure if this is a problem with source code. Need help reviewing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        because I can\u0027t find why this happens. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void testTheAboveTest() { // to check if this is a test code regression problem"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // method to be deleted after problem is resolved"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // create a model with no typical flashcards such that the error is not typical-flashcard related"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question question1 \u003d new Question(\"1 + 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer1 \u003d new Answer(\"2\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcard1 \u003d new Flashcard(question1, answer1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question question2 \u003d new Question(\"2 + 2\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer2 \u003d new Answer(\"4\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcard2 \u003d new Flashcard(question2, answer2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flset \u003d new FlashcardSet(new FlashcardSetName(\"Basic Arithmetic\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flset.addFlashcard(flashcard1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flset.addFlashcard(flashcard2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardBank.addFlashcardSet(flset);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModel flmodel \u003d new FlashcardModelManager(flashcardBank);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // test delete flashcard"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flsetToDeleteFrom \u003d flmodel.getFlashcardSet(INDEX_FIRST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcardToDelete \u003d flmodel.getFlashcard(flsetToDeleteFrom, INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                flashcardToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModelManager expectedModel \u003d new FlashcardModelManager(flmodel.getFlashcardBank());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.deleteFlashcard(flsetToDeleteFrom, INDEX_SECOND); // test only passes with INDEX_SECOND"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // CONCLUSION: Doesn\u0027t seem to be a testing problem unless this method I wrote is wrong"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(deleteCommand, flmodel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFlashcardBank().getFlashcardSetList().size() + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST, outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexFlset_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFlashcardBank().getFlashcardSetList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(outOfBoundIndex, INDEX_FIRST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand firstFlsetFirstFl \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand secondFlsetSecondFl \u003d new DeleteFlashcardCommand(INDEX_SECOND, INDEX_SECOND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand firstFlsetSecondFl \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(firstFlsetFirstFl.equals(firstFlsetFirstFl));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand firstFlsetFirstFlCopy \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(firstFlsetFirstFl.equals(firstFlsetFirstFl));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcards -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(secondFlsetSecondFl));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(firstFlsetSecondFl));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetSecondFl.equals(secondFlsetSecondFl));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 16,
      "bowei-yu": 101
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/flashcardcommands/DeleteFlashcardSetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DeleteFlashcardSetCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel model \u003d new FlashcardModelManager(getTypicalFlashcardBank());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_validIndexList_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSet flsetToDelete \u003d model.getFilteredFlashcardSetList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardSetCommand deleteCommand \u003d new DeleteFlashcardSetCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardSetCommand.MESSAGE_SUCCESS, flsetToDelete);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModelManager expectedModel \u003d new FlashcardModelManager(model.getFlashcardBank());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.deleteFlashcardSet(flsetToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexList_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFlashcardBank().getFlashcardSetList().size() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardSetCommand deleteCommand \u003d new DeleteFlashcardSetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 10,
      "petrickjerico": 1,
      "bowei-yu": 29
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/flashcardcommands/ListFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.FlashcardModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class ListFlashcardCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model \u003d new FlashcardModelManager(getTypicalFlashcardBank());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel \u003d new FlashcardModelManager(model.getFlashcardBank());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_list_showsEverything() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flashcardSet \u003d expectedModel.getFlashcardSet(INDEX_FIRST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ListFlashcardCommand.MESSAGE_SUCCESS + \"\\n\" + \"There are %d flashcards in the set %s.\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                flashcardSet.getSize(), flashcardSet.getName().name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(new ListFlashcardCommand(INDEX_FIRST), model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "petrickjerico": 3,
      "bowei-yu": 25
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/AnswerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_UNAVAIL_ON_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AnswerCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"Random answer here\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final AnswerCommand answerCommand \u003d new AnswerCommand(VALID_ANSWER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizModel model \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e answerCommand.execute(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizNeverStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_NEVER_STARTED, () -\u003e answerCommand.execute(model));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCommandNotAvailable_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(new QuizBuilder().build());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_UNAVAIL_ON_ANSWER, () -\u003e answerCommand.execute(model));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelAnswerQuiz_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String userAnswerToShow \u003d \"Your answer: \" + VALID_ANSWER + \"\\n\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedAnswerStringToShow \u003d userAnswerToShow + \"\\nCorrect answer: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + NEWTONS_SECOND_LAW.getAnswerString()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.SPECIAL_LITERAL"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.MESSAGE_AVAIL_ON_ANSWER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModel expectedModel \u003d new QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(answerCommand, model, expectedAnswerStringToShow, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 59
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/CancelCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.CancelCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class CancelCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final CancelCommand cancelCommand \u003d new CancelCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizModel model \u003d new"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cancelCommand.execute(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizNeverStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_NEVER_STARTED, () -\u003e cancelCommand.execute(model));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCancelQuiz_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModel expectedModel \u003d new QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(cancelCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 43
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/CorrectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_UNAVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class CorrectCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final CorrectCommand correctCommand \u003d new CorrectCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizModel model \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e correctCommand.execute(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizNeverStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_NEVER_STARTED, () -\u003e correctCommand.execute(model));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCommandNotAvailable_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(new QuizBuilder().build());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_UNAVAIL_ON_QUESTION, () -\u003e correctCommand.execute(model));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCorrectAnswer_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModel expectedModel \u003d new QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(correctCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCorrectAnswerLastIndex_stopsQuiz() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer(); // increments index to last"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz expectedQuiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModel expectedModel \u003d new QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.start(expectedQuiz);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.getAnswer();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.getAnswer();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.getAnswer(); // increments index to last"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.setPointsScored(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d expectedModel.stopQuiz();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(correctCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 76
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/FlipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_UNAVAIL_ON_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlipCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizModel model \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e flipCommand.execute(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizNeverStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_NEVER_STARTED, () -\u003e flipCommand.execute(model));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCommandNotAvailable_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(new QuizBuilder().build());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_UNAVAIL_ON_ANSWER, () -\u003e flipCommand.execute(model));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelAnswerQuiz_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedAnswerStringToShow \u003d \"Correct answer: \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + NEWTONS_SECOND_LAW.getAnswerString() + \"\\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.SPECIAL_LITERAL"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + QuizCommandUtil.MESSAGE_AVAIL_ON_ANSWER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModel expectedModel \u003d new QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(flipCommand, model, expectedAnswerStringToShow, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 56
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/RefreshCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class RefreshCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final RefreshCommand refreshCommand \u003d new RefreshCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlashcardQuizModel model \u003d new"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FlashcardQuizModelManager(getTypicalFlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e refreshCommand.execute(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizNeverStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_NEVER_STARTED, () -\u003e refreshCommand.execute(model));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelRefreshQuiz_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardQuizModel expectedModel \u003d new FlashcardQuizModelManager(getTypicalFlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(refreshCommand, model, RefreshCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 40,
      "chuyiting": 1
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/StartCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.StartCommand.MESSAGE_FLASHCARD_SET_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.StartCommand.MESSAGE_FLASHCARD_SET_NONEXISTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.StartCommand.MESSAGE_QUIZ_IN_PROGRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final int VALID_INDEX \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final int INVALID_INDEX \u003d 10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final StartCommand startCommand \u003d new StartCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlashcardQuizModel model \u003d new"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FlashcardQuizModelManager(getTypicalFlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e startCommand.execute(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(new QuizBuilder().buildDefaultQuiz());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_IN_PROGRESS, () -\u003e startCommand.execute(model));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelFlashcardSetIndexOutOfBounds_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        StartCommand invalidIndexStartCommand \u003d new StartCommand(INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_FLASHCARD_SET_NONEXISTENT, () -\u003e invalidIndexStartCommand.execute(model));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelFlashcardSetIsEmpty_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcardSet\u003e flashcardSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSets.add(new FlashcardSetBuilder().build()); // empty flset"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardBank.setFlashcardSets(flashcardSets);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardQuizModel model \u003d new FlashcardQuizModelManager(flashcardBank, new QuizRecords());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_FLASHCARD_SET_EMPTY, () -\u003e startCommand.execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelStartQuiz_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardQuizModel expectedModel \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new FlashcardQuizModelManager(getTypicalFlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 74
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/ViewScoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.ViewScoreCommand.MESSAGE_QUIZ_NONEXISTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.ViewScoreCommand.MESSAGE_UNABLE_TO_VIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.getTypicalQuizRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.FlashcardQuizModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class ViewScoreCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final int VALID_INDEX \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final int INVALID_INDEX \u003d 10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final ViewScoreCommand viewScoreCommand \u003d new ViewScoreCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlashcardQuizModel model \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FlashcardQuizModelManager(getTypicalFlashcardBank(), getTypicalQuizRecords());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewScoreCommand.execute(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(new QuizBuilder().buildDefaultQuiz());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_UNABLE_TO_VIEW, () -\u003e viewScoreCommand.execute(model));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelFlashcardSetIndexOutOfBounds_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ViewScoreCommand invalidIndexStartCommand \u003d new ViewScoreCommand(INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_NONEXISTENT, () -\u003e invalidIndexStartCommand.execute(model));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelViewScore_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d model.getQuizRecords("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new FlashcardSetName(\"Physics\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardQuizModel expectedModel \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new FlashcardQuizModelManager(getTypicalFlashcardBank(), getTypicalQuizRecords());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(viewScoreCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 54
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/quizcommands/WrongCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.QuizRecordsCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.commands.quizcommands.QuizCommandUtil.MESSAGE_UNAVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.QuizModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class WrongCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final WrongCommand wrongCommand \u003d new WrongCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizModel model \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wrongCommand.execute(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelQuizNeverStarted_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                MESSAGE_QUIZ_NEVER_STARTED, () -\u003e wrongCommand.execute(model));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCommandNotAvailable_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(new QuizBuilder().build());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_UNAVAIL_ON_QUESTION, () -\u003e wrongCommand.execute(model));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelWrongAnswer_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d MESSAGE_AVAIL_ON_QUESTION;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModel expectedModel \u003d new QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(wrongCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_modelCorrectAnswerLastIndex_stopsQuiz() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.start(quiz);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.getAnswer(); // increments index to last"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz expectedQuiz \u003d new QuizBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizModel expectedModel \u003d new QuizModelManager(new QuizRecords());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.start(expectedQuiz);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.getAnswer();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.getAnswer();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.getAnswer(); // increments index to last"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuiz.setPointsScored(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d expectedModel.stopQuiz();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommandUtil.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(wrongCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 76
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleModel model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModel expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(new ScheduleAddCommand(validTask), model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                String.format(ScheduleAddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskInList \u003d model.getSchedule().getTaskList().get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandFailure(new ScheduleAddCommand(taskInList), model, ScheduleAddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 8,
      "chuyiting": 31
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ScheduleAddCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccess() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult result \u003d new ScheduleAddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(String.format(ScheduleAddCommand.MESSAGE_SUCCESS, validTask), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCommand \u003d new ScheduleAddCommand(validTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ModelStubWithTask modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(CommandException.class, ScheduleAddCommand.MESSAGE_DUPLICATE_TASK, ("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task cs2103 \u003d new TaskBuilder().withTitle(\"cs2103\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task cs2101 \u003d new TaskBuilder().withTitle(\"cs2101\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCs2103 \u003d new ScheduleAddCommand(cs2103);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCs2101 \u003d new ScheduleAddCommand(cs2101);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(addCs2103.equals(addCs2103));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCs2103CommandCopy \u003d new ScheduleAddCommand(cs2103);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(addCs2103.equals(addCs2103CommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(addCs2103.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(addCs2103.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(addCs2101.equals(addCs2103));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * A Model stub that contains a single Task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ModelStubWithTask extends ScheduleModelStub {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * A Model stub that always accepts the Task being added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ScheduleModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        private List\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ScheduleModelStub implements ScheduleModel {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void setSchedule(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "chuyiting": 154
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleDeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModelManager expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleDeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModel expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of schedule list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSchedule().getTaskList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteFirstCommand \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteSecondCommand \u003d new ScheduleDeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteFirstCommandCopy \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void showNoTask(ScheduleModel model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 12,
      "chuyiting": 90
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.studybananas.logic.commands.commandresults.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel expectedModel \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editCommand \u003d new ScheduleEditCommand(outOfBoundIndex, null, null, null, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_taskAcceptedByModel_editSuccess() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description editedDescription \u003d new Description(\"Week 9 Quiz\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime editedDateTime \u003d new DateTime(\"2020-09-27 12:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration editedDuration \u003d new Duration(\"30\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().withDescription(\"Week 9 Quiz\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime((\"2020-09-27 12:00\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDuration(\"30\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        CommandResult result \u003d new ScheduleEditCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                INDEX_FIRST, null, editedDescription, editedDateTime, editedDuration).execute(expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(String.format(ScheduleEditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                result.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editFirstCommand \u003d new ScheduleEditCommand(INDEX_FIRST, null, null, null, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editSecondCommand \u003d new ScheduleEditCommand(INDEX_SECOND, null, null, null, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editFirstCommandCopy \u003d new ScheduleEditCommand(INDEX_FIRST, null, null, null, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(editFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(editFirstCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(editFirstCommand.equals(editSecondCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 58,
      "cupofjoee": 14,
      "chuyiting": 1
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleModel model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleModel expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(new ScheduleListCommand(), model, ScheduleListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(new ScheduleListCommand(), model, ScheduleListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 7,
      "chuyiting": 26
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/commands/schedulecommands/ScheduleSearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2100_FINAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.ST2334_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel expectedModel \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand findFirstCommand \u003d new ScheduleSearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand findSecondCommand \u003d new ScheduleSearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand findFirstCommandCopy \u003d new ScheduleSearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_multipleTitleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"CS2100\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(Arrays.asList(CS2100_TUTORIAL_HOMEWORK, CS2100_FINAL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_multipleDescriptionKeywords_oneTaskFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"Pipeline homework\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Arrays.asList(CS2100_TUTORIAL_HOMEWORK), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_multipleDescriptionKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"Pipeline Assignment\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_dateTimeKeywords_oneTaskFound() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"2020-10-01 23:00\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Arrays.asList(ST2334_ASSIGNMENT), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_dateTimeKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"2020-10-01 1:00\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private InfoContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new InfoContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 51,
      "cupofjoee": 10,
      "chuyiting": 59
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/StudyBananasParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "@SuppressWarnings(\"checkstyle:CommentsIndentation\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class StudyBananasParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final StudyBananasParser parser \u003d new StudyBananasParser();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/flashcardparsers/AddFlashcardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.ANSWER_DESC_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.ANSWER_DESC_SECOND_LAW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FLSET_INDEX_DESC_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FLSET_INDEX_DESC_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NEGATIVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NON_INTEGER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_INDEX_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.QUESTION_DESC_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.QUESTION_DESC_SECOND_LAW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_ANSWER_SECOND_LAW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_QUESTION_SECOND_LAW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final AddFlashcardCommandParser parser \u003d new AddFlashcardCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_SECOND_LAW)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .withAnswer(VALID_ANSWER_SECOND_LAW).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index expectedIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple questions - last question accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_OPPORTUNITY_COST"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                        + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple answers - last answer accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                        + ANSWER_DESC_OPPORTUNITY_COST + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple flset index - last flset index accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_TWO + FLSET_INDEX_DESC_ONE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                        + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_variousOrder_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_SECOND_LAW)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .withAnswer(VALID_ANSWER_SECOND_LAW).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index expectedIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // index answer question"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + ANSWER_DESC_SECOND_LAW + QUESTION_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // question index answer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_SECOND_LAW + FLSET_INDEX_DESC_ONE + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // answer question index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, ANSWER_DESC_SECOND_LAW + QUESTION_DESC_SECOND_LAW + FLSET_INDEX_DESC_ONE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_missingFields_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing all parameters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing index prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // negative flset index"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NEGATIVE + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // non-number flset index"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NON_INTEGER + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + INVALID_QUESTION_DESC + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 116,
      "bowei-yu": 2,
      "chuyiting": 2
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/flashcardparsers/AddFlashcardSetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.NAME_DESC_ECONOMICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.NAME_DESC_PHYSICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.NAME_DESC_PHYSICS_EXTRA_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.QUESTION_DESC_SECOND_LAW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_FLSET_NAME_PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.AddFlashcardSetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardSetCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final AddFlashcardSetCommandParser parser \u003d new AddFlashcardSetCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet expectedFlashcardSet \u003d new FlashcardSetBuilder().withFlashcardSetName(VALID_FLSET_NAME_PHYSICS)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String a \u003d AddFlashcardSetCommand.COMMAND_WORD + NAME_DESC_PHYSICS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PHYSICS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardSetCommand(expectedFlashcardSet));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // extra whitespace between parameter and value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PHYSICS_EXTRA_WHITESPACE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardSetCommand(expectedFlashcardSet));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ECONOMICS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                + NAME_DESC_PHYSICS, new AddFlashcardSetCommand(expectedFlashcardSet));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_missingFields_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardSetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, VALID_FLSET_NAME_PHYSICS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_irrelevantFields_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SECOND_LAW + NAME_DESC_PHYSICS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardSetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 47,
      "bowei-yu": 3,
      "chuyiting": 7
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/flashcardparsers/DeleteFlashcardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FLSET_INDEX_DESC_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FL_INDEX_DESC_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NEGATIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NON_INTEGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FL_INDEX_NEGATIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FL_INDEX_NON_INTEGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class DeleteFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final DeleteFlashcardCommandParser parser \u003d new DeleteFlashcardCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_validArgs_returnsDeleteFlashcardCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + FL_INDEX_DESC_ONE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // negative flset index and fl index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NEGATIVE + INVALID_FL_INDEX_NEGATIVE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // non-integer flset index and fl index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NON_INTEGER + INVALID_FL_INDEX_NON_INTEGER,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 37
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/flashcardparsers/DeleteFlashcardSetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.DeleteFlashcardSetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DeleteFlashcardSetCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final DeleteFlashcardSetCommandParser parser \u003d new DeleteFlashcardSetCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_validArgs_returnsDeleteFlashcardSetCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteFlashcardSetCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, \"a\", Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, \"-1\", Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 23,
      "bowei-yu": 3
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/flashcardparsers/FlashcardParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private FlashcardParser parser \u003d new FlashcardParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ) -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // contain only one word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ) -\u003e parser.parse(\"one\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parse(\"one two\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 27,
      "bowei-yu": 3
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/flashcardparsers/ListFlashcardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.flashcardcommands.ListFlashcardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class ListFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final ListFlashcardCommandParser parser \u003d new ListFlashcardCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_validArgs_returnsListFlashcardCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ListFlashcardCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, \"a\", Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 25
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/parserutils/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.parserutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.parserutils.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "chuyiting": 2,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/quizparsers/QuizParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.logic.parser.quizparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.logic.parser.quizparsers.QuizParser.MESSAGE_PARSING_ERROR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.AnswerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.CancelCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.CorrectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.FlipCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.RefreshCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.StartCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.ViewScoreCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.commands.quizcommands.WrongCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizParser parser \u003d new QuizParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_PARSING_ERROR, ("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_PARSING_ERROR, ("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e parser.parse(\"hello\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parseNumber_success() throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String validNumberString \u003d \"9\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int validNumber \u003d 9;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int parsedNumber \u003d parser.parseNumber(validNumberString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(validNumber, parsedNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parseNumber_invalidNumber_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidNumberCharacter \u003d \"A\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidNumberString \u003d \"one\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseNumber(invalidNumberCharacter));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseNumber(invalidNumberString));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_startCommand_returnsStartCommand() throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        StartCommand expectedCommand \u003d new StartCommand(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        StartCommand startCommand \u003d (StartCommand) parser.parse(\"quiz flset:1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, startCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_viewScoreCommand_returnsViewScoreCommand() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ViewScoreCommand expectedCommand \u003d new ViewScoreCommand(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ViewScoreCommand viewScoreCommand \u003d (ViewScoreCommand) parser.parse(\"quiz score flset:1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, viewScoreCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_answerCommand_returnsAnswerCommand() throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String answer \u003d \"Random answer here\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AnswerCommand expectedCommand \u003d new AnswerCommand(answer);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AnswerCommand answerCommand \u003d (AnswerCommand) parser.parse(\"ans:Random answer here\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, answerCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_cancelCommand_returnsCancelCommand() throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CancelCommand expectedCommand \u003d new CancelCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CancelCommand cancelCommand \u003d (CancelCommand) parser.parse(\"cancel\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, cancelCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_flipCommand_returnsFlipCommand() throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlipCommand expectedCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlipCommand flipCommand \u003d (FlipCommand) parser.parse(\"flip\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, flipCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_correctCommand_returnsCorrectCommand() throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CorrectCommand expectedCommand \u003d new CorrectCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CorrectCommand correctCommand \u003d (CorrectCommand) parser.parse(\"c\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, correctCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_refreshCommand_returnsRefreshCommand() throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        RefreshCommand expectedCommand \u003d new RefreshCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        RefreshCommand refreshCommand \u003d (RefreshCommand) parser.parse(\"refresh\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, refreshCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void parse_wrongCommand_returnsWrongCommand() throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        WrongCommand expectedCommand \u003d new WrongCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        WrongCommand wrongCommand \u003d (WrongCommand) parser.parse(\"w\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedCommand, wrongCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 108
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DATETIME_DESC_CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DATETIME_DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DESCRIPTION_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DESCRIPTION_DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.TITLE_DESC_CS2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.TITLE_DESC_CS2103T;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DATETIME_CS2103T;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DESCRIPTION_CS2103T;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DURATION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleAddCommandParser parser \u003d new ScheduleAddCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T).withDescription(VALID_DESCRIPTION_CS2103T)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime(VALID_DATETIME_CS2103T).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2101 + TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2101 + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // multiple dates - last email accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T + DATETIME_DESC_CS2101"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no dateTime"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTaskWithoutDateTime \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CS2103T).withDateTime(\"\").withDuration(\"\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new ScheduleAddCommand(expectedTaskWithoutDateTime));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no description"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTaskWithoutDescription \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T).withDescription(\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime(VALID_DATETIME_CS2103T).withDuration(\"\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new ScheduleAddCommand(expectedTaskWithoutDescription));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no dateTime and no description"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTaskWithOnlyTitle \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T).withDescription(\"\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime(\"\").withDuration(\"\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new ScheduleAddCommand(expectedTaskWithOnlyTitle));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_CS2103T + DESCRIPTION_DESC_CS2103T + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T + INVALID_DATETIME_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10,
      "cupofjoee": 22,
      "chuyiting": 65
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleDeleteCommandParser parser \u003d new ScheduleDeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_validArgs_returnsScheduleDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ScheduleDeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, \"a\", Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "chuyiting": 18
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DATETIME_DESC_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DESCRIPTION_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.TITLE_DESC_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DATETIME_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DURATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleEditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final ScheduleEditCommandParser parser \u003d new ScheduleEditCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void parse_validArgs_returnsScheduleDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Title editTitle \u003d new Title(VALID_TITLE_CS2103T);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + TITLE_DESC_CS2103T,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, editTitle, null, null, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description editDescription \u003d new Description(VALID_DESCRIPTION_CS2101);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + DESCRIPTION_DESC_CS2101,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, null, editDescription, null, null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited date time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime editDateTime \u003d new DateTime(VALID_DATETIME_CS2103T);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, null, null, editDateTime, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited duration"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration editDuration \u003d new Duration(VALID_DURATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + DURATION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, null, null, null, editDuration));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // all the information is valid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + TITLE_DESC_CS2103T"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DURATION,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, editTitle, editDescription, editDateTime, editDuration));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // no task index given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" T: CS2103T\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // no task information is provided"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid edited dateTime format and valid title"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" 1\" + TITLE_DESC_CS2103T + INVALID_DATETIME_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid duration"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" 1\" + INVALID_DURATION, Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 58,
      "cupofjoee": 20
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleParser parser \u003d new ScheduleParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            ) -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // contain only one word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            ) -\u003e parser.parse(\"one\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parse(\"one two\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_listCommand_returnScheduleListCommand() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleListCommand expectedCommand \u003d new ScheduleListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleListCommand listCommand \u003d (ScheduleListCommand) parser.parse(\"list task\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(expectedCommand, listCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "chuyiting": 31
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/logic/parser/scheduleparsers/ScheduleSearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.logic.commands.schedulecommands.ScheduleSearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleSearchCommandParser parser \u003d new ScheduleSearchCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                ScheduleSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleSearchCommand(new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103T\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, \"CS2101 CS2103T\", expectedSearchCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2101 \\n \\t CS2103T  \\t\", expectedSearchCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 6,
      "chuyiting": 27
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/FlashcardQuizModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class FlashcardQuizModelManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        userPrefs.setScheduleFilePath(Paths.get(\"schedule/file/path\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        userPrefs.setScheduleFilePath(Paths.get(\"new/schedule/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords quizRecords \u003d new QuizRecords();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        modelManager \u003d new ModelManager(userPrefs, schedule, flashcardBank, quizRecords);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(userPrefs, schedule, flashcardBank, quizRecords);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        differentUserPrefs.setScheduleFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                differentUserPrefs, schedule, flashcardBank, quizRecords)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 14,
      "chuyiting": 2,
      "bowei-yu": 2,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/ScheduleModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class ScheduleModelManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setScheduleFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setScheduleFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardBankFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFlashcardBankFilePath(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setQuizRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setQuizRecordsFilePath(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 16,
      "chuyiting": 1,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/flashcard/AnswerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Amount of heat evolved or \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + \"absorbed in a reaction carried out at constant pressure\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Google is a search engine.\")); // with non-alphanumeric character \u0027.\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Y\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "bowei-yu": 34
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/flashcard/FlashcardSetNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardSetNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FlashcardSetName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_invalidFlashcardSetName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FlashcardSetName(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FlashcardSetName.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(FlashcardSetName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(FlashcardSetName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(FlashcardSetName.isValidName(\"Physics\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(FlashcardSetName.isValidName(\"Y\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "bowei-yu": 32
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/flashcard/FlashcardSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.ECONOMICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.HOOKES_LAW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardSetTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.equals(PHYSICS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(PHYSICS.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcard set name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet editedPhysics \u003d new FlashcardSetBuilder(PHYSICS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withFlashcardSetName(\"Economics\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(PHYSICS.equals(editedPhysics));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcards in list, but same name -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        editedPhysics \u003d new FlashcardSetBuilder(PHYSICS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                 .withFlashcards(ECONOMICS.getFlashcards())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                 .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.equals(editedPhysics));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.hasFlashcard(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardNotInSet_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(PHYSICS.hasFlashcard(OPPORTUNITY_COST));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardInSet_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.hasFlashcard(NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardWithSameInformationInSet_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard editedSecondLaw \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.hasFlashcard(editedSecondLaw));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_nullflashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.addFlashcard(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e PHYSICS.addFlashcard(NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e PHYSICS.setFlashcard(null, NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.setFlashcard(NEWTONS_SECOND_LAW, null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInSet_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e PHYSICS.setFlashcard("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                OPPORTUNITY_COST, NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet expectedFlset \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        physics.setFlashcard(NEWTONS_SECOND_LAW, NEWTONS_SECOND_LAW);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedFlset, physics);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet expectedFlset \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        physics.setFlashcard(NEWTONS_SECOND_LAW, OPPORTUNITY_COST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertNotEquals(physics.getFlashcard(0), expectedFlset.getFlashcard(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e PHYSICS.setFlashcard("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                NEWTONS_SECOND_LAW, DECAY_CONSTANT));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void delete_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.deleteFlashcard(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void delete_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e PHYSICS.deleteFlashcard(Index.fromZeroBased(3)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void delete_existingFlashcard_deletesFlashcard() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        physics.deleteFlashcard(INDEX_FIRST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet expectedPhysics \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .addFlashcard(HOOKES_LAW)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .addFlashcard(DECAY_CONSTANT)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedPhysics, physics);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 14,
      "bowei-yu": 123
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/flashcard/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(NEWTONS_SECOND_LAW.equals(NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard editedSecondLaw \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withQuestion(\"Lenz\u0027s Law of Electromagnetic Induction\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(editedSecondLaw));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        editedSecondLaw \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withAnswer(\"The polarity of the induced emf is to produce an \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        + \"induced magnetic field that opposes the change in flux\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(editedSecondLaw));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard secondLawCopy \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(NEWTONS_SECOND_LAW.equals(secondLawCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(DECAY_CONSTANT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "bowei-yu": 39
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/flashcard/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Define enthalpy change\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is Google?\")); // with non-alphanumeric character \u0027?\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"H\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "bowei-yu": 33
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/flashcard/UniqueFlashcardSetListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.ECONOMICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.DuplicateFlashcardSetException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.exceptions.FlashcardSetNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class UniqueFlashcardSetListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final UniqueFlashcardSetList uniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardSetNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(uniqueFlsetList.contains(PHYSICS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardSetInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(uniqueFlsetList.contains(PHYSICS));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardSetWithSameInformationInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet editedPhysics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(uniqueFlsetList.contains(editedPhysics));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_duplicateFlashcardSet_throwsDuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardSetException.class, () -\u003e uniqueFlsetList.add(PHYSICS));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullTargetFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSet(null, PHYSICS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullEditedFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSet(PHYSICS, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_targetFlashcardSetNotInList_throwsFlashcardSetNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardSetNotFoundException.class, () -\u003e uniqueFlsetList.setFlashcardSet(PHYSICS, PHYSICS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_editedFlashcardSetIsSameFlashcardSet_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSet(PHYSICS, PHYSICS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_editedFlashcardSetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSet(PHYSICS, ECONOMICS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_editedFlashcardSetHasNonUniqueIdentity_throwsDuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardSetException.class, () -\u003e uniqueFlsetList.setFlashcardSet("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                PHYSICS, ECONOMICS));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.remove(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_flashcardSetDoesNotExist_throwsFlashcardSetNotFoundException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardSetNotFoundException.class, () -\u003e uniqueFlsetList.remove(ECONOMICS));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_existingFlashcardSet_removesFlashcardSet() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.remove(PHYSICS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullUniqueFlashcardSetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSets((UniqueFlashcardSetList) null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_uniqueFlashcardSetList_replacesOwnListWithProvidedUniqueFlashcardSetList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSets(expectedUniqueFlsetList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSets((List\u003cFlashcardSet\u003e) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcardSet\u003e flsetList \u003d Collections.singletonList(ECONOMICS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSets(flsetList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_listWithDuplicateFlashcardSet_throwsDuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcardSet\u003e listWithDuplicateFlsets \u003d Arrays.asList(PHYSICS, PHYSICS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardSetException.class, () -\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                uniqueFlsetList.setFlashcardSets(listWithDuplicateFlsets));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueFlsetList"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "bowei-yu": 151
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/quiz/QuizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.QuizBuilder.DEFAULT_POINTS_SCORED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.QuizBuilder.DEFAULT_TOTAL_SCORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.ECONOMICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.HOOKES_LAW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.QUIZ_ECONOMICS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.QUIZ_PHYSICS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(QUIZ_PHYSICS, QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertNotEquals(QUIZ_PHYSICS, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcard set -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz editedQuizPhysics \u003d new QuizBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withFlashcardSet(ECONOMICS)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertNotEquals(editedQuizPhysics, QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizPhysicsCopy \u003d new QuizBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withFlashcardSet(PHYSICS)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(quizPhysicsCopy, QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different quiz -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertNotEquals(QUIZ_PHYSICS, QUIZ_ECONOMICS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void test_getQuestionGetAnswerFlow_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizPhysics \u003d new QuizBuilder(QUIZ_PHYSICS).buildDefaultQuiz();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question firstQuestion \u003d quizPhysics.getQuestion();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(NEWTONS_SECOND_LAW.getQuestion(), firstQuestion);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer firstAns \u003d quizPhysics.getAnswer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(NEWTONS_SECOND_LAW.getAnswer(), firstAns);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question secondQuestion \u003d quizPhysics.getQuestion();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(HOOKES_LAW.getQuestion(), secondQuestion);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer secondAns \u003d quizPhysics.getAnswer();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(HOOKES_LAW.getAnswer(), secondAns);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question thirdQuestion \u003d quizPhysics.getQuestion();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(DECAY_CONSTANT.getQuestion(), thirdQuestion);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer thirdAns \u003d quizPhysics.getAnswer();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(DECAY_CONSTANT.getAnswer(), thirdAns);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // checks question returns null when end is reached"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question endOfQuiz \u003d quizPhysics.getQuestion();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertNull(endOfQuiz);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void test_getPercentageScore() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizPhysics \u003d new QuizBuilder(QUIZ_PHYSICS).buildDefaultQuiz();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        double defaultPercentageScore \u003d (double) DEFAULT_POINTS_SCORED / (double) DEFAULT_TOTAL_SCORE * 100;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(defaultPercentageScore, quizPhysics.getPercentageScore());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void test_saveAnswer() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizPhysics \u003d new QuizBuilder(QUIZ_PHYSICS).buildDefaultQuiz();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // check initial answer"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String initialAnswer \u003d quizPhysics.getUserAnswers()[0]; // default index is 0"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String userAnswer \u003d \"3 happy bunnies\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertNotEquals(initialAnswer, userAnswer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizPhysics.saveAnswer(userAnswer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(quizPhysics.getUserAnswers()[0], userAnswer);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void test_setPointsScored() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizPhysics \u003d new QuizBuilder(QUIZ_PHYSICS).buildDefaultQuiz();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizPhysics.getAnswer(); // establishes the index to the first question"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        boolean answerIsCorrect \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        boolean answerIsWrong \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int initialScore \u003d quizPhysics.getPointsScored();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int scoreAfterCorrect \u003d initialScore + 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizPhysics.setPointsScored(answerIsCorrect);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(quizPhysics.getResults()[0], answerIsCorrect); // default index is 0"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(scoreAfterCorrect, quizPhysics.getPointsScored());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        int scoreAfterWrong \u003d scoreAfterCorrect; // doesn\u0027t increase score"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizPhysics.setPointsScored(answerIsWrong);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(quizPhysics.getResults()[0], answerIsWrong); // default index is 0"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(scoreAfterWrong, quizPhysics.getPointsScored());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 120
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/quiz/UniqueQuizRecordsMapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.QUIZ_ECONOMICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.QUIZ_ICEBREAKER_JOKES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.QUIZ_PHYSICS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.exceptions.DuplicateQuizException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.exceptions.QuizNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class UniqueQuizRecordsMapTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final UniqueQuizRecordsMap uniqueQuizRecordsMap \u003d new UniqueQuizRecordsMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_nullQuiz_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuizRecordsMap.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_quizNotInMap_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(uniqueQuizRecordsMap.contains(QUIZ_PHYSICS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_quizInMap_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(uniqueQuizRecordsMap.contains(QUIZ_PHYSICS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_taskWithSameInformationInMap_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz copyQuizPhysics \u003d new QuizBuilder(QUIZ_PHYSICS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withFlashcardSet(PHYSICS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .buildDefaultQuiz();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(uniqueQuizRecordsMap.contains(copyQuizPhysics));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_nullQuiz_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                uniqueQuizRecordsMap.add(new FlashcardSetName(\"Test\"), null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz_nullTargetQuiz_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuizRecordsMap.setQuiz(null, QUIZ_PHYSICS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz_nullEditedQuiz_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuizRecordsMap.setQuiz(QUIZ_PHYSICS, null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz_targetQuizNotInMap_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(QuizNotFoundException.class, () -\u003e uniqueQuizRecordsMap.setQuiz(QUIZ_PHYSICS, QUIZ_PHYSICS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz_editedQuizHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.setQuiz(QUIZ_PHYSICS, QUIZ_ICEBREAKER_JOKES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueQuizRecordsMap expectedQuizRecordsMap \u003d new UniqueQuizRecordsMap();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedQuizRecordsMap.add(QUIZ_ICEBREAKER_JOKES.getFlsetName(), QUIZ_ICEBREAKER_JOKES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedQuizRecordsMap, uniqueQuizRecordsMap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz_editedQuizHasNonUniqueIdentity_throwsDuplicateQuizException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_ECONOMICS.getFlsetName(), QUIZ_ECONOMICS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateQuizException.class, () -\u003e uniqueQuizRecordsMap.setQuiz("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                QUIZ_PHYSICS, QUIZ_ECONOMICS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_nullQuiz_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuizRecordsMap.remove(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_existingQuiz_removesQuiz() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.remove(QUIZ_PHYSICS.getFlsetName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueQuizRecordsMap expectedUniqueQuizRecordsMap \u003d new UniqueQuizRecordsMap();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueQuizRecordsMap, uniqueQuizRecordsMap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords_nullUniqueQuizRecordsMap_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                uniqueQuizRecordsMap.setQuizRecords((UniqueQuizRecordsMap) null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords_uniqueQuizRecordsMap_replacesOwnMapWithProvidedUniqueQuizRecordsMap() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueQuizRecordsMap expectedUniqueQuizRecordsMap \u003d new UniqueQuizRecordsMap();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.setQuizRecords(expectedUniqueQuizRecordsMap);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueQuizRecordsMap, uniqueQuizRecordsMap);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords_nullMap_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                uniqueQuizRecordsMap.setQuizRecords((Map\u003cFlashcardSetName, Quiz\u003e) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords_map_replacesOwnMapWithProvidedMap() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Map\u003cFlashcardSetName, Quiz\u003e quizMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizMap.put(QUIZ_ECONOMICS.getFlsetName(), QUIZ_ECONOMICS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.setQuizRecords(quizMap);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueQuizRecordsMap expectedUniqueQuizRecordsMap \u003d new UniqueQuizRecordsMap();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueQuizRecordsMap.add(QUIZ_ECONOMICS.getFlsetName(), QUIZ_ECONOMICS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueQuizRecordsMap, uniqueQuizRecordsMap);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void getQuiz() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueQuizRecordsMap.add(QUIZ_PHYSICS.getFlsetName(), QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(QUIZ_PHYSICS, uniqueQuizRecordsMap.getQuiz(QUIZ_PHYSICS.getFlsetName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 142
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/task/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null date time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"10/12/2020 12:00\")); // wrong format in dd/MM/yyyy hh:mm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020/03/20\")); // no time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid date time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2020-10-10\")); // correct format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"Thursday, Oct 29 2020 08:00\")); // correct format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 29,
      "cupofjoee": 2
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // blank description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Final Examination for CS2103T\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"PE\")); // minimal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Practical Examination\")); // alphabets only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\")); // special characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"123145\")); // numbers only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \"Final Examination which covers all the materials so far\")); // long description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 31,
      "cupofjoee": 2
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/task/InfoContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InfoContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d new InfoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d new InfoContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicateCopy \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Collections.singletonList(\"CS2100\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2100\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"Homework\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"Homework\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"cS2103t\", \"qUiz\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2103T Quiz\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withTitle(\"CS2100\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2103T\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withTitle(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Collections.singletonList(\"Pipeline\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Pipeline tutorial HomeWork\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"Homework\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2100 pipeline tutorial HomeWork\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"tuToriaL\", \"HomEWorK\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Pipeline tutorial Homework\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2103\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_dateTimeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Matching dateTime"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Arrays.asList(\"2020-10-10\", \"14:00\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDateTime(\"2020-10-10 14:00\").build()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_dateTimeDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDateTime(\"2020-10-10 14:00\").build()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"2020-10-10\", \"12:00\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDateTime(\"2020-10-10 14:00\").build()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 116,
      "cupofjoee": 2
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2103T_WEEK8_QUIZ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.equals(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withTitle(\"CS2101\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(editedCs2103T));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDescription(\"Week 9 quiz\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(editedCs2103T));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDateTime(\"2020-09-30 12:00\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(editedCs2103T));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task cs2103Copy \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.isSameTask(cs2103Copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.isSameTask(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(CS2100_TUTORIAL_HOMEWORK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withTitle(\"CS2101\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(editedCs2103T));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDescription(\"Week 9 Tutorial\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(editedCs2103T));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDateTime(\"2020-09-30 12:30\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(editedCs2103T));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different duration -\u003e returs false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDuration(\"10\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(editedCs2103T));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isDateTimeOverlapped() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same task -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.isDateTimeOverlapped(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Task with no dateTime -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDuration(\"\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2100_TUTORIAL_HOMEWORK.isDateTimeOverlapped(editedCs2103T));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Task with overlapped dateTime -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDateTime(\"2020-09-27 11:00\").withDuration(\"75\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.isDateTimeOverlapped(editedCs2103T));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Task without overlapped dateTime -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isDateTimeOverlapped(CS2100_TUTORIAL_HOMEWORK));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 79,
      "cupofjoee": 4
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/task/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS2103T\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Title.isValidTitle(\"H\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 31,
      "cupofjoee": 4
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2103T_WEEK8_QUIZ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(uniqueTaskList.contains(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(uniqueTaskList.contains(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_taskWithSameInformationInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDescription(\"Week 8 Quiz\").withDateTime(\"2020-09-27 12:00\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedCs2103T));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_editedTaskIsSameTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setPerson_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedUniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2103T_WEEK8_QUIZ, CS2100_TUTORIAL_HOMEWORK));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(CS2100_TUTORIAL_HOMEWORK));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.remove(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedUniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedUniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(CS2103T_WEEK8_QUIZ, CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueTaskList"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 150,
      "cupofjoee": 7
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        userPrefs.setScheduleFilePath(Paths.get(\"schedule.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        userPrefs.setFlashcardBankFilePath(Paths.get(\"flashcardbank.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        userPrefs.setQuizRecordsFilePath(Paths.get(\"quizrecords.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 8,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.JsonFlashcardBankStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.quizstorage.JsonQuizRecordsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.storage.schedulestorage.JsonScheduleStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(getTempFilePath(\"sch\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        JsonFlashcardBankStorage flashcardBankStorage \u003d new JsonFlashcardBankStorage(getTempFilePath(\"flbank\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonQuizRecordsStorage quizRecordsStorage \u003d new JsonQuizRecordsStorage(getTempFilePath(\"qzrds\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        storageManager \u003d new StorageManager(scheduleStorage, flashcardBankStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                quizRecordsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void scheduleReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         * {@link JsonAddressSchedule} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonScheduleTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule original \u003d getSampleSchedule();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        storageManager.saveSchedule(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ReadOnlySchedule retrieved \u003d storageManager.readSchedule().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getScheduleFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertNotNull(storageManager.getScheduleFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void flashcardBankReadSave() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 17,
      "cupofjoee": 17,
      "chuyiting": 1,
      "bowei-yu": 1,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/flashcardstorage/JsonAdadptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.storage.flashcardstorage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdadptedFlashcardTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_QUESTION \u003d NEWTONS_SECOND_LAW.getQuestion().toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_ANSWER \u003d NEWTONS_SECOND_LAW.getAnswer().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(NEWTONS_SECOND_LAW);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(NEWTONS_SECOND_LAW, flashcard.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_ANSWER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "bowei-yu": 30
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/flashcardstorage/JsonAdaptedFlashcardSetNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedFlashcardSetNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_NAME \u003d \"Physics\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String INVALID_NAME \u003d \"!!..,,\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_validFlashcardSetName_returnsFlashcardSetName() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcardSetName flashcardSetName \u003d new JsonAdaptedFlashcardSetName(VALID_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(PHYSICS.getFlashcardSetName(), flashcardSetName.toModelType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcardSetName flashcardSetName \u003d new JsonAdaptedFlashcardSetName((String) null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, flashcardSetName::toModelType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 25
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/flashcardstorage/JsonAdaptedFlashcardSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.storage.flashcardstorage.JsonAdaptedFlashcardSet.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.HOOKES_LAW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedFlashcardSetTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_NAME \u003d PHYSICS.getFlashcardSetName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final List\u003cJsonAdaptedFlashcard\u003e VALID_FLASHCARD_LIST \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList(new JsonAdaptedFlashcard(NEWTONS_SECOND_LAW),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new JsonAdaptedFlashcard(HOOKES_LAW),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new JsonAdaptedFlashcard(DECAY_CONSTANT)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_validFlashcardSetDetails_returnsFlashcardSet() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcardSet flashcardSet \u003d new JsonAdaptedFlashcardSet(PHYSICS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(PHYSICS, flashcardSet.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullFlsetName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcardSet flashcardSet \u003d new JsonAdaptedFlashcardSet(null, VALID_FLASHCARD_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, FlashcardSetName.class.getSimpleName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcardSet::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 9,
      "bowei-yu": 30
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/flashcardstorage/JsonAdaptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/flashcardstorage/JsonFlashcardBankStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonFlashcardBankStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFlashcardBankStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFlashcardBank(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new JsonFlashcardBankStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .readFlashcardBank(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(readFlashcardBank(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"notJsonFormatFlashcardBank.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidFlashcardSetFlashcardBank_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidFlashcardSet.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidAndValidFlashcardSet_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidAndValidFlashcardSet.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidFlashcardFlashcardBank_throwDataConversionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidFlashcard.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidAndValidFlashcard_throwDataConversionException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidAndValidFlashcard.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readAndSaveFlashcardBank_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFlashcardBank.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank original \u003d getTypicalFlashcardBank();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonFlashcardBankStorage jsonFlashcardBankStorage \u003d new JsonFlashcardBankStorage(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonFlashcardBankStorage.saveFlashcardBank(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ReadOnlyFlashcardBank readBack \u003d jsonFlashcardBankStorage.readFlashcardBank(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new FlashcardBank(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        original.setFlashcardSet(PHYSICS, new FlashcardSetBuilder().build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonFlashcardBankStorage.saveFlashcardBank(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        readBack \u003d jsonFlashcardBankStorage.readFlashcardBank(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new FlashcardBank(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String validFlsetName \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        original.addFlashcardSet(new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withFlashcardSetName(validFlsetName)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonFlashcardBankStorage.saveFlashcardBank(original); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        readBack \u003d jsonFlashcardBankStorage.readFlashcardBank().get(); // file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new FlashcardBank(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveFlashcardBank_nullFlashcardBank_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFlashcardBank(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Saves {@code schedule} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new JsonFlashcardBankStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    .saveFlashcardBank(flashcardBank, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveFlashcardBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFlashcardBank(new FlashcardBank(), null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 9,
      "bowei-yu": 114
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/flashcardstorage/JsonSerializableFlashcardBankTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonSerializableFlashcardBankTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFlashcardBankTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path TYPICAL_FLASHCARD_SETS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcardSets.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_SETS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFlashcardSets.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_typicalFlashcardSetsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonSerializableFlashcardBank dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARD_SETS_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                JsonSerializableFlashcardBank.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank flashcardBankFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank typicalFlashcardBank \u003d getTypicalFlashcardBank();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(typicalFlashcardBank, flashcardBankFromFile);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_duplicateFlashcardSets_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonSerializableFlashcardBank dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_SETS_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                JsonSerializableFlashcardBank.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFlashcardBank.MESSAGE_DUPLICATE_FLASHCARD_SETS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 6,
      "bowei-yu": 32
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/quizstorage/JsonAdaptedQuizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.storage.quizstorage.JsonAdaptedQuiz.MESSAGE_MISSING_FIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.QUIZ_PHYSICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.storage.flashcardstorage.JsonAdaptedFlashcardSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.testutil.QuizBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedQuizTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final JsonAdaptedFlashcardSet VALID_FLSET \u003d new JsonAdaptedFlashcardSet(PHYSICS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final int VALID_TOTAL_SCORE \u003d QuizBuilder.DEFAULT_TOTAL_SCORE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final int VALID_POINTS_SCORED \u003d QuizBuilder.DEFAULT_POINTS_SCORED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final boolean[] VALID_SCOREBOARD \u003d QuizBuilder.DEFAULT_SCORE_BOARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String[] VALID_USER_ANSWERS \u003d QuizBuilder.DEFAULT_USER_ANSWERS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_validQuizDetails_returnsQuiz() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedQuiz quiz \u003d new JsonAdaptedQuiz(VALID_FLSET, VALID_TOTAL_SCORE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                VALID_POINTS_SCORED, VALID_SCOREBOARD, VALID_USER_ANSWERS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(QUIZ_PHYSICS, quiz.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullFlashcardSet_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedQuiz quiz \u003d new JsonAdaptedQuiz(null, VALID_TOTAL_SCORE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                VALID_POINTS_SCORED, VALID_SCOREBOARD, VALID_USER_ANSWERS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MISSING_FIELD, FlashcardSet.class.getSimpleName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, quiz::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_zeroTotalScore_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedQuiz quiz \u003d new JsonAdaptedQuiz(VALID_FLSET, 0,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                VALID_POINTS_SCORED, VALID_SCOREBOARD, VALID_USER_ANSWERS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MISSING_FIELD, \"total score\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, quiz::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullScoreboard_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedQuiz quiz \u003d new JsonAdaptedQuiz(VALID_FLSET, VALID_TOTAL_SCORE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                VALID_POINTS_SCORED, null, VALID_USER_ANSWERS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MISSING_FIELD, \"scoreboard\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, quiz::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_zeroLengthScoreboard_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedQuiz quiz \u003d new JsonAdaptedQuiz(VALID_FLSET, VALID_TOTAL_SCORE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                VALID_POINTS_SCORED, new boolean[0], VALID_USER_ANSWERS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MISSING_FIELD, \"scoreboard\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, quiz::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullUserAnswers_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedQuiz quiz \u003d new JsonAdaptedQuiz(VALID_FLSET, VALID_TOTAL_SCORE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                VALID_POINTS_SCORED, VALID_SCOREBOARD, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MISSING_FIELD, \"user answers\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, quiz::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_zeroLengthUserAnswers_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedQuiz quiz \u003d new JsonAdaptedQuiz(VALID_FLSET, VALID_TOTAL_SCORE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                VALID_POINTS_SCORED, VALID_SCOREBOARD, new String[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MISSING_FIELD, \"user answers\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, quiz::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 79
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/quizstorage/JsonQuizRecordsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.QUIZ_PHYSICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalQuizzes.getTypicalQuizRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonQuizRecordsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonQuizRecordsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readQuizRecords_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readQuizRecords(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private java.util.Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new JsonQuizRecordsStorage(Paths.get(filePath)).readQuizRecords(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(readQuizRecords(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readQuizRecords(\"notJsonFormatQuizRecords.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readQuizRecords_invalidQuizRecords_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readQuizRecords(\"invalidQuizRecords.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readQuizRecords_invalidAndValidQuizRecords_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readQuizRecords(\"invalidAndValidQuizRecords.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readAndSaveQuizRecords_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempQuizRecords.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords original \u003d getTypicalQuizRecords();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonQuizRecordsStorage jsonQuizRecordsStorage \u003d new JsonQuizRecordsStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonQuizRecordsStorage.saveQuizRecords(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ReadOnlyQuizRecords readBack \u003d jsonQuizRecordsStorage.readQuizRecords(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new QuizRecords(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        original.removeQuiz(QUIZ_PHYSICS.getFlsetName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonQuizRecordsStorage.saveQuizRecords(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        readBack \u003d jsonQuizRecordsStorage.readQuizRecords(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new QuizRecords(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        original.addQuiz(QUIZ_PHYSICS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonQuizRecordsStorage.saveQuizRecords(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        readBack \u003d jsonQuizRecordsStorage.readQuizRecords().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new QuizRecords(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords_nullQuizRecords_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveQuizRecords(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Saves {@code quizRecords} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private void saveQuizRecords(ReadOnlyQuizRecords quizRecords, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new JsonQuizRecordsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    .saveQuizRecords(quizRecords, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveQuizRecords(new QuizRecords(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 107
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/schedulestorage/JsonAdaptedDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonAdaptedDateTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"12/10/2020 12:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d \"2020-10-10 12:00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_validDateTime_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonAdaptedDateTime dateTime \u003d new JsonAdaptedDateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime dateTimeObject \u003d new DateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(dateTimeObject, dateTime.toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonAdaptedDateTime dateTime \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new JsonAdaptedDateTime(INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dateTime::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 26,
      "cupofjoee": 4
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/schedulestorage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.storage.schedulestorage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2103T_WEEK8_QUIZ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Optional.ofNullable((CS2103T_WEEK8_QUIZ.getDescription().get().toString()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_DATE_TIME \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            CS2103T_WEEK8_QUIZ.getDateTime().map(dateTime -\u003e dateTime.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final Optional\u003cInteger\u003e VALID_DURATION \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CS2103T_WEEK8_QUIZ.getDuration().map(dur -\u003e dur.duration);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(CS2103T_WEEK8_QUIZ, task.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(null, VALID_DESCRIPTION, VALID_DATE_TIME, VALID_DURATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 27,
      "cupofjoee": 6,
      "chuyiting": 3
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/schedulestorage/JsonScheduleStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.CS2101_OP2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonScheduleStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonScheduleStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readSchedule_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readSchedule(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private java.util.Optional\u003cReadOnlySchedule\u003e readSchedule(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new JsonScheduleStorage(Paths.get(filePath)).readSchedule(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(readSchedule(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"notJsonFormatSchedule.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readSchedule_invalidTaskSchedule_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"invalidTaskSchedule.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readSchedule_invalidAndValidTaskSchedule_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"invalidAndValidTaskSchedule.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readAndSaveSchedule_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempSchedule.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule original \u003d getSampleSchedule();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        System.out.println(original.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonScheduleStorage jsonScheduleStorage \u003d new JsonScheduleStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        jsonScheduleStorage.saveSchedule(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ReadOnlySchedule readBack \u003d jsonScheduleStorage.readSchedule(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        original.removeTask(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        jsonScheduleStorage.saveSchedule(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        readBack \u003d jsonScheduleStorage.readSchedule(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        original.addTask(CS2101_OP2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        jsonScheduleStorage.saveSchedule(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        readBack \u003d jsonScheduleStorage.readSchedule().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void saveSchedule_nullSchedule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSchedule(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Saves {@code schedule} at the specified {@code filePath}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void saveSchedule(ReadOnlySchedule schedule, String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            new JsonScheduleStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                    .saveSchedule(schedule, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void saveSchedule_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSchedule(new Schedule(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 101,
      "cupofjoee": 8
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/storage/schedulestorage/JsonSerializableScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.testutil.SampleTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonSerializableScheduleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableScheduleTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksSchedule.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskSchedule.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskSchedule.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                JsonSerializableSchedule.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule scheduleFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule typicalTasksSchedule \u003d SampleTasks.getSampleSchedule();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean test \u003d scheduleFromFile.equals(typicalTasksSchedule);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(scheduleFromFile, typicalTasksSchedule);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                JsonSerializableSchedule.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                JsonSerializableSchedule.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableSchedule.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 42,
      "cupofjoee": 6
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/FlashcardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"What is GitHub?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"GitHub is a code hosting platform \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"for version control and collaboration\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a {@code FlashcardBuilder} with the default details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        question \u003d flashcardToCopy.getQuestion();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        answer \u003d flashcardToCopy.getAnswer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code Question} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code Answer} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Flashcard(question, answer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "bowei-yu": 47
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/FlashcardSetBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardSetBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String DEFAULT_FLASHCARD_SET_NAME \u003d \"Physics\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardSetName flashcardSetName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a {@code FlashcardSetBuilder} with the default details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSetName \u003d new FlashcardSetName(DEFAULT_FLASHCARD_SET_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardSetToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder(FlashcardSet flashcardSetToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSetName \u003d flashcardSetToCopy.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcards \u003d flashcardSetToCopy.getFlashcards();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code FlashcardSetName} of the {@code FlashcardSet} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder withFlashcardSetName(String flashcardSetName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSetName \u003d new FlashcardSetName(flashcardSetName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code flashcards} of the {@code FlashcardSet} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder withFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcards \u003d flashcards;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a {@code Flashcard} to the {@code FlashcardSet} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcard to be added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcards.add(flashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Deletes a {@code Flashcard} from the {@code FlashcardSet} that we are building,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * at the given index."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder deleteFlashcard(Index flashcardIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcards.remove(flashcardIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSet build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new FlashcardSet(flashcardSetName, flashcards);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 5,
      "bowei-yu": 65
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/QuizBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final FlashcardSet DEFAULT_FLASHCARD_SET \u003d PHYSICS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final int DEFAULT_TOTAL_SCORE \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final int DEFAULT_POINTS_SCORED \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final boolean[] DEFAULT_SCORE_BOARD \u003d new boolean[]{true, false, true};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String[] DEFAULT_USER_ANSWERS \u003d new String[]{\"correct ans\", \"wrong ans\", null};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardSet flashcardSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private int flashcardSetIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private int totalScore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private int pointsScored;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private boolean[] scoreboard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private String[] userAnswers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a {@code QuizBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSet \u003d DEFAULT_FLASHCARD_SET;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSetIndex \u003d DEFAULT_INDEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        totalScore \u003d DEFAULT_TOTAL_SCORE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        pointsScored \u003d DEFAULT_POINTS_SCORED;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        scoreboard \u003d DEFAULT_SCORE_BOARD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        userAnswers \u003d DEFAULT_USER_ANSWERS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Initializes the QuizBuilder with the data of {@code QuizToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizBuilder(Quiz quizToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSet \u003d quizToCopy.getFlashcardSet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSetIndex \u003d quizToCopy.getFlashcardSetIndex();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        totalScore \u003d quizToCopy.getTotalScore();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        pointsScored \u003d quizToCopy.getPointsScored();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        scoreboard \u003d quizToCopy.getResults();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        userAnswers \u003d quizToCopy.getUserAnswers();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code FlashcardSet} of the {@code Quiz} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizBuilder withFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code pointsScored} of the {@code Quiz} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizBuilder withPointsScored(int pointsScored) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.pointsScored \u003d pointsScored;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code scoreboard} of the {@code Quiz} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizBuilder withScoreBoard(boolean[] scoreBoard) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.scoreboard \u003d scoreBoard;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code userAnswers} of the {@code Quiz} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizBuilder withUserAnswers(String[] userAnswers) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers \u003d userAnswers;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Builds the quiz with initial values."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return the quiz built"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Quiz(flashcardSetIndex, flashcardSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Builds the quiz with default sample after-quiz values."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return the quiz build"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz buildDefaultQuiz() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Quiz(flashcardSet, totalScore, pointsScored, scoreboard, userAnswers);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 95
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/SampleTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class SampleTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2103T_WEEK8_QUIZ \u003d new TaskBuilder().withTitle(\"CS2103T\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDescription(\"Week 8 Quiz\").withDateTime(\"2020-09-27 12:00\").withDuration(\"30\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_TUTORIAL_HOMEWORK \u003d new TaskBuilder().withTitle(\"CS2100\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Pipeline homework\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-10-04 10:00\").withDuration(\"40\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task ST2334_ASSIGNMENT \u003d new TaskBuilder().withTitle(\"ST2334\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Chapter 2 Quiz\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-10-01 23:00\").withDuration(\"50\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2101_OP2 \u003d new TaskBuilder().withTitle(\"CS2101\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Oral Presentation 2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-10-25 10:00\").withDuration(\"60\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no Description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_FINAL \u003d new TaskBuilder().withTitle(\"CS2100\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-11-30 13:00\").withDuration(\"60\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no DateTime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2101_FEEDBACK \u003d new TaskBuilder().withTitle(\"CS2101\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Luminus Feedback\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"\").withDuration(\"60\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private SampleTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns an {@code Schedule} with all the typical tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static Schedule getSampleSchedule() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule sc \u003d new Schedule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (Task task : getSampleTasks()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            sc.addTask(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return sc;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static List\u003cTask\u003e getSampleTasks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T_WEEK8_QUIZ,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_TUTORIAL_HOMEWORK,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ST2334_ASSIGNMENT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_FINAL,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2101_FEEDBACK));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 56,
      "cupofjoee": 3,
      "chuyiting": 6
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Weekly team meeting\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_DATE_TIME \u003d \"2020-10-10 13:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_DURATION \u003d \"30\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATE_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        duration \u003d new Duration((DEFAULT_DURATION));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        title \u003d taskToCopy.getTitle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        description \u003d taskToCopy.getDescription().orElse(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dateTime \u003d taskToCopy.getDateTime().orElse(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        duration \u003d taskToCopy.getDuration().orElse(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Sets the {@code Title} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description.equals(\"\") ? null : new Description(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d dateTime.equals(\"\") ? null : new DateTime(dateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Sets the {@code Duration} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.duration \u003d duration.equals(\"\") ? null : new Duration(duration);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Task(title, description, dateTime, duration);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 65,
      "cupofjoee": 6,
      "chuyiting": 9
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Change absolute path into relative path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Path toRelativePath(Path path) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (path.isAbsolute()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            File root \u003d new File(\"/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            String rootPath \u003d root.getAbsolutePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            String relativePath \u003d path.toString().substring(rootPath.length());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return Paths.get(relativePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 13,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/TypicalFlashcardSets.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.CHICKEN_JOKE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.EXPLAIN_INTEREST_TO_AD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.HOOKES_LAW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEGATIVE_EXTERNALITIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.PROCRASTINATION_JOKE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcards.WATCH_JOKE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class TypicalFlashcardSets {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final FlashcardSet PHYSICS \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(NEWTONS_SECOND_LAW)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(HOOKES_LAW)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(DECAY_CONSTANT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final FlashcardSet ECONOMICS \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withFlashcardSetName(\"Economics\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(OPPORTUNITY_COST)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(NEGATIVE_EXTERNALITIES)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(EXPLAIN_INTEREST_TO_AD)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final FlashcardSet ICEBREAKER_JOKES \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withFlashcardSetName(\"Icebreaker jokes\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(CHICKEN_JOKE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(WATCH_JOKE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(PROCRASTINATION_JOKE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private TypicalFlashcardSets() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns a {@code FlashcardBank} with all the typical flashcard sets."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static FlashcardBank getTypicalFlashcardBank() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (FlashcardSet flset : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flashcardBank.addFlashcardSet(flset);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardBank;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static List\u003cFlashcardSet\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet economics \u003d new FlashcardSetBuilder(ECONOMICS).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet icebreakerJokes \u003d new FlashcardSetBuilder(ICEBREAKER_JOKES).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(physics, economics, icebreakerJokes));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 12,
      "bowei-yu": 47
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/TypicalFlashcards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard NEWTONS_SECOND_LAW \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Newton\u0027s Second Law\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"The rate of change of momentum of a body is directly proportional\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \" to the resultant force acting on it\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \" and occurs in the direction of the force\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard HOOKES_LAW \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Hooke\u0027s Law\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"The change in length x of the material is directly proportional \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"to the resultant force applied to it, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"provided that the limit of proportionality is not exceeded\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard DECAY_CONSTANT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Decay constant\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"Probability of a radioactive nucleus decaying per unit time\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard OPPORTUNITY_COST \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Define the idea of opportunity cost\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"Benefits or value of the next best alternative forgone\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard NEGATIVE_EXTERNALITIES \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"What are negative externalities?\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"Harmful side effects of production or consumption on persons \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"other than the producers or consumers themselves.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"The third parties are not compensated for the external costs.\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard EXPLAIN_INTEREST_TO_AD \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Explain how interest rate increasing leads to a decrease in aggregate demand (AD).\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"increase i/r -\u003e increased cost of borrowing \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"-\u003e decrease in Consumption and Investments -\u003e decrease in AD\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard CHICKEN_JOKE \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Why did the chicken cross the road?\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"To get to the other side\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard WATCH_JOKE \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Why did the late dude sit on his watch?\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"He wanted to be on time\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard PROCRASTINATION_JOKE \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Define procrastination\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"I\u0027ll do it later\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String KEYWORD_MATCHING_PTERODACTYL \u003d \"Pterodactyl\"; // A keyword that matches PTERODACTYL"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private TypicalFlashcards() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns a {@code FlashcardSet} with all the typical flashcards."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static FlashcardSet getTypicalFlashcardSet() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSetName physics \u003d new FlashcardSetName(\"Physics\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flset \u003d new FlashcardSet(physics);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flset;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(NEWTONS_SECOND_LAW, HOOKES_LAW, DECAY_CONSTANT));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "bowei-yu": 75
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/TypicalQuizzes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.ECONOMICS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.ICEBREAKER_JOKES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.studybananas.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.quiz.Quiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class TypicalQuizzes {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Quiz QUIZ_PHYSICS \u003d new QuizBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withFlashcardSet(PHYSICS)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .buildDefaultQuiz();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Quiz QUIZ_ECONOMICS \u003d new QuizBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withFlashcardSet(ECONOMICS)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Quiz QUIZ_ICEBREAKER_JOKES \u003d new QuizBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withFlashcardSet(ICEBREAKER_JOKES)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .buildDefaultQuiz();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private TypicalQuizzes() {} // prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns a {@code QuizRecords} with all the typical quizzes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static QuizRecords getTypicalQuizRecords() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords quizRecords \u003d new QuizRecords();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Quiz quiz : getTypicalQuizzes().values()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizRecords.addQuiz(quiz);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static Map\u003cFlashcardSetName, Quiz\u003e getTypicalQuizzes() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizPhysics \u003d new QuizBuilder().withFlashcardSet(PHYSICS).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizEconomics \u003d new QuizBuilder().withFlashcardSet(ECONOMICS).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz quizIcebreakerJokes \u003d new QuizBuilder().withFlashcardSet(ICEBREAKER_JOKES).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Map\u003cFlashcardSetName, Quiz\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        map.put(quizPhysics.getFlsetName(), quizPhysics);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        map.put(quizEconomics.getFlsetName(), quizEconomics);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        map.put(quizIcebreakerJokes.getFlsetName(), quizEconomics);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 51
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2103T_WEEK8_QUIZ \u003d new TaskBuilder().withTitle(\"CS2103T\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Week 8 Quiz\").withDateTime(\"2020-09-27 12:00\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_TUTORIAL_HOMEWORK \u003d new TaskBuilder().withTitle(\"CS2100\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Pipeline homework\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"2020-10-04 10:00\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task ST2334_ASSIGNMENT \u003d new TaskBuilder().withTitle(\"ST2334\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Chapter 2 Quiz\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"2020-10-01 23:00\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no Description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_FINAL \u003d new TaskBuilder().withTitle(\"CS2100 Final\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"2020-11-30 13:00\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no DateTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2101_FEEDBACK \u003d new TaskBuilder().withTitle(\"CS2101\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Luminus Feedback\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns an {@code Schedule} with all the typical tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static Schedule getTypicalSchedule() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule sc \u003d new Schedule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            sc.addTask(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return sc;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T_WEEK8_QUIZ,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_TUTORIAL_HOMEWORK,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ST2334_ASSIGNMENT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_FINAL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2101_FEEDBACK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 58,
      "cupofjoee": 3
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/studybananas/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.studybananas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.studybananas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.studybananas.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003c?import seedu.studybananas.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cfx:root type\u003d\"seedu.studybananas.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 5
    }
  }
]
